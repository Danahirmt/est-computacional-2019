[
["index.html", "Estadística Computacional Información del curso", " Estadística Computacional María Teresa Ortiz Información del curso Notas del curso Estadística Computacional de los programas de maestría en Ciencia de Datos y en Computación del ITAM. Las notas fueron desarrolladas en 2014 por Teresa Ortiz quien las actualiza anualmente. En caso de encontrar errores o tener sugerencias del material se agradece la propuesta de correcciones mediante pull requests. Ligas Notas: https://tereom.github.io/est-computacional-2019/ Correo: teresa.ortiz.mancera@gmail.com GitHub: https://github.com/tereom/est-computacional-2019 Agradecimientos Se agradecen las contriubuciones a estas notas de @felipegonzalez y @mkokotchikova. Este trabajo está bajo una Licencia Creative Commons Atribución 4.0 Internacional. "],
["temario.html", "Temario", " Temario Manipulación y visualización de datos Principios de visualización. Reestructura y manipulación de datos. Temas selectos de programación en R: programación funcional, evaluación no estándar. Referencias: Tufte (2006), Cleveland (1993), Wickham and Grolemund (2017), Wickham (2019). Inferencia y remuestreo Repaso de probabilidad. Muestreo y probabilidad. Inferencia. El principio del plug-in. Bootstrap Cálculo de errores estándar e intervalos de confianza. Estructuras de datos complejos. Introducción a modelos probabilísticos. Referencias: Ross (1998), Efron and Tibshirani (1993). Modelos de probabilidad y simulación Variables aleatorias y modelos probabilísticos. Familias importantes: discretas y continuas. Teoría básica de simulación El generador uniforme de números aleatorios. El método de la transformación inversa. Simulación de variables aleatorias discretas con soporte finito. Otras variables aleatorias. Simulación para modelos gráficos Modelos probabilíticos gráficos. Simulación (e.g. ANOVA, regresión simple). Inferencia paramétrica y remuestreo Modelos paramétricos. Bootsrap paramétrico. Inferencia de gráficas Referencias: Gelman and Hill (2007). Métodos computacionales e inferencia Bayesiana Inferencia bayesiana. Métodos diretos Familias conjugadas. Aproximación por cuadrícula. Aceptación y rechazo. MCMC Cadenas de Markov. Metropolis-Hastings. Muestreador de Gibbs. Monte Carlo Hamiltoniano. Diagnósticos de convergencia. Referencias: Kruschke (2015), Gelman et al. (2013). Calificación Tareas 20% (se envían por correo con título EstComp-TareaXX). Exámen parcial (proyecto y exámen en clase) 40%. Examen final 40%. Software R: https://www.r-project.org RStudio: https://www.rstudio.com Stan: http://mc-stan.org Otros recursos Socrative (Room ESTCOMP): Para encuestas y ejercicios en clase. Lista de correos: Suscribete si quieres recibir noticias del curso o una suscripción a DataCamp (6 meses con acceso a todos los recursos de forma gratuita). Noticias Los dos premios más importantes en estadística se entregaron en 2019 a Hadley Whickham y a Bradley Efron, gran parte de nuestro curso se desarrolla en torno a las contribuciones de estos dos estadísticos: Hadley Wickham cuyos paquetes, libros y artículos son los recursos esenciales para la primera parte del curso, ganó en 2019 el reconocido premio COPSS: “Por la importancia de su trabajo en el computo estadístico, visualización, gráficas y análisis de datos; por desarrollar e implementar una extensa ifraestructura computacional para el análisis de datos a través del software R; por hacer el pensamiento estadístico y el cómputo accesible a una gran audiencia; y por realzar el importante papel de la estadística entre los científicos de datos.” (2019 Presidents’ Award) Bradley Efron creador del bootsrtap, que estudiaremos como segunda sección del curso, fue seleccionado en 2018 para recibir el premio internacional en estadística como reconocimiento al bootstrap, un método que desarrolló en 1977 para calcular incertidumbre en resultados científicos y que ha tenido un impacto extraordinario en muchos ámbitos. “A pesar de que la estadística no ofrece una píldora mágica para la investigación científica cuantitativa, el bootstrap es el mejor analgésico jamás producido” (Xiao-Li Meng, proff. at Harvard University.) Referencias "],
["principios-visualizacion.html", "Sección 1 Principios visualización", " Sección 1 Principios visualización “The simple graph has brought more information to the data analyst’s mind than any other device.” — John Tukey El cuarteto de Ascombe En 1971 un estadístico llamado Frank Anscombe (fundador del departamento de Estadística de la Universidad de Yale) publicó cuatro conjuntos de datos, cada uno consiste de 11 observaciones y tienen las mismas propiedades estadísticas. Sin embargo, cuando analizamos los datos de manera gráfica en un histograma encontramos rápidamente que los conjuntos de datos son muy distintos. Media de \\(x\\): 9 Varianza muestral de \\(x\\): 11 Media de \\(y\\): 7.50 Varianza muestral de \\(y\\): 4.12 Correlación entre \\(x\\) y \\(y\\): 0.816 Línea de regresión lineal: \\(y = 3.00 + 0.500x\\) En la gráfica del primer conjunto de datos, se ven datos como los que se tendrían en una relación lineal simple con un modelo que cumple los supuestos de normalidad. La segunda gráfica (arriba a la derecha) muestra unos datos que tienen una asociación pero definitivamente no es lineal. En la tercera gráfica (abajo a la izquierda) están puntos alineados perfectamente en una línea recta, excepto por uno de ellos. En la última gráfica podemos ver un ejemplo en el cual basta tener una observación atípica para que se produzca un coeficiente de correlación alto aún cuando en realidad no existe una asociación lineal entre las dos variables. El cuarteto de Ascombe inspiró una técnica para crear datos que comparten las propiedades estadísticas al igual que en el cuarteto, pero que producen gráficas muy distintas (Matejka, Fitzmaurice). "],
["introduccion.html", "1.1 Introducción", " 1.1 Introducción La visualización de datos no trata de hacer gráficas “bonitas” o “divertidas”, ni de simplificar lo complejo o ayudar a una persona “que no entiende mucho” a entender ideas complejas. Más bien, trata de aprovechar nuestra gran capacidad de procesamiento visual para exhibir de manera clara aspectos importantes de los datos. El siguiente ejemplo de (Tufte 2006), ilustra claramente la diferencia entre estos dos enfoques. A la izquierda están gráficas (más o menos típicas de Powerpoint) basadas en la filosofía de simplificar, de intentar no “ahogar” al lector con datos. El resultado es una colección incoherente, de bajo contenido, que no tiene mucho qué decir y que es, “indeferente al contenido y la evidencia”. A la derecha está una variación del rediseño de Tufte en forma de tabla, que en este caso particular es una manera eficiente de mostrar claramente los patrones que hay en este conjunto simple de datos. ¿Qué principios son los que soportan la efectividad de esta tabla sobre la gráfica de la derecha? Veremos que hay dos conjuntos de principios importantes: unos relacionados con el diseño y otros con la naturaleza del análisis de datos, independientemente del método de visualización. Visualización de datos en la estadística El estándar científico para contestar preguntas o tomar decisiones es uno que se basa en el análisis de datos: para contestar preguntas o tomar decisiones es necesario, en primer lugar, reunir todos los datos disponibles que puedan contener o sugerir alguna guía para entender mejor la pregunta o la decisión a la que nos enfrentamos. Esta recopilación de datos -que pueden ser cualitativos, cuantitativos, o una mezcla de los dos, debe entonces ser analizada para extraer información relevante para nuestro problema. Tradicionalmente el análisis de datos se divide en dos distintos tipos de trabajo: * El trabajo exploratorio o de detective: ¿cuáles son los aspectos importantes de estos datos? ¿qué indicaciones generales muestran los datos? ¿qué tareas de análisis debemos empezar haciendo? ¿cuáles son los caminos generales para formular con precisión y contestar algunas preguntas que nos interesen? * El trabajo inferencial, confirmatorio, o de juez: ¿cómo evaluar el peso de la evidencia de los descubrimientos del paso anterior? ¿qué tan bien soportadas están las respuestas y conclusiones por nuestro conjunto de datos? Aunque en el proceso de inferencia las gráficas cada vez son más importantes, la visualización entra más claramente dentro del análisis exploratorio de datos. Y como en un principio no es claro como la visualización aporta al proceso de la inferencia, se le consideró por mucho tiempo como un área de poca importancia para la estadística: una herramienta que en todo caso sirve para comunicar ideas simples, de manera deficiente, y a personas poco sofisticadas. El peor lado de este punto de vista consiste en restringirse a el análisis estadístico rutinario Cleveland (1993): aplicar las recetas y negarse a ver los datos de distinta manera (¡incluso pensar que esto puede sesgar los resultados, o que nos podría engañar!). El siguiente ejemplo muestra un caso grave y real (no simulado) de este análisis estadístico rutinario (tomado de Cleveland (1994)). A la derecha mostramos los resultados de un experimento de agricultura. Se cultivaron diez variedades de cebada en seis sitios de Minnesota, en \\(1921\\) y \\(1932\\). Este es uno de los primeros ejemplos en el que se aplicaron las ideas de Fisher en cuanto a diseño de experimentos. En primer lugar, observamos: Los niveles generales de rendimiento varían mucho dependiendo del sitio: hay mejores y peores sitios. Los rendimientos son típicamente más altos en 1931 que en 1932. Sin embargo, Morris es anómalo en cuanto a que el patrón no es consistente con el resto de los sitios. Hay variación considerable de las variedades dentro de cada sitio. ¿Existe alguna variedad que sea mejor que otras? Notamos claramente la anomalía en las diferencias: en el sitio Morris, el año 1932 fue mejor que el de 1931. Estos datos fueron reanalizados desde la época en la que se recolectaron por muchos agrónomos. Hasta muy recientemente se detectó la anomalía en el comportamiento de los años en el sitio Morris, el cual es evidente en la gráfica. Investigación posterior ha mostrado que es muy plausible que en algún momento alguien volteó las etiquetas de los años en este sitio. Este ejemplo muestra, en primer lugar, que la visualización es crucial en el proceso de análisis de datos: sin ella estamos expuestos a no encontrar aspectos importantes de los datos (errores) que deben ser discutidos - aún cuando nuestra receta de análisis no considere estos aspectos. Ninguna receta puede aproximarse a describir todas las complejidades y detalles en un conjunto de datos de tamaño razonable (este ejemplo, en realidad, es chico). Sin embargo, la visualización de datos, por su enfoque menos estructurado, y el hecho de que se apoya en un medio con un “ancho de banda” mayor al que puede producir un cierto número de cantidades resumen, es ideal para investigar estos aspectos y detalles. Visualización popular de datos Publicaciones populares (periódicos, revistas, sitios internet) muchas veces incluyen visualización de datos como parte de sus artículos o reportajes. En general siguen el mismo patrón que en la visión tradicionalista de la estadística: sirven más para divertir que para explicar, tienden a explicar ideas simples y conjuntos chicos de datos, y se consideran como una “ayuda” para los “lectores menos sofisticados”. Casi siempre se trata de gráficas triviales (muchas veces con errores graves) que no aportan mucho a artículos que tienen un nivel de complejidad mucho mayor (es la filosofía: lo escrito para el adulto, lo graficado para el niño). Referencias "],
["teoria-de-visualizacion-de-datos.html", "1.2 Teoría de visualización de datos", " 1.2 Teoría de visualización de datos Existe teoría fundamentada acerca de la visualización. Después del trabajo pionero de Tukey, los principios e indicadores de Tufte se basan en un estudio de la historia de la graficación y ejercicios de muestreo de la práctica gráfica a lo largo de varias disciplinas (¿cuáles son las mejores gráficas? ¿por qué? El trabajo de Cleveland es orientado a la práctica del análisis de datos (¿cuáles gráficas nos han ayudado a mostrar claramente los resultados del análisis?), por una parte, y a algunos estudios de percepción visual. En resumen, hablaremos de las siguientes guías: Principios generales del diseño analítico Aplicables a una presentación o análisis completos, y como guía para construir nuevas visualizaciones (Tufte 2006). **Principio 1.** Muestra comparaciones, contrastes, diferencias. **Principio 2.** Muestra causalidad, mecanismo, explicación, estructura sistemática. **Principio 3.** Muestra datos multivariados, es decir, más de una o dos variables. **Principio 4.** Integra palabras, números, imágenes y diagramas. **Principio 5.** Describe la totalidad de la evidencia. Muestra fuentes usadas y problemas relevantes. **Principio 6.** Las presentaciones analíticas, a fin de cuentas, se sostienen o caen dependiendo de la calidad, relevancia e integridad de su contenido. Técnicas de visualización Esta categoría incluye técnicas específicas que dependen de la forma de nuestros datos y el tipo de pregunta que queremos investigar (Tukey (1977), Cleveland (1993), Cleveland (1994), Tufte (2006)). **Tipos de gráficas:** cuantiles, histogramas, caja y brazos, gráficas de dispersión, puntos/barras/ líneas, series de tiempo. **Técnicas para mejorar gráficas:** Transformación de datos, transparencia, vibración, banking 45, suavizamiento y bandas de confianza. **Pequeños múltiplos** Indicadores de calidad gráfica Aplicables a cualquier gráfica en particular. Estas son guías concretas y relativamente objetivas para evaluar la calidad de una gráfica (Tufte 1986). **Integridad Gráfica.** El factor de engaño, es decir, la distorsión gráfica de las cantidades representadas, debe ser mínimo. **Chartjunk.** Minimizar el uso de decoración gráfica que interfiera con la interpretación de los datos: 3D, rejillas, rellenos con patrones. **Tinta de datos.** Maximizar la proporción de tinta de datos vs. tinta total de la gráfica. *For non-data- ink, less is more. For data-ink, less is a bore.* **Densidad de datos.** Las mejores gráficas tienen mayor densidad de datos, que es la razón entre el tamaño del conjunto de datos y el área de la gráfica. Las gráficas se pueden encoger mucho. Percepción visual. Algunas tareas son más fáciles para el ojo humano que otras [@cleveland94]. Referencias "],
["factor-de-engano-y-chartjunk.html", "1.3 Factor de engaño y Chartjunk", " 1.3 Factor de engaño y Chartjunk El factor de engaño es el cociente entre el efecto mostrado en una gráfica y el efecto correspondiente en los datos. Idealmente, el factor de engaño debe ser 1 (ninguna distorsión). El chartjunk son aquellos elementos gráficos que no corresponden a variación de datos, o que entorpecen la interpretación de una gráfica. Estos son los indicadores de calidad más fáciles de entender y aplicar, y afortunadamente cada vez son menos comunes. Un diseño popular que califica como chartjunk y además introduce factores de engaño es el pie de 3D. En la gráfica de la derecha, podemos ver como la rebanada C se ve más grande que la rebanada A, aunque claramente ese no es el caso (factor de engaño). La razón es la variación en la perspectiva que no corresponde a variación en los datos (chartjunk). Crítica gráfica: Gráfica de Pie Todavía elementos que pueden mejorar la comprensión de nuestra gráfica de pie: se trata de la decodificiación que hay que hacer categoría - color - cuantificación. Podemos agregar las etiquetas como se muestra en la serie de la derecha, pero entonces: ¿por qué no mostrar simplemente la tabla de datos? ¿qué agrega el pie a la interpretación? La deficiencias en el pie se pueden ver claramente al intentar graficar más categorías (13). En el primer pie no podemos distinguir realmente cuáles son las categorías grandes y cuáles las chicas, y es muy difícil tener una imagen mental clara de estos datos. Agregar los porcentajes ayuda, pero entonces, otra vez, preguntamos cuál es el propósito del pie. La tabla de la izquierda hace todo el trabajo (una vez que ordenamos las categrías de la más grande a la más chica). Es posible hacer una gráfica de barras como la de abajo a la izquierda. Hay otros tipos de chartjunk comunes: uno es la textura de barras, por ejemplo. El efecto es la producción de un efecto moiré que es desagradable y quita la atención de los datos, como en la gráfica de barras de abajo. Otro común son las rejillas, como mostramos en las gráficas de la izquierda. Nótese como en estos casos hay efectos ópticos no planeados que degradan la percepción de los patrones en los datos. "],
["pequenos-multiplos-y-densidad-grafica.html", "1.4 Pequeños múltiplos y densidad gráfica", " 1.4 Pequeños múltiplos y densidad gráfica La densidad de una gráfica es el tamaño del conjunto de datos que se grafica comparado con el área total de la gráfica. En el siguiente ejemplo, graficamos en logaritmo-10 de cabezas de ganado en Francia (cerdos, res, ovejas y caballos). La gráfica de la izquierda es pobre en densidad pues sólo representa 4 datos. La manera más fácil de mejorar la densidad es hacer más chica la gráfica: La razón de este encogimiento es una que tiene qué ver con las oportunidades perdidas de una gráfica grande. Si repetimos este mismo patrón (misma escala, mismos tipos de ganado) para distintos países obtenemos la siguiente gráfica: Esta es una gráfica de puntos. Es útil como sustituto de una gráfica de barras, y es superior en el sentido de que una mayor proporción de la tinta que se usa es tinta de datos. Otra vez, mayor proporción de tinta de datos representa más oportunidades que se pueden capitalizar, como muestra la gráfica de punto y líneas que mostramos al principio (rendimiento en campos de cebada). Más pequeños múltiplos Los pequeños múltiplos presentan oportunidades para mostrar más acerca de nuestro problema de interés. Consideramos por ejemplo la relación de radiación solar y niveles de ozono. Podemos ver que si incluimos una variable adicional (velocidad del viento) podemos entender más acerca de la relación de radiación solar y niveles de ozono: "],
["tinta-de-datos.html", "1.5 Tinta de datos", " 1.5 Tinta de datos Maximizar la proporción de tinta de datos en nuestras gráficas tiene beneficios inmediatos. La regla es: si hay tinta que no representa variación en los datos, o la eliminación de esa tinta no representa pérdidas de significado, esa tinta debe ser eliminada. El ejemplo más claro es el de las rejillas en gráficas y tablas: ¿Por qué usar grises en lugar de negros? La respuesta tiene qué ver con el principio de tinta de datos: si marcamos las diferencias sutil pero claramente, tenemos más oportunidades abiertas para hacer énfasis en lo que nos interesa: a una gráfica o tabla saturada no se le puede hacer más - es difícil agregar elementos adicionales que ayuden a la comprensión. Si comenzamos marcando con sutileza, entonces se puede hacer más. Los mapas geográficos son un buen ejemplo de este principio. El espacio en blanco es suficientemente bueno para indicar las fronteras en una tabla, y facilita la lectura: Para un ejemplo del proceso de rediseño de una tabla, ver aquí. Finalmente, podemos ver un ejemplo que intenta incorporar los elementos del diseño analítico, incluyendo pequeños múltiplos: "],
["decoracion.html", "1.6 Decoración", " 1.6 Decoración "],
["percepcion-de-escala.html", "1.7 Percepción de escala", " 1.7 Percepción de escala Entre la percepción visual y la interpretación de una gráfica están implícitas tareas visuales específicas que las personas debemos realizar para ver correctamente la gráfica. En la década de los ochenta, William S. Cleveland y Robert McGill realizaron algunos experimentos identificando y clasificando estas tareas para diferentes tipos de gráficos (Cleveland and McGill 1984). En estos, se le pregunta a la persona que compare dos valores dentro de una gráfica, por ejemplo, en dos barras en una gráfica de barras, o dos rebanadas de una gráfica de pie. Los resultados de Cleveland y McGill fueron replicados por Heer y Bostock en 2010 y los resultados se muestran en las gráficas de la abajo: Imagen de Heer y Bostock, 2010 Referencias "],
["ejemplos-grafica-de-minard.html", "1.8 Ejemplos: gráfica de Minard", " 1.8 Ejemplos: gráfica de Minard Concluimos esta sección con una gráfica que, aunque poco común, ejemplifica los principios de una buena gráfica, y es reconocida como una de las mejores visualizaciones de la historia. Una gráfica excelente, presenta datos interesantes de forma bien diseñada: es una cuestión de fondo, de diseño, y estadística… [Se] compone de ideas complejas comunicadas con claridad, precisión y eficiencia. … [Es] lo que da al espectador la mayor cantidad de ideas, en el menor tiempo, con la menor cantidad de tinta, y en el espacio más pequeño. … Es casi siempre multivariado. … Una excelente gráfica debe decir la verdad acerca de los datos. (Tufte, 1983) La famosa visualización de Charles Joseph Minard de la marcha de Napoleón sobre Moscú, ilustra los principios de una buena gráfica. Tufte señala que esta imagen “bien podría ser el mejor gráfico estadístico jamás dibujado”, y sostiene que “cuenta una historia rica y coherente con sus datos multivariados, mucho más esclarecedora que un solo número que rebota en el tiempo”. Se representan seis variables: el tamaño del ejército, su ubicación en una superficie bidimensional, la dirección del movimiento del ejército y la temperatura en varias fechas durante la retirada de Moscú“. Hoy en día Minard es reconocido como uno de los principales contribuyentes a la teoría de análisis de datos y creación de infografías con un fundamento estadístico. Se grafican 6 variables: el número de tropas de Napoleón, la distancia, la temperatura, la ubicación (latitud y longitud), la dirección en que viajaban las tropas y la localización relativa a fechas específicas. La gráfica de Minard, como la describe E.J. Marey, parece “desafiar la pluma del historiador con su brutal elocuencia”, la combinación de datos del mapa, y la serie de tiempo, dibujados en 1869, “retratan una secuencia de pérdidas devastadoras que sufrieron las tropas de Napoleón en 1812”. Comienza en la izquierda, en la frontera de Polonia y Rusia, cerca del río Niemen. La línea gruesa dorada muestra el tamaño de la Gran Armada (422,000) en el momento en que invadía Rusia en junio de 1812. El ancho de esta banda indica el tamaño de la armada en cada punto del mapa. En septiembre, la armada llegó a Moscú, que ya había sido saqueada y dejada desértica, con sólo 100,000 hombres. El camino del retiro de Napoleón desde Moscú está representado por la línea oscuara (gris) que está en la parte inferior, que está relacionada a su vez con la temperatura y las fechas en el diagrama de abajo. Fue un invierno muy frío, y muchos se congelaron en su salida de Rusia. Como se muestra en el mapa, cruzar el río Berezina fue un desastre, y el ejército de Napoleón logró regresar a Polonia con tan sólo 10,000 hombres. También se muestran los movimientos de las tropas auxiliaries, que buscaban proteger por atrás y por la delantera mientras la armada avanzaba hacia Moscú. La gráfica de Minard cuenta una historia rica y cohesiva, coherente con datos multivariados y con los hechos históricos, y que puede ser más ilustrativa que tan sólo representar un número rebotando a lo largo del tiempo. "],
["introduccion-a-r-y-al-paquete-ggplot2.html", "Sección 2 Introducción a R y al paquete ggplot2", " Sección 2 Introducción a R y al paquete ggplot2 ¿Qué es R? R es un lenguaje de programación y un ambiente de cómputo estadístico R es software libre (no dice qué puedes o no hacer con el software), de código abierto (todo el código de R se puede inspeccionar - y se inspecciona). Cuando instalamos R, instala la base de R. Mucha de la funcionalidad adicional está en paquetes (conjunto de funciones y datos documentados) que la comunidad contribuye. ¿Cómo entender R? Hay una sesión de R corriendo. La consola de R es la interfaz entre R y nosotros. En la sesión hay objetos. Todo en R es un objeto: vectores, tablas, funciones, etc. Operamos aplicando funciones a los objetos y creando nuevos objetos. ¿Por qué R? R funciona en casi todas las plataformas (Mac, Windows, Linux e incluso en Playstation 3). R es un lenguaje de programación completo, permite desarrollo de DSLs. R promueve la investigación reproducible. R está actualizado gracias a que tiene una activa comunidad. Solo en CRAN hay cerca de \\(10,000\\) paquetes (funcionalidad adicional de R creadas creada por la comunidad). R se puede combinar con otras herramientas. R tiene capacidades gráficas muy sofisticadas. R es popular (Revolutions blog). "],
["r-primeros-pasos.html", "2.1 R: primeros pasos", " 2.1 R: primeros pasos Para comenzar se debe descargar R, esta descarga incluye R básico y un editor de textos para escribir código. Después de descargar R se recomienda descargar RStudio (gratis y libre). Rstudio es un ambiente de desarrollo integrado para R: incluye una consola, un editor de texto y un conjunto de herramientas para administrar el espacio de trabajo cuando se utiliza R. Algunos shortcuts útiles en RStudio son: En el editor command/ctrl + enter: enviar código a la consola ctrl + 2: mover el cursor a la consola En la consola flecha hacia arriba: recuperar comandos pasados ctrl + flecha hacia arriba: búsqueda en los comandos ctrl + 1: mover el cursor al editor R en análisis de datos El estándar científico para contestar preguntas o tomar decisiones es uno que se basa en el análisis de datos. Aquí consideramos técnicas cuantitativas: recolectar, organizar, entender, interpretar y extraer información de colecciones de datos predominantemente numéricos. Todas estas tareas son partes del análisis de datos, cuyo proceso podría resumirse con el siguiente diagrama: Es importante la forma en que nos movemos dentro de estos procesos en el análisis de datos y en este curso buscamos dar herramientas para facilitar cumplir los siguientes principios: Reproducibilidad. Debe ser posible reproducir el análisis en todos sus pasos, en cualquier momento. Claridad. Los pasos del análisis deben estar documentados apropiadamente, de manera que las decisiones importantes puedan ser entendidas y explicadas claramente. Dedicaremos las primeras sesiones a aprender herramientas básicas para poder movernos agilmente a lo largo de las etapas de análisis utilizando R y nos enfocaremos en los paquetes que forman parte del tidyverse. Paquetes y el Tidyverse La mejor manera de usar R para análisis de datos es aprovechando la gran cantidad de paquetes que aportan funcionalidad adicional. Desde Rstudio podemos instalar paquetes (Tools - &gt; Install packages o usar la función install.packages(&quot;nombre_paquete&quot;)). Las siguientes lineas instalan los paquetes devtools y readr. install.packages(&quot;devtools&quot;) install.packages(&quot;readr&quot;) Una vez instalados, podemos cargarlos a nuestra sesión de R mediante library. Por ejemplo, para cargar el paquete readr hacemos: print(read_csv) #&gt; function (file, col_names = TRUE, col_types = NULL, locale = default_locale(), #&gt; na = c(&quot;&quot;, &quot;NA&quot;), quoted_na = TRUE, quote = &quot;\\&quot;&quot;, comment = &quot;&quot;, #&gt; trim_ws = TRUE, skip = 0, n_max = Inf, guess_max = min(1000, #&gt; n_max), progress = show_progress(), skip_empty_rows = TRUE) #&gt; { #&gt; tokenizer &lt;- tokenizer_csv(na = na, quoted_na = quoted_na, #&gt; quote = quote, comment = comment, trim_ws = trim_ws, #&gt; skip_empty_rows = skip_empty_rows) #&gt; read_delimited(file, tokenizer, col_names = col_names, col_types = col_types, #&gt; locale = locale, skip = skip, skip_empty_rows = skip_empty_rows, #&gt; comment = comment, n_max = n_max, guess_max = guess_max, #&gt; progress = progress) #&gt; } #&gt; &lt;bytecode: 0xa776168&gt; #&gt; &lt;environment: namespace:readr&gt; library(readr) print(read_csv) #&gt; function (file, col_names = TRUE, col_types = NULL, locale = default_locale(), #&gt; na = c(&quot;&quot;, &quot;NA&quot;), quoted_na = TRUE, quote = &quot;\\&quot;&quot;, comment = &quot;&quot;, #&gt; trim_ws = TRUE, skip = 0, n_max = Inf, guess_max = min(1000, #&gt; n_max), progress = show_progress(), skip_empty_rows = TRUE) #&gt; { #&gt; tokenizer &lt;- tokenizer_csv(na = na, quoted_na = quoted_na, #&gt; quote = quote, comment = comment, trim_ws = trim_ws, #&gt; skip_empty_rows = skip_empty_rows) #&gt; read_delimited(file, tokenizer, col_names = col_names, col_types = col_types, #&gt; locale = locale, skip = skip, skip_empty_rows = skip_empty_rows, #&gt; comment = comment, n_max = n_max, guess_max = guess_max, #&gt; progress = progress) #&gt; } #&gt; &lt;bytecode: 0xa776168&gt; #&gt; &lt;environment: namespace:readr&gt; read_csv es una función que aporta el paquete readr, que a su vez está incluido en el tidyverse. El paquete de arriba se instaló de CRAN, pero podemos instalar paquetes que están en otros repositorios (por ejemplo BioConductor) o paquetes que están en GitHub. library(devtools) install_github(&quot;tereom/estcomp&quot;) Los paquetes se instalan una sola vez, sin embargo, se deben cargar (ejecutar library(readr)) en cada sesión de R que los ocupemos. En estas notas utilizaremos la colección de paquetes incluídos en el tidyverse. Estos paquetes de R están diseñados para ciencia de datos, y para funcionar juntos como parte de un flujo de trabajo. La siguiente imagen tomada de Why the tidyverse (Joseph Rickert) indica que paquetes del tidyverse se utilizan para cada etapa del análisis de datos. knitr::include_graphics(&quot;img/tidyverse.png&quot;) Recursos Existen muchos recursos gratuitos para aprender R, y resolver nuestras dudas: Buscar ayuda: Google, StackOverflow o RStudio Community. Para aprender más sobre un paquete o una función pueden visitar Rdocumentation.org. La referencia principal de estas notas es el libro R for Data Science de Hadley Wickham. RStudio tiene una Lista de recursos en línea. Para aprender programación avanzada en R, el libro gratuito Advanced R de Hadley Wickham es una buena referencia. En particular es conveniente leer la guía de estilo (para todos: principiantes, intermedios y avanzados). Para mantenerse al tanto de las noticias de la comunidad de R pueden seguir #rstats en Twitter. Para aprovechar la funcionalidad de RStudio. "],
["visualizacion-con-ggplot2.html", "2.2 Visualización con ggplot2", " 2.2 Visualización con ggplot2 Utilizaremos el paquete ggplot2, fue desarrollado por Hadley Wickham y es una implementación de la gramática de las gráficas (Wilkinson et al. 2005). Si no lo tienes instalado comienza instalando el paquete ggplot2 o el tidyverse que lo incluye. Gráficas de dispersión library(tidyverse) # Cargamos el paquete en nuestra sesión Usaremos el conjunto de datos election_sub_2012 que se incluye en el paquete estcomp, puedes encontrar información de esta base de datos tecleando ?election_sub_2012. library(estcomp) data(election_sub_2012) ?election_sub_2012 glimpse(election_sub_2012) #&gt; Observations: 1,500 #&gt; Variables: 23 #&gt; $ state_code &lt;chr&gt; &quot;19&quot;, &quot;30&quot;, &quot;09&quot;, &quot;07&quot;, &quot;09&quot;, &quot;27&quot;, &quot;20&quot;, &quot;15&quot;, … #&gt; $ state_name &lt;chr&gt; &quot;Nuevo León&quot;, &quot;Veracruz&quot;, &quot;Ciudad de México&quot;, &quot;C… #&gt; $ state_abbr &lt;chr&gt; &quot;NL&quot;, &quot;VER&quot;, &quot;CDMX&quot;, &quot;CHPS&quot;, &quot;CDMX&quot;, &quot;TAB&quot;, &quot;OAX… #&gt; $ district_loc_17 &lt;int&gt; 20, 30, 27, 5, 26, 21, 15, 43, 4, 19, 17, 9, 9, … #&gt; $ district_fed_17 &lt;int&gt; 7, 11, 22, 5, 15, 6, 3, 7, 4, 5, 6, 4, 1, 1, 3, … #&gt; $ polling_id &lt;int&gt; 90532, 134417, 32160, 15456, 31925, 122541, 9451… #&gt; $ section &lt;int&gt; 347, 1775, 2705, 1121, 4358, 502, 37, 826, 2207,… #&gt; $ region &lt;chr&gt; &quot;noreste&quot;, &quot;este&quot;, &quot;centrosur&quot;, &quot;suroeste&quot;, &quot;cen… #&gt; $ polling_type &lt;chr&gt; &quot;B-C&quot;, &quot;B-C&quot;, &quot;B-C&quot;, &quot;B-C&quot;, &quot;B-C&quot;, &quot;B-C&quot;, &quot;B-C&quot;,… #&gt; $ section_type &lt;chr&gt; &quot;U&quot;, &quot;U&quot;, &quot;U&quot;, &quot;U&quot;, &quot;U&quot;, &quot;U&quot;, &quot;M&quot;, NA, &quot;U&quot;, &quot;M&quot;,… #&gt; $ pri_pvem &lt;int&gt; 150, 146, 103, 135, 108, 102, 121, 157, 134, 187… #&gt; $ pan &lt;int&gt; 111, 52, 43, 33, 95, 27, 60, 94, 40, 128, 53, 56… #&gt; $ panal &lt;int&gt; 12, 4, 10, 10, 4, 4, 8, 16, 4, 10, 0, 12, 8, 1, … #&gt; $ prd_pt_mc &lt;int&gt; 78, 226, 240, 237, 181, 290, 141, 158, 90, 63, 6… #&gt; $ otros &lt;int&gt; 1, 4, 4, 7, 6, 14, 1, 8, 8, 11, 2, 14, 7, 12, 48… #&gt; $ total &lt;int&gt; 352, 432, 400, 422, 394, 437, 331, 433, 276, 399… #&gt; $ nominal_list &lt;int&gt; 675, 636, 688, 672, 522, 698, 596, 716, 506, 584… #&gt; $ pri_pvem_pct &lt;dbl&gt; 43, 34, 26, 32, 27, 23, 37, 36, 49, 47, 42, 42, … #&gt; $ pan_pct &lt;dbl&gt; 32, 12, 11, 8, 24, 6, 18, 22, 14, 32, 50, 12, 16… #&gt; $ panal_pct &lt;dbl&gt; 3, 1, 2, 2, 1, 1, 2, 4, 1, 3, 0, 3, 3, 0, 28, 0,… #&gt; $ prd_pt_mc_pct &lt;dbl&gt; 22, 52, 60, 56, 46, 66, 43, 36, 33, 16, 6, 40, 5… #&gt; $ otros_pct &lt;dbl&gt; 0, 1, 1, 2, 2, 3, 0, 2, 3, 3, 2, 3, 2, 3, 13, 8,… #&gt; $ winner &lt;chr&gt; &quot;pri_pvem&quot;, &quot;prd_pt_mc&quot;, &quot;prd_pt_mc&quot;, &quot;prd_pt_mc… Comencemos con nuestra primera gráfica: ggplot(data = election_sub_2012) + geom_point(mapping = aes(x = total, y = prd_pt_mc)) En ggplot2 se inicia una gráfica con la instrucción ggplot(), debemos especificar explicitamente que base de datos usamos, este es el primer argumento en la función ggplot(). Una vez que creamos la base añadimos capas, y dentro de aes() escribimos las variables que queremos graficar y el atributo de la gráfica al que queremos mapearlas. La función geom_point() añade una capa de puntos, hay muchas funciones geometrías incluídas en ggplot2: geom_line(), geom_boxplot(), geom_histogram,… Cada una acepta distintos argumentos para mapear las variables en los datos a características estéticas de la gráfica. En el ejemplo de arriba mapeamos displ al eje x, prd_pt_mc al eje y, pero geom_point() nos permite representar más variables usando la forma, color y/o tamaño del punto. Esta flexibilidad nos permite entender o descubrir patrones más interesantes en los datos. ggplot(election_sub_2012) + geom_point(aes(x = total, y = prd_pt_mc, color = polling_type)) Experimenta con los aesthetics color (color), tamaño (size) y forma (shape). ¿Qué diferencia hay entre las variables categóricas y las continuas? ¿Qué ocurre cuando combinas varios aesthetics? El mapeo de las propiedades estéticas se denomina escalamiento y depende del tipo de variable, las variables discretas (por ejemplo, tipo de casilla, región, estado) se mapean a distintas escalas que las variables continuas (variables numéricas como voto por un partido, lista nominal, etc.), los defaults de escalamiento para algunos atributos son (los escalamientos se pueden modificar): aes Discreta Continua Color (color) Arcoiris de colores Gradiente de colores Tamaño (size) Escala discreta de tamaños Mapeo lineal entre el área y el valor Forma (shape) Distintas formas No aplica Transparencia (alpha) No aplica Mapeo lineal a la transparencia Los geoms controlan el tipo de gráfica p &lt;- ggplot(election_sub_2012, aes(x = total, y = prd_pt_mc)) p + geom_line() ¿Qué problema tiene la siguiente gráfica? p &lt;- ggplot(election_sub_2012, aes(x = pan_pct, y = prd_pt_mc_pct)) p + geom_point(size = 0.8) p + geom_jitter(size = 0.8) ¿Cómo podemos mejorar la siguiente gráfica? ggplot(election_sub_2012, aes(x = state_abbr, y = prd_pt_mc_pct)) + geom_point(size = 0.8) Intentemos reodenar los niveles de la variable clase ggplot(election_sub_2012, aes(x = reorder(state_abbr, prd_pt_mc), y = prd_pt_mc)) + geom_point(size = 0.8) Podemos probar otros geoms. ggplot(election_sub_2012, aes(x = reorder(state_abbr, prd_pt_mc), y = prd_pt_mc)) + geom_jitter(size = 0.8) ggplot(election_sub_2012, aes(x = reorder(state_abbr, prd_pt_mc), y = prd_pt_mc)) + geom_boxplot() También podemos usar más de un geom! ggplot(election_sub_2012, aes(x = reorder(state_abbr, prd_pt_mc), y = prd_pt_mc)) + geom_jitter(size = 0.8) + geom_boxplot() Y mejorar presentación: ggplot(election_sub_2012, aes(x = reorder(state_abbr, prd_pt_mc), y = prd_pt_mc)) + geom_jitter(alpha = 0.6, size = 0.8) + geom_boxplot(outlier.color = NA) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + labs(title = &quot;Votos por casilla y estado&quot;, subtitle = &quot;PRD-PT-MC&quot;, x = &quot;estado&quot;, y = &quot;total de votos&quot;) Lee la ayuda de reorder y repite las gráficas anteriores ordenando por la mediana de prd_pt_mc. ¿Cómo harías para graficar los puntos encima de las cajas de boxplot? Paneles Ahora veremos como hacer páneles de gráficas, la idea es hacer varios múltiplos de una gráfica donde cada múltiplo representa un subconjunto de los datos, es una práctica muy útil para explorar relaciones condicionales. En ggplot podemos usar facet_wrap() para hacer paneles dividiendo los datos de acuerdo a las categorías de una sola variable ggplot(election_sub_2012, aes(x = reorder(state_abbr, pri_pvem_pct, median), y = pri_pvem_pct)) + geom_boxplot() + facet_wrap(~ section_type) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) Podemos eliminar los NA. Veremos la función filter() en la próxima sesión. ggplot(filter(election_sub_2012, !is.na(section_type)), aes(x = reorder(state_abbr, pri_pvem_pct, median), y = pri_pvem_pct)) + geom_boxplot() + facet_wrap(~ section_type) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) También podemos hacer una cuadrícula de \\(2\\) dimensiones usando facet\\_grid(filas~columnas) # Veremos como manipular datos en las próximas clases election_region_2012 &lt;- election_2012 %&gt;% group_by(region, section_type) %&gt;% summarise_at(vars(pri_pvem:total), sum) %&gt;% mutate_at(vars(pri_pvem:otros), .funs = ~ 100 * ./total) %&gt;% ungroup() %&gt;% mutate(region = reorder(region, pri_pvem)) %&gt;% gather(party, prop_votes, pri_pvem:otros) %&gt;% filter(!is.na(section_type)) ggplot(election_region_2012, aes(x = reorder(party, prop_votes), y = prop_votes, fill = reorder(party, -prop_votes))) + geom_col(show.legend = FALSE) + facet_grid(region ~ section_type) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) Los páneles pueden ser muy útiles para entender relaciones en nuestros datos. En la siguiente gráfica es difícil entender si existe una relación entre radiación solar y ozono. data(airquality) ggplot(airquality, aes(x = Solar.R, y = Ozone)) + geom_point() #&gt; Warning: Removed 42 rows containing missing values (geom_point). Veamos que ocurre si realizamos páneles separando por velocidad del viento. library(Hmisc) airquality$Wind.cat &lt;- cut2(airquality$Wind, g = 3) ggplot(airquality, aes(x = Solar.R, y = Ozone)) + geom_point() + facet_wrap(~ Wind.cat) Podemos agregar un suavizador (loess) para ver mejor la relación de las variables en cada panel. ggplot(airquality, aes(x = Solar.R, y = Ozone)) + geom_point() + facet_wrap(~ Wind.cat) + geom_smooth(method = &quot;lm&quot;) Como vimos en el caso de los resultados electorales por región, en ocasiones es necesario realizar transformaciones u obtener subconjuntos de los datos para poder responder preguntas de nuestro interés. library(dplyr) library(babynames) glimpse(babynames) #&gt; Observations: 1,924,665 #&gt; Variables: 5 #&gt; $ year &lt;dbl&gt; 1880, 1880, 1880, 1880, 1880, 1880, 1880, 1880, 1880, 1880,… #&gt; $ sex &lt;chr&gt; &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;,… #&gt; $ name &lt;chr&gt; &quot;Mary&quot;, &quot;Anna&quot;, &quot;Emma&quot;, &quot;Elizabeth&quot;, &quot;Minnie&quot;, &quot;Margaret&quot;, … #&gt; $ n &lt;int&gt; 7065, 2604, 2003, 1939, 1746, 1578, 1472, 1414, 1320, 1288,… #&gt; $ prop &lt;dbl&gt; 0.07238359, 0.02667896, 0.02052149, 0.01986579, 0.01788843,… Supongamos que queremos ver la tendencia del nombre “John”, para ello debemos generar un subconjunto de la base de datos. ¿Qué ocurre en la siguiente gráfica? babynames_John &lt;- filter(babynames, name == &quot;Teresa&quot;) ggplot(babynames_John, aes(x = year, y = prop)) + geom_line() ggplot(babynames_John, aes(x = year, y = prop, color = sex)) + geom_line() La preparación de los datos es un aspecto muy importante del análisis y suele ser la fase que lleva más tiempo. Es por ello que el siguiente tema se enfocará en herramientas para hacer transformaciones de manera eficiente. Recursos El libro R for Data Science (Wickham and Grolemund 2017) tiene un capítulo de visualización. Documentación con ejemplos en la página de ggplot2. Otro recurso muy útil es el acordeón de ggplot. La teoría detrás de ggplot2 se explica en el libro de ggplot2 (Wickham 2009), Google, stackoverflow y RStudio Community tienen un tag para preguntas relacionadas con ggplot2. Referencias "],
["manipulacion-y-agrupacion-de-datos.html", "Sección 3 Manipulación y agrupación de datos", " Sección 3 Manipulación y agrupación de datos En esta sección continuamos con la introducción a R para análisis de datos, en particular mostraremos herramientas de manipulación y transformación de datos. Trataremos los siguientes puntos: Transformación de datos. Estrategia separa-aplica-combina. Reestructura de datos y el principio de los datos limpios. Es sabido que limpieza y preparación de datos ocupan gran parte del tiempo del análisis de datos (Dasu y Johnson, 2003 y NYT’s ‘Janitor Work’ Is Key Hurdle to Insights), es por ello que vale la pena dedicar un tiempo a aprender técnicas que faciliten estas tareas, y entender que estructura en los datos es más conveniente para trabajar. "],
["transformacion-de-datos.html", "3.1 Transformación de datos", " 3.1 Transformación de datos Es sorprendente que una gran variedad de necesidades de transformación de datos se pueden resolver con pocas funciones, en esta sección veremos 5 verbos que fueron diseñados para la tarea de transformación de datos y que comparten una filosofía en cuanto a su estructura. Estudiaremos las siguientes funciones: filter: obten un subconjunto de las filas de acuerdo a un criterio. select: selecciona columnas de acuerdo al nombre arrange: reordena las filas mutate: agrega nuevas variables summarise: reduce variables a valores (crear nuevas bases de datos con resúmenes de variables de la base original) Estas funciones trabajan de manera similar, el primer argumento que reciben es un data.frame, los argumentos que siguen indican que operación se va a efectuar y el resultado es un nuevo data.frame. Adicionalmente, se pueden usar con group_by() que veremos más adelante y que cambia el dominio de cada función, pasando de operar en el conjunto de datos completos a operar en grupos. Datos Usaremos datos de población municipal incluidos en el paquete mxmaps y datos de educación, situación conyugal y hogar incluídos en el estcomp, para tener acceso a ellos cargamos los paquetes correspondientes. library(tidyverse, warn.conflicts = FALSE, quietly = TRUE) library(mxmaps) library(estcomp) Una alternatica a instalar mxmaps es leer únicamente los datos, se descargan del repositorio de GitHub y se cargan con la función load(). download.file(&quot;https://github.com/diegovalle/mxmaps/blob/master/data/df_mxmunicipio.RData?raw=true&quot;, &quot;df_mxmunicipio.RData&quot;) load(&quot;df_mxmunicipio.RData&quot;) Observemos la estructura de los datos: df_mxmunicipio &lt;- as_tibble(df_mxmunicipio) glimpse(df_mxmunicipio) #&gt; Observations: 2,457 #&gt; Variables: 18 #&gt; $ state_code &lt;chr&gt; &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;0… #&gt; $ municipio_code &lt;chr&gt; &quot;001&quot;, &quot;002&quot;, &quot;003&quot;, &quot;004&quot;, &quot;005&quot;, &quot;006&quot;, &quot;0… #&gt; $ region &lt;chr&gt; &quot;01001&quot;, &quot;01002&quot;, &quot;01003&quot;, &quot;01004&quot;, &quot;01005&quot;,… #&gt; $ state_name &lt;chr&gt; &quot;Aguascalientes&quot;, &quot;Aguascalientes&quot;, &quot;Aguasca… #&gt; $ state_name_official &lt;chr&gt; &quot;Aguascalientes&quot;, &quot;Aguascalientes&quot;, &quot;Aguasca… #&gt; $ state_abbr &lt;chr&gt; &quot;AGS&quot;, &quot;AGS&quot;, &quot;AGS&quot;, &quot;AGS&quot;, &quot;AGS&quot;, &quot;AGS&quot;, &quot;A… #&gt; $ state_abbr_official &lt;chr&gt; &quot;Ags.&quot;, &quot;Ags.&quot;, &quot;Ags.&quot;, &quot;Ags.&quot;, &quot;Ags.&quot;, &quot;Ags… #&gt; $ municipio_name &lt;chr&gt; &quot;Aguascalientes&quot;, &quot;Asientos&quot;, &quot;Calvillo&quot;, &quot;C… #&gt; $ pop &lt;int&gt; 877190, 46464, 56048, 15577, 120405, 46473, … #&gt; $ pop_male &lt;int&gt; 425731, 22745, 27298, 7552, 60135, 22490, 26… #&gt; $ pop_female &lt;int&gt; 451459, 23719, 28750, 8025, 60270, 23983, 27… #&gt; $ afromexican &lt;dbl&gt; 532, 3, 10, 0, 32, 3, 13, 13, 4, 0, 43, 1139… #&gt; $ part_afromexican &lt;dbl&gt; 2791, 130, 167, 67, 219, 74, 578, 37, 59, 60… #&gt; $ indigenous &lt;dbl&gt; 104125, 1691, 7358, 2213, 8679, 6232, 6714, … #&gt; $ part_indigenous &lt;dbl&gt; 14209, 92, 2223, 191, 649, 251, 247, 84, 76,… #&gt; $ metro_area &lt;chr&gt; &quot;Aguascalientes&quot;, NA, NA, NA, &quot;Aguascaliente… #&gt; $ long &lt;dbl&gt; -102.29605, -102.08928, -102.71875, -102.300… #&gt; $ lat &lt;dbl&gt; 21.87982, 22.23832, 21.84691, 22.36641, 21.9… glimpse(df_edu) #&gt; Observations: 7,371 #&gt; Variables: 16 #&gt; $ state_code &lt;chr&gt; &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;… #&gt; $ municipio_code &lt;chr&gt; &quot;001&quot;, &quot;001&quot;, &quot;001&quot;, &quot;002&quot;, &quot;002&quot;, &quot;002&quot;, &quot;003&quot;, … #&gt; $ region &lt;chr&gt; &quot;01001&quot;, &quot;01001&quot;, &quot;01001&quot;, &quot;01002&quot;, &quot;01002&quot;, &quot;010… #&gt; $ state_name &lt;chr&gt; &quot;Aguascalientes&quot;, &quot;Aguascalientes&quot;, &quot;Aguascalient… #&gt; $ state_abbr &lt;chr&gt; &quot;AGS&quot;, &quot;AGS&quot;, &quot;AGS&quot;, &quot;AGS&quot;, &quot;AGS&quot;, &quot;AGS&quot;, &quot;AGS&quot;, … #&gt; $ municipio_name &lt;chr&gt; &quot;Aguascalientes&quot;, &quot;Aguascalientes&quot;, &quot;Aguascalient… #&gt; $ sex &lt;chr&gt; &quot;Total&quot;, &quot;Hombres&quot;, &quot;Mujeres&quot;, &quot;Total&quot;, &quot;Hombres&quot;… #&gt; $ pop_15 &lt;dbl&gt; 631064, 301714, 329350, 31013, 14991, 16022, 3867… #&gt; $ no_school &lt;dbl&gt; 2.662329, 2.355211, 2.943677, 4.011221, 4.389300,… #&gt; $ preschool &lt;dbl&gt; 0.17335801, 0.17466873, 0.17215728, 0.25795634, 0… #&gt; $ elementary &lt;dbl&gt; 20.15247, 18.60073, 21.57401, 33.77938, 35.48129,… #&gt; $ secondary &lt;dbl&gt; 29.31145, 30.37976, 28.33278, 39.21259, 37.45581,… #&gt; $ highschool &lt;dbl&gt; 23.31824, 22.84912, 23.74799, 16.07068, 15.67607,… #&gt; $ higher_edu &lt;dbl&gt; 24.291989, 25.560299, 23.130105, 6.355399, 6.3571… #&gt; $ other &lt;dbl&gt; 0.09016518, 0.08020841, 0.09928647, 0.31277206, 0… #&gt; $ schoolyrs &lt;dbl&gt; 10.211152, 10.380144, 10.056383, 7.854005, 7.6920… Filtrar Creamos una tabla de datos de juguete para mostrar el funcionamiento de cada instrucción: df_ej &lt;- tibble(sexo = c(&quot;mujer&quot;, &quot;hombre&quot;, &quot;mujer&quot;, &quot;mujer&quot;, &quot;hombre&quot;), estatura = c(1.65, 1.80, 1.70, 1.60, 1.67)) df_ej #&gt; # A tibble: 5 x 2 #&gt; sexo estatura #&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 mujer 1.65 #&gt; 2 hombre 1.8 #&gt; 3 mujer 1.7 #&gt; 4 mujer 1.6 #&gt; 5 hombre 1.67 El primer argumento de filter() es el nombre del data frame, los subsecuentes son las expresiones que indican que filas filtrar. filter(df_ej, sexo == &quot;mujer&quot;) #&gt; # A tibble: 3 x 2 #&gt; sexo estatura #&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 mujer 1.65 #&gt; 2 mujer 1.7 #&gt; 3 mujer 1.6 filter(df_ej, estatura &gt; 1.65 &amp; estatura &lt; 1.75) #&gt; # A tibble: 2 x 2 #&gt; sexo estatura #&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 mujer 1.7 #&gt; 2 hombre 1.67 Algunos operadores importantes para filtrar son: x &gt; 1 x &gt;= 1 x &lt; 1 x &lt;= 1 x != 1 x == 1 x %in% c(&quot;a&quot;, &quot;b&quot;) Crea un subconjunto de los datos df_mxmunicipio que contenga únicamente los municipios de la CDMX (state_abbr es CDMX) Los municipios de Nuevo León con más de 200,000 habitantes. Los municipios donde más de la mitad la población se autoidentifica como afromexicana o parte afromexicana. Observación == y operadores booleanos Debemos tener cuidado al usar ==, ¿qué devuelven las siguientes expresiones? sqrt(2) ^ 2 == 2 1/49 * 49 == 1 Los resultados de arriba se deben a que las computadoras usan aritmética de precisión finita: print(1/49 * 49, digits = 22) #&gt; [1] 0.9999999999999998889777 Para estos casos es útil usar la función near() near(sqrt(2) ^ 2, 2) #&gt; [1] TRUE near(1 / 49 * 49, 1) #&gt; [1] TRUE Los operadores booleanos también son convenientes para filtrar: # Conjuntos a | b # a o b a &amp; b # a y b a &amp; !b # a y no-b xor(a, b) El siguiente esquema nos ayuda a entender que hace cada operación, x está representada por el círculo del lado izquierdo y y por el círculo del lado derecho, la parte sombreada muestra las regiones que selecciona el operador: Figure 3.1: Operaciones booleanas, imagen del libro r4ds. Observación: faltantes NA Un caso común es cuando se desea eliminar o localizar los registros con faltantes en una o más columnas de las tablas de datos, en R los datos faltantes se expresan como NA, para seleccionar los registros con faltante en la variable schoolyrs de los datos df_edu resulta natural escribir: filter(df_edu, schoolyrs == NA) #&gt; # A tibble: 0 x 16 #&gt; # … with 16 variables: state_code &lt;chr&gt;, municipio_code &lt;chr&gt;, #&gt; # region &lt;chr&gt;, state_name &lt;chr&gt;, state_abbr &lt;chr&gt;, #&gt; # municipio_name &lt;chr&gt;, sex &lt;chr&gt;, pop_15 &lt;dbl&gt;, no_school &lt;dbl&gt;, #&gt; # preschool &lt;dbl&gt;, elementary &lt;dbl&gt;, secondary &lt;dbl&gt;, highschool &lt;dbl&gt;, #&gt; # higher_edu &lt;dbl&gt;, other &lt;dbl&gt;, schoolyrs &lt;dbl&gt; Y para eliminarlos filter(df_edu, schoolyrs != NA) #&gt; # A tibble: 0 x 16 #&gt; # … with 16 variables: state_code &lt;chr&gt;, municipio_code &lt;chr&gt;, #&gt; # region &lt;chr&gt;, state_name &lt;chr&gt;, state_abbr &lt;chr&gt;, #&gt; # municipio_name &lt;chr&gt;, sex &lt;chr&gt;, pop_15 &lt;dbl&gt;, no_school &lt;dbl&gt;, #&gt; # preschool &lt;dbl&gt;, elementary &lt;dbl&gt;, secondary &lt;dbl&gt;, highschool &lt;dbl&gt;, #&gt; # higher_edu &lt;dbl&gt;, other &lt;dbl&gt;, schoolyrs &lt;dbl&gt; en ambos casos nos devuelve una tabla vacía! El problema resulta de usar los operadores == y !=, pensemos ¿qué regresan las siguientes expresiones? 5 + NA NA / 2 sum(c(5, 4, NA)) mean(c(5, 4, NA)) NA &lt; 3 NA == 3 NA == NA Las expresiones anteriores regresan NA, el hecho que la media de un vector que incluye NAs o su suma regrese NAs se debe a que por defecto en R se propagan los valores faltantes, esto es, si deconozco el valor de una de las componentes de un vector, también desconozco la suma del mismo; sin embargo, muchas funciones tienen un argumento na.rm para eliminarlos, sum(c(5, 4, NA), na.rm = TRUE) #&gt; [1] 9 mean(c(5, 4, NA), na.rm = TRUE) #&gt; [1] 4.5 Aún queda pendiente como filtrarlos en una tabla, para esto veamos que el manejo de datos faltantes en R utiliza una lógica ternaria (como SQL): NA == NA #&gt; [1] NA La expresión anterior puede resultar confusa, una manera de pensar en esto es considerar los NA como no sé, por ejemplo si no se la edad de Juan y no se la edad de Esteban, la respuesta a ¿Juan tiene la misma edad que Esteban? es no sé (NA). edad_Juan &lt;- NA edad_Esteban &lt;- NA edad_Juan == edad_Esteban #&gt; [1] NA edad_Jose &lt;- 32 # Juan es menor que José? edad_Juan &lt; edad_Jose #&gt; [1] NA Por tanto para determinar si un valor es faltante usamos la instrucción is.na(). is.na(NA) #&gt; [1] TRUE Y finalmente podemos filtrar, filter(df_edu, is.na(schoolyrs)) Seleccionar Elegir columnas de un conjunto de datos. df_ej #&gt; # A tibble: 5 x 2 #&gt; sexo estatura #&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 mujer 1.65 #&gt; 2 hombre 1.8 #&gt; 3 mujer 1.7 #&gt; 4 mujer 1.6 #&gt; 5 hombre 1.67 select(df_ej, sexo) #&gt; # A tibble: 5 x 1 #&gt; sexo #&gt; &lt;chr&gt; #&gt; 1 mujer #&gt; 2 hombre #&gt; 3 mujer #&gt; 4 mujer #&gt; 5 hombre select(df_ej, -sexo) #&gt; # A tibble: 5 x 1 #&gt; estatura #&gt; &lt;dbl&gt; #&gt; 1 1.65 #&gt; 2 1.8 #&gt; 3 1.7 #&gt; 4 1.6 #&gt; 5 1.67 select(df_ej, starts_with(&quot;s&quot;)) select(df_ej, contains(&quot;x&quot;)) Ve la ayuda de select (?select) y escribe tres maneras de seleccionar las variables del estado en los datos df_mxmunicipio. Ordenar Ordenar de acuerdo al valor de una o más variables: arrange(df_ej, sexo) #&gt; # A tibble: 5 x 2 #&gt; sexo estatura #&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 hombre 1.8 #&gt; 2 hombre 1.67 #&gt; 3 mujer 1.65 #&gt; 4 mujer 1.7 #&gt; 5 mujer 1.6 arrange(df_ej, desc(estatura)) #&gt; # A tibble: 5 x 2 #&gt; sexo estatura #&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 hombre 1.8 #&gt; 2 mujer 1.7 #&gt; 3 hombre 1.67 #&gt; 4 mujer 1.65 #&gt; 5 mujer 1.6 Ordena los municipios por población, de mayor a menor. ¿Cuáles son los municipios con mayor disparidad de sexo (a total)? ¿Cuáles son los municipios con mayor disparidad de sexo (proporcional)?, elimina los municipios con menos de 5000 habitantes y repite. Mutar Mutar consiste en crear nuevas variables aplicando una función a columnas existentes: mutate(df_ej, estatura_cm = estatura * 100) #&gt; # A tibble: 5 x 3 #&gt; sexo estatura estatura_cm #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 mujer 1.65 165 #&gt; 2 hombre 1.8 180 #&gt; 3 mujer 1.7 170 #&gt; 4 mujer 1.6 160 #&gt; 5 hombre 1.67 167 mutate(df_ej, estatura_cm = estatura * 100, estatura_in = estatura_cm * 0.3937) #&gt; # A tibble: 5 x 4 #&gt; sexo estatura estatura_cm estatura_in #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 mujer 1.65 165 65.0 #&gt; 2 hombre 1.8 180 70.9 #&gt; 3 mujer 1.7 170 66.9 #&gt; 4 mujer 1.6 160 63.0 #&gt; 5 hombre 1.67 167 65.7 Calcula el porcentaje de población indígena de cada municipio y almacenalo en una nueva variable. Crea una nueva variable que muestre el cociente entre la población femenina y masculina. Hay muchas funciones que podemos usar para crear nuevas variables con mutate(), éstas deben cumplir ser funciones vectorizadas, es decir, reciben un vector de valores y devuelven un vector de la misma dimensión, por ejemplo multiplicar columnas o por un escalar. ¿Cuáles de las siguientes funciones son adecuadas para mutate()? Notar que hay escenarios en los que nos puede interesar usar funciones no vectorizadas con mutate() pero vale la pena entender que es lo que regresan. * mean, pmin, max, *, ^, quantile df_ej_2 &lt;- add_column(df_ej, peso_actual = c(60, 80, 70, 50, 65), peso_anterior = c(66, 78, 73, 54, 61)) mutate(df_ej_2, peso_medio = mean(c(peso_actual, peso_anterior))) mutate(df_ej_2, peso_menor = pmin(peso_actual, peso_anterior)) mutate(df_ej_2, peso_mayor = max(peso_actual, peso_anterior)) mutate(df_ej_2, estatura_sq = estatura ^ 2, bmi = peso_actual / estatura_sq) Summarise y resúmenes por grupo Summarise sirve para crear nuevas bases de datos con resúmenes o agregaciones de los datos originales. summarise(df_ej, promedio = mean(estatura)) #&gt; # A tibble: 1 x 1 #&gt; promedio #&gt; &lt;dbl&gt; #&gt; 1 1.68 Calcula la población total, indígena y afromexicana a total. summarise(df_mxmunicipio, indigeonous = sum(indigenous), afromexican = sum(afromexican)) #&gt; # A tibble: 1 x 2 #&gt; indigeonous afromexican #&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 25694928 1381853 La mayor utlidad de summarise es cuando la combinamos con una variable de agrupación y esta combinación es la estrategia separa-aplica combina. Separa-aplica-combina (split-apply-combine) Muchos problemas de análisis de datos involucran la aplicación de la estrategia separa-aplica-combina (Wickham 2011), esta consiste en romper un problema en pedazos (de acuerdo a una variable de interés), operar sobre cada subconjunto de manera independiente (ej. calcular la media de cada grupo, ordenar observaciones por grupo, estandarizar por grupo) y después unir los pedazos nuevamente. El siguiente diagrama ejemplifiaca el paradigma de divide-aplica-combina: Separa la base de datos original. Aplica funciones a cada subconjunto. Combina los resultados en una nueva base de datos. Figure 3.2: Imagen de Software Carpentry con licencia CC-BY 4.0. Ahora, cuando pensamos como implementar la estrategia divide-aplica-combina es natural pensar en iteraciones, por ejemplo utilizar un ciclo for para recorrer cada grupo de interés y aplicar las funciones resumen, sin embargo la aplicación de ciclos for desemboca en código difícil de entender por lo que preferimos trabajar con funciones creadas para estas tareas, usaremos el paquete dplyr que además de ser más claro suele ser más veloz. Podemos hacer resúmenes por grupo, primero creamos una base de datos agrupada: by_sexo &lt;- group_by(df_ej, sexo) by_sexo #&gt; # A tibble: 5 x 2 #&gt; # Groups: sexo [2] #&gt; sexo estatura #&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 mujer 1.65 #&gt; 2 hombre 1.8 #&gt; 3 mujer 1.7 #&gt; 4 mujer 1.6 #&gt; 5 hombre 1.67 y después operamos sobre cada grupo, creando un resumen a nivel grupo y uniendo los subconjuntos en una base nueva: Calcula la población total por estado. Calcula la población indígena y afromexicana por estado. ¿Qué otros resúmenes puedes hacer para explorar los datos? Algunas funciones útiles con summarise son min(x), median(x), max(x), quantile(x, p), n(), sum(x), sum(x &gt; 1), mean(x &gt; 1), sd(x). Por ejemplo, para cada área metropolitana: cuántos municipios engloba (n()), la población total (sum()) y al estado al que pertenece (first()). by_metro_area &lt;- group_by(df_mxmunicipio, metro_area) no_miss &lt;- filter(by_metro_area, !is.na(metro_area)) pop_metro_area &lt;- summarise(no_miss, state = first(state_abbr), n_municipios = n(), pop_total = sum(pop)) head(pop_metro_area) #&gt; # A tibble: 6 x 4 #&gt; metro_area state n_municipios pop_total #&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; #&gt; 1 Acapulco GRO 2 886975 #&gt; 2 Acayucan VER 3 120340 #&gt; 3 Aguascalientes AGS 3 1044049 #&gt; 4 Cancún QROO 2 763121 #&gt; 5 Celaya GTO 3 635706 #&gt; 6 Chihuahua CHIH 3 918339 Operador pipeline En R, cuando uno hace varias operaciones es difícil leer y entender el código: library(estcomp) summarise(group_by(filter(election_2012, !is.na(section_type)), region, section_type), n = n(), pri_pvem = sum(pri_pvem), prd_pt_mc = sum(prd_pt_mc), pan = sum(pan)) #&gt; # A tibble: 24 x 6 #&gt; # Groups: region [8] #&gt; region section_type n pri_pvem prd_pt_mc pan #&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; #&gt; 1 centronorte M 2071 331221 143225 228112 #&gt; 2 centronorte R 5049 651507 211524 447886 #&gt; 3 centronorte U 8940 1229241 653540 1171415 #&gt; 4 centrosur M 1839 324327 277470 126264 #&gt; 5 centrosur R 2541 495288 223978 181755 #&gt; 6 centrosur U 27515 3698793 4765575 1936586 #&gt; 7 este M 3158 462510 370352 306124 #&gt; 8 este R 6768 905078 521793 654839 #&gt; 9 este U 11403 1373876 1602217 1179497 #&gt; 10 noreste M 1259 176191 77062 169285 #&gt; # … with 14 more rows La dificultad radica en que usualmente los parámetros se asignan después del nombre de la función usando (). Una alternativa es ir almacenando las salidas en tablas de datos intermedias pero esto resulta poco práctico porque: 1) almacenamos en el mismo objeto sobreescribiendo ó 2) terminamos con muchos objetos con nombres poco significativos. El operador Forward Pipe (%&gt;%) cambia el orden en que se asignan los parámetros, de manera que un parámetro que precede a la función es enviado (“piped”) a la función: x %&gt;% f(y) se vuelve f(x, y), x %&gt;% f(y) %&gt;% g(z) se vuelve g(f(x, y), z). Es así que podemos reescribir el código para poder leer las operaciones que vamos aplicando de izquierda a derecha y de arriba hacia abajo. Veamos como cambia el código del ejemplo: election_2012 %&gt;% filter(!is.na(section_type)) %&gt;% group_by(region, section_type) %&gt;% summarise( n = n(), pri_pvem = sum(pri_pvem), prd_pt_mc = sum(prd_pt_mc), pan = sum(pan) ) #&gt; # A tibble: 24 x 6 #&gt; # Groups: region [8] #&gt; region section_type n pri_pvem prd_pt_mc pan #&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; #&gt; 1 centronorte M 2071 331221 143225 228112 #&gt; 2 centronorte R 5049 651507 211524 447886 #&gt; 3 centronorte U 8940 1229241 653540 1171415 #&gt; 4 centrosur M 1839 324327 277470 126264 #&gt; 5 centrosur R 2541 495288 223978 181755 #&gt; 6 centrosur U 27515 3698793 4765575 1936586 #&gt; 7 este M 3158 462510 370352 306124 #&gt; 8 este R 6768 905078 521793 654839 #&gt; 9 este U 11403 1373876 1602217 1179497 #&gt; 10 noreste M 1259 176191 77062 169285 #&gt; # … with 14 more rows podemos leer %&gt;% como “después”. Tip: Un atajo para producir el operador pipeline %&gt;% es shift + ctrl/cmd + M Siguiendo con los datos election_2012, ¿Qué estados tienen la mayor participación (esto es del total de votantes en la lista nominal que porcentaje asistió a votar)? Tip: debes eliminar las casillas especiales pues la lista nominal (ln) no está definida. Variables por grupo En ocasiones es conveniente crear variables por grupo, por ejemplo estandarizar dentro de cada grupo z = (x - mean(x)) / sd(x). Para esto usamos group_by() y mutate(). Veamos un ejemplo: z_prd_pt_mc_state &lt;- election_2012 %&gt;% filter(total &gt; 50, !is.na(section_type)) %&gt;% mutate(prd_pt_mc_pct = prd_pt_mc / total) %&gt;% group_by(state_abbr) %&gt;% mutate( n = n(), sd_prd_pt_mc = sd(prd_pt_mc_pct), mean_prd_pt_mc = mean(prd_pt_mc_pct), z_prd_pt_mc = (prd_pt_mc_pct - mean_prd_pt_mc) / sd_prd_pt_mc ) Verbos de dos tablas Muchas veces debemos reunir información que está almacenada a lo largo de muchas tablas, por ejemplo, si nos interesa conocer como se relaciona el año de escolaridad promedio (schoolyrs en el df_edu) con el porcentaje de población indígena (indigenous en df_mxmunicipios), debemos poder pegar las dos tablas. Hay varias maneras de unir dos bases de datos y debemos pensar en el obejtivo: x &lt;- tibble(name = c(&quot;John&quot;, &quot;Paul&quot;, &quot;George&quot;, &quot;Ringo&quot;, &quot;Stuart&quot;, &quot;Pete&quot;), instrument = c(&quot;guitar&quot;, &quot;bass&quot;, &quot;guitar&quot;, &quot;drums&quot;, &quot;bass&quot;, &quot;drums&quot;)) y &lt;- tibble(name = c(&quot;John&quot;, &quot;Paul&quot;, &quot;George&quot;, &quot;Ringo&quot;, &quot;Brian&quot;), band = c(&quot;TRUE&quot;, &quot;TRUE&quot;, &quot;TRUE&quot;, &quot;TRUE&quot;, &quot;FALSE&quot;)) x #&gt; # A tibble: 6 x 2 #&gt; name instrument #&gt; &lt;chr&gt; &lt;chr&gt; #&gt; 1 John guitar #&gt; 2 Paul bass #&gt; 3 George guitar #&gt; 4 Ringo drums #&gt; 5 Stuart bass #&gt; 6 Pete drums y #&gt; # A tibble: 5 x 2 #&gt; name band #&gt; &lt;chr&gt; &lt;chr&gt; #&gt; 1 John TRUE #&gt; 2 Paul TRUE #&gt; 3 George TRUE #&gt; 4 Ringo TRUE #&gt; 5 Brian FALSE inner_join(x, y) #&gt; Joining, by = &quot;name&quot; #&gt; # A tibble: 4 x 3 #&gt; name instrument band #&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; #&gt; 1 John guitar TRUE #&gt; 2 Paul bass TRUE #&gt; 3 George guitar TRUE #&gt; 4 Ringo drums TRUE left_join(x, y) #&gt; Joining, by = &quot;name&quot; #&gt; # A tibble: 6 x 3 #&gt; name instrument band #&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; #&gt; 1 John guitar TRUE #&gt; 2 Paul bass TRUE #&gt; 3 George guitar TRUE #&gt; 4 Ringo drums TRUE #&gt; 5 Stuart bass &lt;NA&gt; #&gt; 6 Pete drums &lt;NA&gt; semi_join(x, y) #&gt; Joining, by = &quot;name&quot; #&gt; # A tibble: 4 x 2 #&gt; name instrument #&gt; &lt;chr&gt; &lt;chr&gt; #&gt; 1 John guitar #&gt; 2 Paul bass #&gt; 3 George guitar #&gt; 4 Ringo drums anti_join(x, y) #&gt; Joining, by = &quot;name&quot; #&gt; # A tibble: 2 x 2 #&gt; name instrument #&gt; &lt;chr&gt; &lt;chr&gt; #&gt; 1 Stuart bass #&gt; 2 Pete drums Resumamos lo que observamos arriba: Tipo Acción inner Incluye únicamente las filas que aparecen tanto en x como en y left Incluye todas las filas en x y las filas de y que coincidan semi Incluye las filas de x que coincidan con y anti Incluye las filas de x que no coinciden con y Ahora tu turno, ¿cómo se relacionan los años de escolaridad con el porcentaje de población indígena. Utiliza los datos df_mxmunicipio y df_edu para explorar la relación. ¿cuál es el join adecuado? ¿de qué tamaño serán los datos finales? glimpse(df_edu) #&gt; Observations: 7,371 #&gt; Variables: 16 #&gt; $ state_code &lt;chr&gt; &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;… #&gt; $ municipio_code &lt;chr&gt; &quot;001&quot;, &quot;001&quot;, &quot;001&quot;, &quot;002&quot;, &quot;002&quot;, &quot;002&quot;, &quot;003&quot;, … #&gt; $ region &lt;chr&gt; &quot;01001&quot;, &quot;01001&quot;, &quot;01001&quot;, &quot;01002&quot;, &quot;01002&quot;, &quot;010… #&gt; $ state_name &lt;chr&gt; &quot;Aguascalientes&quot;, &quot;Aguascalientes&quot;, &quot;Aguascalient… #&gt; $ state_abbr &lt;chr&gt; &quot;AGS&quot;, &quot;AGS&quot;, &quot;AGS&quot;, &quot;AGS&quot;, &quot;AGS&quot;, &quot;AGS&quot;, &quot;AGS&quot;, … #&gt; $ municipio_name &lt;chr&gt; &quot;Aguascalientes&quot;, &quot;Aguascalientes&quot;, &quot;Aguascalient… #&gt; $ sex &lt;chr&gt; &quot;Total&quot;, &quot;Hombres&quot;, &quot;Mujeres&quot;, &quot;Total&quot;, &quot;Hombres&quot;… #&gt; $ pop_15 &lt;dbl&gt; 631064, 301714, 329350, 31013, 14991, 16022, 3867… #&gt; $ no_school &lt;dbl&gt; 2.662329, 2.355211, 2.943677, 4.011221, 4.389300,… #&gt; $ preschool &lt;dbl&gt; 0.17335801, 0.17466873, 0.17215728, 0.25795634, 0… #&gt; $ elementary &lt;dbl&gt; 20.15247, 18.60073, 21.57401, 33.77938, 35.48129,… #&gt; $ secondary &lt;dbl&gt; 29.31145, 30.37976, 28.33278, 39.21259, 37.45581,… #&gt; $ highschool &lt;dbl&gt; 23.31824, 22.84912, 23.74799, 16.07068, 15.67607,… #&gt; $ higher_edu &lt;dbl&gt; 24.291989, 25.560299, 23.130105, 6.355399, 6.3571… #&gt; $ other &lt;dbl&gt; 0.09016518, 0.08020841, 0.09928647, 0.31277206, 0… #&gt; $ schoolyrs &lt;dbl&gt; 10.211152, 10.380144, 10.056383, 7.854005, 7.6920… glimpse(df_mxmunicipio) #&gt; Observations: 2,457 #&gt; Variables: 18 #&gt; $ state_code &lt;chr&gt; &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;0… #&gt; $ municipio_code &lt;chr&gt; &quot;001&quot;, &quot;002&quot;, &quot;003&quot;, &quot;004&quot;, &quot;005&quot;, &quot;006&quot;, &quot;0… #&gt; $ region &lt;chr&gt; &quot;01001&quot;, &quot;01002&quot;, &quot;01003&quot;, &quot;01004&quot;, &quot;01005&quot;,… #&gt; $ state_name &lt;chr&gt; &quot;Aguascalientes&quot;, &quot;Aguascalientes&quot;, &quot;Aguasca… #&gt; $ state_name_official &lt;chr&gt; &quot;Aguascalientes&quot;, &quot;Aguascalientes&quot;, &quot;Aguasca… #&gt; $ state_abbr &lt;chr&gt; &quot;AGS&quot;, &quot;AGS&quot;, &quot;AGS&quot;, &quot;AGS&quot;, &quot;AGS&quot;, &quot;AGS&quot;, &quot;A… #&gt; $ state_abbr_official &lt;chr&gt; &quot;Ags.&quot;, &quot;Ags.&quot;, &quot;Ags.&quot;, &quot;Ags.&quot;, &quot;Ags.&quot;, &quot;Ags… #&gt; $ municipio_name &lt;chr&gt; &quot;Aguascalientes&quot;, &quot;Asientos&quot;, &quot;Calvillo&quot;, &quot;C… #&gt; $ pop &lt;int&gt; 877190, 46464, 56048, 15577, 120405, 46473, … #&gt; $ pop_male &lt;int&gt; 425731, 22745, 27298, 7552, 60135, 22490, 26… #&gt; $ pop_female &lt;int&gt; 451459, 23719, 28750, 8025, 60270, 23983, 27… #&gt; $ afromexican &lt;dbl&gt; 532, 3, 10, 0, 32, 3, 13, 13, 4, 0, 43, 1139… #&gt; $ part_afromexican &lt;dbl&gt; 2791, 130, 167, 67, 219, 74, 578, 37, 59, 60… #&gt; $ indigenous &lt;dbl&gt; 104125, 1691, 7358, 2213, 8679, 6232, 6714, … #&gt; $ part_indigenous &lt;dbl&gt; 14209, 92, 2223, 191, 649, 251, 247, 84, 76,… #&gt; $ metro_area &lt;chr&gt; &quot;Aguascalientes&quot;, NA, NA, NA, &quot;Aguascaliente… #&gt; $ long &lt;dbl&gt; -102.29605, -102.08928, -102.71875, -102.300… #&gt; $ lat &lt;dbl&gt; 21.87982, 22.23832, 21.84691, 22.36641, 21.9… Si queremos un mapa del ganador de las elecciones por estado debemos unir los datos de elecciones con datos geográficos, estos estan incluídos en mxmaps, son mxstate.map. election_2012_state &lt;- election_2012 %&gt;% group_by(state_code) %&gt;% summarise( pri_pvem = 100 * sum(pri_pvem) / sum(total), pan = 100 * sum(pan) / sum(total), prd_pt_mc = 100 * sum(prd_pt_mc) / sum(total) ) %&gt;% mutate(winner = case_when( pri_pvem &gt; pan &amp; pri_pvem &gt; prd_pt_mc ~ &quot;pri_pvem&quot;, pan &gt; pri_pvem &amp; pan &gt; prd_pt_mc ~ &quot;pan&quot;, TRUE ~ &quot;prd_pt_mc&quot;), winner_pct = pmax(pri_pvem, pan, prd_pt_mc)) election_map &lt;- mxstate.map %&gt;% left_join(election_2012_state, by = c(&quot;region&quot; = &quot;state_code&quot;)) ggplot(election_map, aes(long, lat, group = group)) + geom_polygon(aes(fill = winner)) + coord_map() Podemos especificar el color de cada categoría y la intensidad puede variar de acuerdo al porcentaje de votos que se llevó el partido/alianza ganador. library(gridExtra) #&gt; #&gt; Attaching package: &#39;gridExtra&#39; #&gt; The following object is masked from &#39;package:dplyr&#39;: #&gt; #&gt; combine map_edo &lt;- ggplot(election_map, aes(long, lat, group = group)) + geom_polygon(aes(fill = winner, alpha = winner_pct), color = &quot;#666666&quot;, size = .05, show.legend = FALSE) + coord_map() + scale_fill_manual(values = c(&quot;prd_pt_mc&quot; = &quot;#FFCC00&quot;, &quot;pan&quot; = &quot;#3399FF&quot;, &quot;pri_pvem&quot; = &quot;#00CD66&quot;)) + theme_void() election_hexbinmap &lt;- mxhexbin.map %&gt;% left_join(election_2012_state, by = c(&quot;region&quot; = &quot;state_code&quot;)) state_labels_map &lt;- mxhexbin.map %&gt;% group_by(state_abbr) %&gt;% summarise(long = mean(long), lat = mean(lat), group = first(group)) hexbinmap_edo &lt;- ggplot(election_hexbinmap, aes(long, lat, group = group)) + geom_polygon(aes(fill = winner, alpha = winner_pct), color = &quot;#666666&quot;, size = .05, show.legend = FALSE) + coord_map() + scale_fill_manual(values = c(&quot;prd_pt_mc&quot; = &quot;#FFCC00&quot;, &quot;pan&quot; = &quot;#3399FF&quot;, &quot;pri_pvem&quot; = &quot;#00CD66&quot;)) + geom_text(data = state_labels_map, aes(long, lat, label = state_abbr)) + theme_void() grid.arrange(map_edo, hexbinmap_edo, nrow = 1) Genera un mapa a nivel municipo que muestre el porcentaje de la población casada a total (mayores de 12 años). Referencias "],
["datos-limpios.html", "3.2 Datos limpios", " 3.2 Datos limpios Una vez que importamos datos a R es conveniente limpiarlos, esto implica almacenarlos de una manera consisistente que nos permita enfocarnos en responder preguntas de los datos en lugar de estar luchando con los datos. Datos limpios son datos que facilitan las tareas del análisis de datos: Visualización: Resúmenes de datos usando gráficas, análisis exploratorio, o presentación de resultados. Manipulación: Manipulación de variables como agregar, filtrar, reordenar, transformar. Modelación: Ajustar modelos es sencillo si los datos están en la forma correcta. Los **principios de los datos limpios** [@tidy] proveen una manera estándar de organizar la información: 1. Cada columna es una variable. 2. Cada renglón es una observación . 3. Cada celda es un único valor. Vale la pena notar que los principios de los datos limpios se pueden ver como teoría de algebra relacional para estadísticos, estós principios junto con cada tipo de unidad observacional forma una tabla equivalen a la tercera forma normal de Codd con enfoque en una sola tabla de datos en lugar de muchas conectadas en bases de datos relacionales. Veamos un ejemplo: La mayor parte de las bases de datos en estadística tienen forma rectangular, ¿cuántas variables tiene la siguiente tabla? tratamientoA tratamientoB Juan Aguirre - 2 Ana Bernal 16 11 José López 3 1 La tabla anterior también se puede estructurar de la siguiente manera: Juan Aguirre Ana Bernal José López tratamientoA - 16 3 tratamientoB 2 11 1 Si vemos los principios (cada variable forma una columna, cada observación forma un renglón, cada tipo de unidad observacional forma una tabla), ¿las tablas anteriores cumplen los principios? Para responder la pregunta identifiquemos primero cuáles son las variables y cuáles las observaciones de esta pequeña base. Las variables son: persona/nombre, tratamiento y resultado. Entonces, siguiendo los principios de datos limpios obtenemos la siguiente estructura: nombre tratamiento resultado Juan Aguirre a - Ana Bernal a 16 José López a 3 Juan Aguirre b 2 Ana Bernal b 11 José López b 1 Limpieza bases de datos Los principios de los datos limpios parecen obvios pero la mayor parte de los datos no los cumplen debido a: La mayor parte de la gente no está familiarizada con los principios y es difícil derivarlos por uno mismo. Los datos suelen estar organizados para facilitar otros aspectos que no son análisis, por ejemplo, la captura. Algunos de los problemas más comunes en las bases de datos que no están limpias son: Los encabezados de las columnas son valores y no nombres de variables. Más de una variable por columna. Las variables están organizadas tanto en filas como en columnas. Más de un tipo de observación en una tabla. Una misma unidad observacional está almacenada en múltiples tablas. La mayor parte de estos problemas se pueden arreglar con pocas herramientas, a continuación veremos como limpiar datos usando 2 funciones del paquete tidyr: pivot_longer(): recibe múltiples columnas y las convierte en pares de valores y nombres de tal manera que alarga los datos. pivot_wider(): el opuesto a pivot_longer() recibe columnas que separa haciendo los datos más anchos. Repasaremos los problemas más comunes que se encuentran en conjuntos de datos sucios y mostraremos como se puede manipular la tabla de datos (usando las funciones de pivoteo) con el fin de estructurarla para que cumpla los principios de datos limpios. Nota: Usaremos la versión de GitHub de tidyr pues las funciones de pivoteo aún no se encuentran en la versión de CRAN, la versión que actualmente está en CRAN cuenta con las funciones gather() y spread() que tienen funcionalidad menor limitada y son menos intutivas. Para instalar la versión de GitHub corre: devtools::install_github(&quot;tidyverse/tidyr&quot;) Aquí puedes encontrar una versión de las notas usando gather() y spread(). Los encabezados de las columanas son valores Usaremos ejemplos para entender los conceptos más facilmente. Comenzaremos con una tabla de datos que contiene las mediciones de partículas suspendidas PM2.5 de la red automática de monitoreo atmosférico (RAMA) para los primeros meses del 2019. library(tidyverse) library(estcomp) pm25_2019 #&gt; # A tibble: 5,088 x 26 #&gt; date hour AJM AJU BJU CAM CCA COY FAR GAM HGM #&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;lgl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 2019-01-01 1 19 35 62 90 66 NA NA NA 56 #&gt; 2 2019-01-01 2 17 24 88 104 84 NA NA NA 61 #&gt; 3 2019-01-01 3 14 20 107 140 95 NA NA NA 74 #&gt; 4 2019-01-01 4 6 15 101 162 97 NA NA NA 90 #&gt; 5 2019-01-01 5 4 8 121 133 88 NA NA NA 90 #&gt; 6 2019-01-01 6 7 7 93 106 77 NA NA NA 106 #&gt; 7 2019-01-01 7 12 8 84 98 51 NA NA NA 115 #&gt; 8 2019-01-01 8 15 7 101 82 39 NA NA NA 90 #&gt; 9 2019-01-01 9 24 3 89 54 26 NA NA NA 90 #&gt; 10 2019-01-01 10 24 NA 88 76 26 NA NA NA 99 #&gt; # … with 5,078 more rows, and 15 more variables: INN &lt;dbl&gt;, MER &lt;dbl&gt;, #&gt; # MGH &lt;dbl&gt;, MON &lt;dbl&gt;, MPA &lt;lgl&gt;, NEZ &lt;dbl&gt;, PED &lt;dbl&gt;, SAC &lt;lgl&gt;, #&gt; # SAG &lt;dbl&gt;, SFE &lt;dbl&gt;, SJA &lt;lgl&gt;, TLA &lt;dbl&gt;, UAX &lt;dbl&gt;, UIZ &lt;dbl&gt;, #&gt; # XAL &lt;dbl&gt; ¿Cuáles son las variables en estos datos? Esta base de datos tiene 4 variables: fecha, hora, estación y medición (en microgramos por metro cúbico \\(\\mu g/m^3\\)). Al alargar los datos desaparecerán las columnas que se agrupan y darán lugar a dos nuevas columnas: la correspondiente a estación y la correspondiente a medición. Entonces, usamos la función pivot_longer() que recibe los argumentos: data: data.frame que vamos a pivotear, alargar. cols: columnas que vamos a pivotear (apilar), la notación para seleccionarlas es tidyselect, la misma que usamos con select() en dplyr. names_to: nombre (string: en comillas “”) de la nueva columna que almacenará los nombres de las columnas en los datos. values_to: nombre (string: en comillas “”) de la nueva columna que almacenará los valores en los datos. pm25_2019_tidy &lt;- pivot_longer(pm25_2019, cols = AJM:XAL, names_to = &quot;station&quot;, values_to = &quot;measurement&quot;) pm25_2019_tidy #&gt; # A tibble: 122,112 x 4 #&gt; date hour station measurement #&gt; &lt;date&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 2019-01-01 1 AJM 19 #&gt; 2 2019-01-01 1 AJU 35 #&gt; 3 2019-01-01 1 BJU 62 #&gt; 4 2019-01-01 1 CAM 90 #&gt; 5 2019-01-01 1 CCA 66 #&gt; 6 2019-01-01 1 COY NA #&gt; 7 2019-01-01 1 FAR NA #&gt; 8 2019-01-01 1 GAM NA #&gt; 9 2019-01-01 1 HGM 56 #&gt; 10 2019-01-01 1 INN 22 #&gt; # … with 122,102 more rows Observemos que en la tabla original teníamos bajo la columna AJM, en el renglón correspondiente a 2019-01-01 hora 1 un valor de 19, y podemos ver que este valor en la tabla larga se almacena bajo la columna measurement y corresponde a la estación AJM. La nueva estructura de la base de datos nos permite, por ejemplo, hacer fácilmente una gráfica donde podemos comparar las diferencias en las frecuencias. pm25_2019_tidy %&gt;% mutate( missing = is.na(measurement), station = reorder(station, missing, sum) ) %&gt;% ggplot(aes(x = date, y = hour, fill = is.na(measurement))) + geom_raster(alpha = 0.8) + facet_wrap(~ station) + scale_fill_manual(&quot;faltante&quot;, values = c(&quot;TRUE&quot; = &quot;salmon&quot;, &quot;FALSE&quot; = &quot;gray&quot;)) Otro ejemplo, veamos los datos df_edu, ¿cuántas variables tenemos? df_edu #&gt; # A tibble: 7,371 x 16 #&gt; state_code municipio_code region state_name state_abbr municipio_name #&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; #&gt; 1 01 001 01001 Aguascali… AGS Aguascalientes #&gt; 2 01 001 01001 Aguascali… AGS Aguascalientes #&gt; 3 01 001 01001 Aguascali… AGS Aguascalientes #&gt; 4 01 002 01002 Aguascali… AGS Asientos #&gt; 5 01 002 01002 Aguascali… AGS Asientos #&gt; 6 01 002 01002 Aguascali… AGS Asientos #&gt; 7 01 003 01003 Aguascali… AGS Calvillo #&gt; 8 01 003 01003 Aguascali… AGS Calvillo #&gt; 9 01 003 01003 Aguascali… AGS Calvillo #&gt; 10 01 004 01004 Aguascali… AGS Cosío #&gt; # … with 7,361 more rows, and 10 more variables: sex &lt;chr&gt;, pop_15 &lt;dbl&gt;, #&gt; # no_school &lt;dbl&gt;, preschool &lt;dbl&gt;, elementary &lt;dbl&gt;, secondary &lt;dbl&gt;, #&gt; # highschool &lt;dbl&gt;, higher_edu &lt;dbl&gt;, other &lt;dbl&gt;, schoolyrs &lt;dbl&gt; Notemos que el nivel de escolaridad esta guardado en 6 columnas (preschool, elementary, …, other), este tipo de almacenamiento no es limpio aunque puede ser útil al momento de ingresar la información o para presentarla. Para tener datos limpios apilamos los niveles de escolaridad de manera que sea una sola columna (nuevamente alargamos los datos): df_edu_tidy &lt;- pivot_longer(data = df_edu, cols = preschool:other, names_to = &quot;grade&quot;, values_to = &quot;percent&quot;, values_drop_na = TRUE) glimpse(df_edu_tidy) #&gt; Observations: 44,226 #&gt; Variables: 12 #&gt; $ state_code &lt;chr&gt; &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;… #&gt; $ municipio_code &lt;chr&gt; &quot;001&quot;, &quot;001&quot;, &quot;001&quot;, &quot;001&quot;, &quot;001&quot;, &quot;001&quot;, &quot;001&quot;, … #&gt; $ region &lt;chr&gt; &quot;01001&quot;, &quot;01001&quot;, &quot;01001&quot;, &quot;01001&quot;, &quot;01001&quot;, &quot;010… #&gt; $ state_name &lt;chr&gt; &quot;Aguascalientes&quot;, &quot;Aguascalientes&quot;, &quot;Aguascalient… #&gt; $ state_abbr &lt;chr&gt; &quot;AGS&quot;, &quot;AGS&quot;, &quot;AGS&quot;, &quot;AGS&quot;, &quot;AGS&quot;, &quot;AGS&quot;, &quot;AGS&quot;, … #&gt; $ municipio_name &lt;chr&gt; &quot;Aguascalientes&quot;, &quot;Aguascalientes&quot;, &quot;Aguascalient… #&gt; $ sex &lt;chr&gt; &quot;Total&quot;, &quot;Total&quot;, &quot;Total&quot;, &quot;Total&quot;, &quot;Total&quot;, &quot;Tot… #&gt; $ pop_15 &lt;dbl&gt; 631064, 631064, 631064, 631064, 631064, 631064, 3… #&gt; $ no_school &lt;dbl&gt; 2.662329, 2.662329, 2.662329, 2.662329, 2.662329,… #&gt; $ schoolyrs &lt;dbl&gt; 10.211152, 10.211152, 10.211152, 10.211152, 10.21… #&gt; $ grade &lt;chr&gt; &quot;preschool&quot;, &quot;elementary&quot;, &quot;secondary&quot;, &quot;highscho… #&gt; $ percent &lt;dbl&gt; 0.17335801, 20.15247265, 29.31144860, 23.31823714… El parámetro values_drop_na = TRUE se utiliza para eliminar los renglones con valores faltantes en la columna de porcentaje, esto es, eliminamos aquellas observaciones que tenían NA en la columnas de nivel de escolaridad de la tabla ancha. En este caso optamos por que los faltantes sean implícitos, la conveniencia de tenerlos implícitos/explícitos dependerá de la aplicación. Con los datos limpios es facil hacer manipulaciones y grfiacs, ¿cómo habrían hecho la siguiente gráfica antes de la limpieza? df_edu_cdmx &lt;- df_edu_tidy %&gt;% filter(state_abbr == &quot;CDMX&quot;, sex != &quot;Total&quot;, grade != &quot;other&quot;) %&gt;% mutate(municipio_name = reorder(municipio_name, percent, last)) ggplot(df_edu_cdmx, aes(x = grade, y = percent, group = sex, color = sex)) + geom_path() + facet_wrap(~municipio_name) + theme(axis.text.x = element_text(angle = 60, hjust = 1)) + scale_x_discrete(limits = c(&quot;preschool&quot;, &quot;elementary&quot;, &quot;secondary&quot;, &quot;highschool&quot;, &quot;higher_edu&quot;)) Una columna asociada a más de una variable Utilizaremos un subconjunto de los datos de la prueba ENLACE a nivel primaria, la prueba ENLACE evaluaba a todos los alumnos de tercero a sexto de primaria y a los alumnos de secundaria del país en 3 áreas: español, matemáticas y formación cívica y ética. data(&quot;enlacep_2013&quot;) enlacep_sub_2013 &lt;- enlacep_2013 %&gt;% select(CVE_ENT:PUNT_FCE_6) %&gt;% sample_n(1000) glimpse(enlacep_sub_2013) #&gt; Observations: 1,000 #&gt; Variables: 22 #&gt; $ CVE_ENT &lt;chr&gt; &quot;21&quot;, &quot;07&quot;, &quot;16&quot;, &quot;15&quot;, &quot;26&quot;, &quot;14&quot;, &quot;13&quot;, &quot;12&quot;, &quot;12&quot;,… #&gt; $ NOM_ENT &lt;chr&gt; &quot;PUEBLA&quot;, &quot;CHIAPAS&quot;, &quot;MICHOACAN&quot;, &quot;MEXICO&quot;, &quot;SONORA&quot;,… #&gt; $ CCT &lt;chr&gt; &quot;21DPB0859Z&quot;, &quot;07DPR0943F&quot;, &quot;16KPR1277A&quot;, &quot;15DPR0795W… #&gt; $ TURNO &lt;chr&gt; &quot;MATUTINO&quot;, &quot;MATUTINO&quot;, &quot;MATUTINO&quot;, &quot;MATUTINO&quot;, &quot;MATU… #&gt; $ ESCUELA &lt;chr&gt; &quot;RICARDO FLORES MAGON&quot;, &quot;FRANCISCO INDALECIO MADERO&quot;,… #&gt; $ TIPO &lt;chr&gt; &quot;INDêGENA&quot;, &quot;GENERAL&quot;, &quot;CONAFE&quot;, &quot;GENERAL&quot;, &quot;GENERAL&quot;… #&gt; $ CVE_MUN &lt;chr&gt; &quot;186&quot;, &quot;020&quot;, &quot;057&quot;, &quot;070&quot;, &quot;018&quot;, &quot;044&quot;, &quot;024&quot;, &quot;052… #&gt; $ NOM_MUN &lt;chr&gt; &quot;TLATLAUQUITEPEC&quot;, &quot;LA CONCORDIA&quot;, &quot;NOCUPETARO&quot;, &quot;LA … #&gt; $ CVE_LOC &lt;chr&gt; &quot;0024&quot;, &quot;0158&quot;, &quot;0010&quot;, &quot;0001&quot;, &quot;0404&quot;, &quot;0005&quot;, &quot;0006… #&gt; $ NOM_LOC &lt;chr&gt; &quot;OCOTLAN&quot;, &quot;EL ESPINAL&quot;, &quot;APARANDAN&quot;, &quot;LOS REYES ACAQ… #&gt; $ PUNT_ESP_3 &lt;dbl&gt; 552, 628, 451, 573, 612, 474, 472, 520, 718, 491, 477… #&gt; $ PUNT_MAT_3 &lt;dbl&gt; 646, 734, 604, 616, 647, 515, 451, 630, 693, 540, 507… #&gt; $ PUNT_FCE_3 &lt;dbl&gt; 472, 574, 351, 497, 472, 412, 414, 506, 633, 458, 414… #&gt; $ PUNT_ESP_4 &lt;dbl&gt; 491, 347, 539, 553, 441, 519, 416, 367, 655, 434, 434… #&gt; $ PUNT_MAT_4 &lt;dbl&gt; 526, 428, 673, 585, 480, 527, 428, 404, 706, 455, 477… #&gt; $ PUNT_FCE_4 &lt;dbl&gt; 484, 390, 535, 506, 418, 428, 402, 385, 650, 403, 407… #&gt; $ PUNT_ESP_5 &lt;dbl&gt; 516, 457, NA, 551, 564, 480, 491, 366, 448, 483, 462,… #&gt; $ PUNT_MAT_5 &lt;dbl&gt; 528, 486, NA, 582, 583, 499, 494, 428, 432, 484, 511,… #&gt; $ PUNT_FCE_5 &lt;dbl&gt; 464, 461, NA, 496, 505, 413, 475, 382, 424, 467, 496,… #&gt; $ PUNT_ESP_6 &lt;dbl&gt; 466, 452, 601, 549, 539, 476, 482, 448, 664, 460, 408… #&gt; $ PUNT_MAT_6 &lt;dbl&gt; 586, 415, 698, 628, 629, 456, 469, 514, 790, 467, 471… #&gt; $ PUNT_FCE_6 &lt;dbl&gt; 491, 430, 464, 519, 515, 451, 456, 487, 502, 429, 453… ¿Cuántas variables tiene este subconjunto de los datos? De manera similar a los ejemplos anteriores, utiliza la función pivot_longer para apilar las columnas correspondientes a área-grado. Piensa en como podemos separar la “variable” área-grado en dos columnas. Ahora separaremos las variables área y grado de la columna AREA_GRADO, para ello debemos pasar a la función separate(), esta recibe como parámetros: el nombre de la base de datos, el nombre de la variable que deseamos separar en más de una, la posición de donde deseamos “cortar” (hay más opciones para especificar como separar, ver ?separate). El default es separar valores en todos los lugares que encuentre un caracter que no es alfanumérico (espacio, guión,…). enlacep_tidy &lt;- separate(data = enlacep_long, col = AREA_GRADO, into = c(&quot;AREA&quot;, &quot;GRADO&quot;), sep = 9) enlacep_tidy #&gt; # A tibble: 12,000 x 13 #&gt; CVE_ENT NOM_ENT CCT TURNO ESCUELA TIPO CVE_MUN NOM_MUN CVE_LOC #&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; #&gt; 1 21 PUEBLA 21DP… MATU… RICARD… INDê… 186 TLATLA… 0024 #&gt; 2 21 PUEBLA 21DP… MATU… RICARD… INDê… 186 TLATLA… 0024 #&gt; 3 21 PUEBLA 21DP… MATU… RICARD… INDê… 186 TLATLA… 0024 #&gt; 4 21 PUEBLA 21DP… MATU… RICARD… INDê… 186 TLATLA… 0024 #&gt; 5 21 PUEBLA 21DP… MATU… RICARD… INDê… 186 TLATLA… 0024 #&gt; 6 21 PUEBLA 21DP… MATU… RICARD… INDê… 186 TLATLA… 0024 #&gt; 7 21 PUEBLA 21DP… MATU… RICARD… INDê… 186 TLATLA… 0024 #&gt; 8 21 PUEBLA 21DP… MATU… RICARD… INDê… 186 TLATLA… 0024 #&gt; 9 21 PUEBLA 21DP… MATU… RICARD… INDê… 186 TLATLA… 0024 #&gt; 10 21 PUEBLA 21DP… MATU… RICARD… INDê… 186 TLATLA… 0024 #&gt; # … with 11,990 more rows, and 4 more variables: NOM_LOC &lt;chr&gt;, #&gt; # AREA &lt;chr&gt;, GRADO &lt;chr&gt;, PUNTAJE &lt;dbl&gt; # creamos un mejor código de área enlacep_tidy &lt;- enlacep_tidy %&gt;% mutate( AREA = substr(AREA, 6, 8), GRADO = as.numeric(GRADO) ) glimpse(enlacep_tidy) #&gt; Observations: 12,000 #&gt; Variables: 13 #&gt; $ CVE_ENT &lt;chr&gt; &quot;21&quot;, &quot;21&quot;, &quot;21&quot;, &quot;21&quot;, &quot;21&quot;, &quot;21&quot;, &quot;21&quot;, &quot;21&quot;, &quot;21&quot;, &quot;2… #&gt; $ NOM_ENT &lt;chr&gt; &quot;PUEBLA&quot;, &quot;PUEBLA&quot;, &quot;PUEBLA&quot;, &quot;PUEBLA&quot;, &quot;PUEBLA&quot;, &quot;PUEBL… #&gt; $ CCT &lt;chr&gt; &quot;21DPB0859Z&quot;, &quot;21DPB0859Z&quot;, &quot;21DPB0859Z&quot;, &quot;21DPB0859Z&quot;, … #&gt; $ TURNO &lt;chr&gt; &quot;MATUTINO&quot;, &quot;MATUTINO&quot;, &quot;MATUTINO&quot;, &quot;MATUTINO&quot;, &quot;MATUTIN… #&gt; $ ESCUELA &lt;chr&gt; &quot;RICARDO FLORES MAGON&quot;, &quot;RICARDO FLORES MAGON&quot;, &quot;RICARDO… #&gt; $ TIPO &lt;chr&gt; &quot;INDêGENA&quot;, &quot;INDêGENA&quot;, &quot;INDêGENA&quot;, &quot;INDêGENA&quot;, &quot;INDêGEN… #&gt; $ CVE_MUN &lt;chr&gt; &quot;186&quot;, &quot;186&quot;, &quot;186&quot;, &quot;186&quot;, &quot;186&quot;, &quot;186&quot;, &quot;186&quot;, &quot;186&quot;, … #&gt; $ NOM_MUN &lt;chr&gt; &quot;TLATLAUQUITEPEC&quot;, &quot;TLATLAUQUITEPEC&quot;, &quot;TLATLAUQUITEPEC&quot;,… #&gt; $ CVE_LOC &lt;chr&gt; &quot;0024&quot;, &quot;0024&quot;, &quot;0024&quot;, &quot;0024&quot;, &quot;0024&quot;, &quot;0024&quot;, &quot;0024&quot;, … #&gt; $ NOM_LOC &lt;chr&gt; &quot;OCOTLAN&quot;, &quot;OCOTLAN&quot;, &quot;OCOTLAN&quot;, &quot;OCOTLAN&quot;, &quot;OCOTLAN&quot;, &quot;… #&gt; $ AREA &lt;chr&gt; &quot;ESP&quot;, &quot;MAT&quot;, &quot;FCE&quot;, &quot;ESP&quot;, &quot;MAT&quot;, &quot;FCE&quot;, &quot;ESP&quot;, &quot;MAT&quot;, … #&gt; $ GRADO &lt;dbl&gt; 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 3, 3, 3, 4, 4, 4, 5,… #&gt; $ PUNTAJE &lt;dbl&gt; 552, 646, 472, 491, 526, 484, 516, 528, 464, 466, 586, 4… Conforme nos habituemos a las funciones podemos sacar provecho de sus argumentos adicionales: names_prefix: recibe una expresión regular para eliminar el texto que coincida del inicio de una variable. pivot_longer(enlacep_sub_2013, cols = contains(&quot;PUNT&quot;), names_to = c(&quot;AREA_GRADO&quot;), values_to = &quot;PUNTAJE&quot;, names_prefix = &quot;PUNT_&quot;) %&gt;% glimpse() #&gt; Observations: 12,000 #&gt; Variables: 12 #&gt; $ CVE_ENT &lt;chr&gt; &quot;21&quot;, &quot;21&quot;, &quot;21&quot;, &quot;21&quot;, &quot;21&quot;, &quot;21&quot;, &quot;21&quot;, &quot;21&quot;, &quot;21&quot;,… #&gt; $ NOM_ENT &lt;chr&gt; &quot;PUEBLA&quot;, &quot;PUEBLA&quot;, &quot;PUEBLA&quot;, &quot;PUEBLA&quot;, &quot;PUEBLA&quot;, &quot;PU… #&gt; $ CCT &lt;chr&gt; &quot;21DPB0859Z&quot;, &quot;21DPB0859Z&quot;, &quot;21DPB0859Z&quot;, &quot;21DPB0859Z… #&gt; $ TURNO &lt;chr&gt; &quot;MATUTINO&quot;, &quot;MATUTINO&quot;, &quot;MATUTINO&quot;, &quot;MATUTINO&quot;, &quot;MATU… #&gt; $ ESCUELA &lt;chr&gt; &quot;RICARDO FLORES MAGON&quot;, &quot;RICARDO FLORES MAGON&quot;, &quot;RICA… #&gt; $ TIPO &lt;chr&gt; &quot;INDêGENA&quot;, &quot;INDêGENA&quot;, &quot;INDêGENA&quot;, &quot;INDêGENA&quot;, &quot;INDê… #&gt; $ CVE_MUN &lt;chr&gt; &quot;186&quot;, &quot;186&quot;, &quot;186&quot;, &quot;186&quot;, &quot;186&quot;, &quot;186&quot;, &quot;186&quot;, &quot;186… #&gt; $ NOM_MUN &lt;chr&gt; &quot;TLATLAUQUITEPEC&quot;, &quot;TLATLAUQUITEPEC&quot;, &quot;TLATLAUQUITEPE… #&gt; $ CVE_LOC &lt;chr&gt; &quot;0024&quot;, &quot;0024&quot;, &quot;0024&quot;, &quot;0024&quot;, &quot;0024&quot;, &quot;0024&quot;, &quot;0024… #&gt; $ NOM_LOC &lt;chr&gt; &quot;OCOTLAN&quot;, &quot;OCOTLAN&quot;, &quot;OCOTLAN&quot;, &quot;OCOTLAN&quot;, &quot;OCOTLAN&quot;… #&gt; $ AREA_GRADO &lt;chr&gt; &quot;ESP_3&quot;, &quot;MAT_3&quot;, &quot;FCE_3&quot;, &quot;ESP_4&quot;, &quot;MAT_4&quot;, &quot;FCE_4&quot;,… #&gt; $ PUNTAJE &lt;dbl&gt; 552, 646, 472, 491, 526, 484, 516, 528, 464, 466, 586… names_sep: nos permite hacer el pivoteo y separar en una misma operación, en este caso names_to consiste en un vector con más de una entrada y names_sep indica como separar el nombre de las columnas. pivot_longer(enlacep_sub_2013, cols = contains(&quot;PUNT&quot;), names_to = c(&quot;AREA&quot;, &quot;GRADO&quot;), values_to = &quot;PUNTAJE&quot;, names_prefix = &quot;PUNT_&quot;, names_sep = &quot;_&quot;) %&gt;% glimpse() #&gt; Observations: 12,000 #&gt; Variables: 13 #&gt; $ CVE_ENT &lt;chr&gt; &quot;21&quot;, &quot;21&quot;, &quot;21&quot;, &quot;21&quot;, &quot;21&quot;, &quot;21&quot;, &quot;21&quot;, &quot;21&quot;, &quot;21&quot;, &quot;2… #&gt; $ NOM_ENT &lt;chr&gt; &quot;PUEBLA&quot;, &quot;PUEBLA&quot;, &quot;PUEBLA&quot;, &quot;PUEBLA&quot;, &quot;PUEBLA&quot;, &quot;PUEBL… #&gt; $ CCT &lt;chr&gt; &quot;21DPB0859Z&quot;, &quot;21DPB0859Z&quot;, &quot;21DPB0859Z&quot;, &quot;21DPB0859Z&quot;, … #&gt; $ TURNO &lt;chr&gt; &quot;MATUTINO&quot;, &quot;MATUTINO&quot;, &quot;MATUTINO&quot;, &quot;MATUTINO&quot;, &quot;MATUTIN… #&gt; $ ESCUELA &lt;chr&gt; &quot;RICARDO FLORES MAGON&quot;, &quot;RICARDO FLORES MAGON&quot;, &quot;RICARDO… #&gt; $ TIPO &lt;chr&gt; &quot;INDêGENA&quot;, &quot;INDêGENA&quot;, &quot;INDêGENA&quot;, &quot;INDêGENA&quot;, &quot;INDêGEN… #&gt; $ CVE_MUN &lt;chr&gt; &quot;186&quot;, &quot;186&quot;, &quot;186&quot;, &quot;186&quot;, &quot;186&quot;, &quot;186&quot;, &quot;186&quot;, &quot;186&quot;, … #&gt; $ NOM_MUN &lt;chr&gt; &quot;TLATLAUQUITEPEC&quot;, &quot;TLATLAUQUITEPEC&quot;, &quot;TLATLAUQUITEPEC&quot;,… #&gt; $ CVE_LOC &lt;chr&gt; &quot;0024&quot;, &quot;0024&quot;, &quot;0024&quot;, &quot;0024&quot;, &quot;0024&quot;, &quot;0024&quot;, &quot;0024&quot;, … #&gt; $ NOM_LOC &lt;chr&gt; &quot;OCOTLAN&quot;, &quot;OCOTLAN&quot;, &quot;OCOTLAN&quot;, &quot;OCOTLAN&quot;, &quot;OCOTLAN&quot;, &quot;… #&gt; $ AREA &lt;chr&gt; &quot;ESP&quot;, &quot;MAT&quot;, &quot;FCE&quot;, &quot;ESP&quot;, &quot;MAT&quot;, &quot;FCE&quot;, &quot;ESP&quot;, &quot;MAT&quot;, … #&gt; $ GRADO &lt;chr&gt; &quot;3&quot;, &quot;3&quot;, &quot;3&quot;, &quot;4&quot;, &quot;4&quot;, &quot;4&quot;, &quot;5&quot;, &quot;5&quot;, &quot;5&quot;, &quot;6&quot;, &quot;6&quot;, &quot;… #&gt; $ PUNTAJE &lt;dbl&gt; 552, 646, 472, 491, 526, 484, 516, 528, 464, 466, 586, 4… names_pattern: similar a names_sep pero recibe una expresión regular. pivot_longer(enlacep_sub_2013, cols = contains(&quot;PUNT&quot;), names_to = c(&quot;AREA&quot;, &quot;GRADO&quot;), names_pattern = &quot;PUNT_?(.*)_(.*)&quot;, values_to = &quot;PUNTAJE&quot;) names_ptypes, values_ptypes: permiten especificar el tipo de las nuevas columnas. pivot_longer(enlacep_sub_2013, cols = contains(&quot;PUNT&quot;), names_to = c(&quot;AREA&quot;, &quot;GRADO&quot;), values_to = &quot;PUNTAJE&quot;, names_prefix = &quot;PUNT_&quot;, names_sep = &quot;_&quot;, names_ptypes = list(GRADO = integer())) %&gt;% glimpse() #&gt; Observations: 12,000 #&gt; Variables: 13 #&gt; $ CVE_ENT &lt;chr&gt; &quot;21&quot;, &quot;21&quot;, &quot;21&quot;, &quot;21&quot;, &quot;21&quot;, &quot;21&quot;, &quot;21&quot;, &quot;21&quot;, &quot;21&quot;, &quot;2… #&gt; $ NOM_ENT &lt;chr&gt; &quot;PUEBLA&quot;, &quot;PUEBLA&quot;, &quot;PUEBLA&quot;, &quot;PUEBLA&quot;, &quot;PUEBLA&quot;, &quot;PUEBL… #&gt; $ CCT &lt;chr&gt; &quot;21DPB0859Z&quot;, &quot;21DPB0859Z&quot;, &quot;21DPB0859Z&quot;, &quot;21DPB0859Z&quot;, … #&gt; $ TURNO &lt;chr&gt; &quot;MATUTINO&quot;, &quot;MATUTINO&quot;, &quot;MATUTINO&quot;, &quot;MATUTINO&quot;, &quot;MATUTIN… #&gt; $ ESCUELA &lt;chr&gt; &quot;RICARDO FLORES MAGON&quot;, &quot;RICARDO FLORES MAGON&quot;, &quot;RICARDO… #&gt; $ TIPO &lt;chr&gt; &quot;INDêGENA&quot;, &quot;INDêGENA&quot;, &quot;INDêGENA&quot;, &quot;INDêGENA&quot;, &quot;INDêGEN… #&gt; $ CVE_MUN &lt;chr&gt; &quot;186&quot;, &quot;186&quot;, &quot;186&quot;, &quot;186&quot;, &quot;186&quot;, &quot;186&quot;, &quot;186&quot;, &quot;186&quot;, … #&gt; $ NOM_MUN &lt;chr&gt; &quot;TLATLAUQUITEPEC&quot;, &quot;TLATLAUQUITEPEC&quot;, &quot;TLATLAUQUITEPEC&quot;,… #&gt; $ CVE_LOC &lt;chr&gt; &quot;0024&quot;, &quot;0024&quot;, &quot;0024&quot;, &quot;0024&quot;, &quot;0024&quot;, &quot;0024&quot;, &quot;0024&quot;, … #&gt; $ NOM_LOC &lt;chr&gt; &quot;OCOTLAN&quot;, &quot;OCOTLAN&quot;, &quot;OCOTLAN&quot;, &quot;OCOTLAN&quot;, &quot;OCOTLAN&quot;, &quot;… #&gt; $ AREA &lt;chr&gt; &quot;ESP&quot;, &quot;MAT&quot;, &quot;FCE&quot;, &quot;ESP&quot;, &quot;MAT&quot;, &quot;FCE&quot;, &quot;ESP&quot;, &quot;MAT&quot;, … #&gt; $ GRADO &lt;int&gt; 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 3, 3, 3, 4, 4, 4, 5,… #&gt; $ PUNTAJE &lt;dbl&gt; 552, 646, 472, 491, 526, 484, 516, 528, 464, 466, 586, 4… Variables almacenadas en filas y columnas El problema más difícil es cuando las variables están tanto en filas como en columnas, veamos una base de datos de fertilidad. ¿Cuáles son las variables en estos datos? data(&quot;df_fertility&quot;) df_fertility #&gt; # A tibble: 306 x 11 #&gt; state size_localidad est age_15_19 age_20_24 age_25_29 age_30_34 #&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 01 A… Menos de 2 50… Valor 74.2 175. 175. 102. #&gt; 2 01 A… Menos de 2 50… Erro… 6.71 11.0 9.35 8.05 #&gt; 3 01 A… 2 500-14 999 … Valor 82.5 171. 140. 103. #&gt; 4 01 A… 2 500-14 999 … Erro… 9.79 12.5 10.4 8.76 #&gt; 5 01 A… 15 000-49 999… Valor 72.6 146. 147. 99.0 #&gt; 6 01 A… 15 000-49 999… Erro… 7.07 10.8 10.5 8.11 #&gt; 7 01 A… 100 000 y más… Valor 66.3 120. 102. 84.2 #&gt; 8 01 A… 100 000 y más… Erro… 7.57 8.66 8.98 8.59 #&gt; 9 02 B… Menos de 2 50… Valor 89.6 158. 117. 86.0 #&gt; 10 02 B… Menos de 2 50… Erro… 15.8 17.2 13.2 12.3 #&gt; # … with 296 more rows, and 4 more variables: age_35_39 &lt;dbl&gt;, #&gt; # age_40_44 &lt;dbl&gt;, age_45_49 &lt;dbl&gt;, global &lt;dbl&gt; Estos datos tienen variables en columnas individuales (state, size_localidad), en múltiples columnas (grupo de edad, age_15_19,..) y en filas (Valor y Error estándar). Comencemos por apilar las columnas. fertility_long &lt;- pivot_longer(df_fertility, cols = age_15_19:global, names_to = &quot;age_bracket&quot;, values_to = &quot;value&quot;, names_prefix = &quot;age_&quot;) fertility_long #&gt; # A tibble: 2,448 x 5 #&gt; state size_localidad est age_bracket value #&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 01 Aguascalient… Menos de 2 500 habitan… Valor 15_19 74.2 #&gt; 2 01 Aguascalient… Menos de 2 500 habitan… Valor 20_24 175. #&gt; 3 01 Aguascalient… Menos de 2 500 habitan… Valor 25_29 175. #&gt; 4 01 Aguascalient… Menos de 2 500 habitan… Valor 30_34 102. #&gt; 5 01 Aguascalient… Menos de 2 500 habitan… Valor 35_39 59.0 #&gt; 6 01 Aguascalient… Menos de 2 500 habitan… Valor 40_44 23.0 #&gt; 7 01 Aguascalient… Menos de 2 500 habitan… Valor 45_49 4.49 #&gt; 8 01 Aguascalient… Menos de 2 500 habitan… Valor global 3.06 #&gt; 9 01 Aguascalient… Menos de 2 500 habitan… Error están… 15_19 6.71 #&gt; 10 01 Aguascalient… Menos de 2 500 habitan… Error están… 20_24 11.0 #&gt; # … with 2,438 more rows Podemos crear algunas variables adicionales. fertility_vars &lt;- fertility_long %&gt;% mutate( state_code = str_sub(state, 1, 2), state_name = str_sub(state, 4) ) %&gt;% select(-state) fertility_vars #&gt; # A tibble: 2,448 x 6 #&gt; size_localidad est age_bracket value state_code state_name #&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; #&gt; 1 Menos de 2 500 habi… Valor 15_19 74.2 01 Aguascalie… #&gt; 2 Menos de 2 500 habi… Valor 20_24 175. 01 Aguascalie… #&gt; 3 Menos de 2 500 habi… Valor 25_29 175. 01 Aguascalie… #&gt; 4 Menos de 2 500 habi… Valor 30_34 102. 01 Aguascalie… #&gt; 5 Menos de 2 500 habi… Valor 35_39 59.0 01 Aguascalie… #&gt; 6 Menos de 2 500 habi… Valor 40_44 23.0 01 Aguascalie… #&gt; 7 Menos de 2 500 habi… Valor 45_49 4.49 01 Aguascalie… #&gt; 8 Menos de 2 500 habi… Valor global 3.06 01 Aguascalie… #&gt; 9 Menos de 2 500 habi… Error es… 15_19 6.71 01 Aguascalie… #&gt; 10 Menos de 2 500 habi… Error es… 20_24 11.0 01 Aguascalie… #&gt; # … with 2,438 more rows Finalmente, la columna est no es una variable, sino que almacena el nombre de 2 variables: Valor y Error Estándar la operación que debemos aplicar (pivot_wider()) es el inverso de apilar (pivot_longer), sus argumentos son: data: data.frame que vamos a pivotear. names_from: nombre o nombres de las columnas (sin comillas) de los cuáles obtendremos los nombres de las nuevas columnas. values_from: nombre o nombres de las columnas (sin comillas) de los cuáles obtendremos los valores que llenarán las nuevas columnas. fertility_tidy &lt;- pivot_wider(fertility_vars, names_from = est, values_from = value) Y podemos mejorar los nombres de las columnas, una opción rápida es usar el paquete janitor. fertility_tidy %&gt;% janitor::clean_names() %&gt;% glimpse() #&gt; Observations: 1,224 #&gt; Variables: 6 #&gt; $ size_localidad &lt;chr&gt; &quot;Menos de 2 500 habitantes&quot;, &quot;Menos de 2 500 habi… #&gt; $ age_bracket &lt;chr&gt; &quot;15_19&quot;, &quot;20_24&quot;, &quot;25_29&quot;, &quot;30_34&quot;, &quot;35_39&quot;, &quot;40_… #&gt; $ state_code &lt;chr&gt; &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;… #&gt; $ state_name &lt;chr&gt; &quot;Aguascalientes&quot;, &quot;Aguascalientes&quot;, &quot;Aguascalient… #&gt; $ valor &lt;dbl&gt; 74.2032276, 175.0281396, 174.5274362, 101.5836230… #&gt; $ error_estandar &lt;dbl&gt; 6.70671255, 11.00329648, 9.34594033, 8.04764573, … o podemos hacerlo manualmente names(fertility_tidy)[5:6] &lt;- c(&quot;est&quot;, &quot;std_error&quot;) Ahora es inmediato no solo hacer gráficas sino también ajustar un modelo. # ajustamos un modelo lineal donde la variable respuesta es temperatura # máxima, y la variable explicativa es el mes fertility_sub &lt;- filter(fertility_tidy, age_bracket != &quot;global&quot;) fertility_lm &lt;- lm(est ~ age_bracket, data = fertility_sub) summary(fertility_lm) #&gt; #&gt; Call: #&gt; lm(formula = est ~ age_bracket, data = fertility_sub) #&gt; #&gt; Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -55.060 -5.778 -0.383 6.874 55.133 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 66.505 1.143 58.21 &lt;2e-16 *** #&gt; age_bracket20_24 70.675 1.616 43.74 &lt;2e-16 *** #&gt; age_bracket25_29 58.881 1.616 36.44 &lt;2e-16 *** #&gt; age_bracket30_34 22.910 1.616 14.18 &lt;2e-16 *** #&gt; age_bracket35_39 -20.312 1.616 -12.57 &lt;2e-16 *** #&gt; age_bracket40_44 -53.346 1.616 -33.01 &lt;2e-16 *** #&gt; age_bracket45_49 -64.797 1.616 -40.10 &lt;2e-16 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 14.13 on 1064 degrees of freedom #&gt; Multiple R-squared: 0.922, Adjusted R-squared: 0.9215 #&gt; F-statistic: 2096 on 6 and 1064 DF, p-value: &lt; 2.2e-16 Vale la pena notar que aunque los datos limpios facilitan las tareas de análisis, distintas funciones o tareas requieren los datos en distintos formas y saber pivotear las tablas es muy útil. Grafica el valor estimado de fertilidad del grupo de edad 20-24 contra 25-29. ¿Qué transformación debes hacer? Tip: elimina la columna que corresponde al error estándar antes de ensanchar los datos. Una misma unidad observacional está almacenada en múltiples tablas También es común que los valores sobre una misma unidad observacional estén separados en muchas tablas o archivos, es común que estas tablas esten divididas de acuerdo a una variable, de tal manera que cada archivo representa a una persona, año o ubicación. Para juntar los archivos hacemos lo siguiente: Enlistamos las rutas de los archivos. Leemos cada archivo y agregamos una columna con el nombre del archivo. Combinamos las tablas en un solo data frame. Veamos un ejemplo, descargamos la carpeta con los datos de varios contaminantes de RAMA, usethis::use_zip(&quot;https://github.com/tereom/estcomp/raw/master/data-raw/19RAMA.zip&quot;, &quot;data&quot;) ésta contiene 9 archivos de excel que almacenan información de monitoreo de contaminantes. Cada archivo contiene información de un contaminante y el nombre del archivo indica el contaminante. Los pasos en R (usando el paquete purrr), primero creamos un vector con los nombres de los archivos en un directorio, eligiendo aquellos que contengan las letras “.csv”. paths &lt;- dir(&quot;data/19RAMA&quot;, pattern = &quot;\\\\.xls$&quot;, full.names = TRUE) Después le asignamos el nombre del archivo al nombre de cada elemento del vector. Este paso se realiza para preservar los nombres de los archivos ya que estos los asignaremos a una variable mas adelante. paths &lt;- set_names(paths, basename(paths)) La función map_df itera sobre cada dirección, lee el archivo excel de dicha dirección y los combina en un data frame. library(readxl) rama &lt;- map_df(paths, read_excel, .id = &quot;FILENAME&quot;) # eliminamos la basura del id rama &lt;- rama %&gt;% mutate(PARAMETRO = str_remove(FILENAME, &quot;2019&quot;) %&gt;% str_remove(&quot;.xls&quot;)) %&gt;% select(PARAMETRO, FECHA:AJU) # y apilamos para tener una columna por estación rama_tidy &lt;- rama %&gt;% gather(estacion, valor, ACO:AJU) %&gt;% mutate(valor = ifelse(-99, NA, valor)) rama_tidy #&gt; # A tibble: 1,648,512 x 5 #&gt; PARAMETRO FECHA HORA estacion valor #&gt; &lt;chr&gt; &lt;dttm&gt; &lt;dbl&gt; &lt;chr&gt; &lt;lgl&gt; #&gt; 1 CO 2019-01-01 00:00:00 1 ACO NA #&gt; 2 CO 2019-01-01 00:00:00 2 ACO NA #&gt; 3 CO 2019-01-01 00:00:00 3 ACO NA #&gt; 4 CO 2019-01-01 00:00:00 4 ACO NA #&gt; 5 CO 2019-01-01 00:00:00 5 ACO NA #&gt; 6 CO 2019-01-01 00:00:00 6 ACO NA #&gt; 7 CO 2019-01-01 00:00:00 7 ACO NA #&gt; 8 CO 2019-01-01 00:00:00 8 ACO NA #&gt; 9 CO 2019-01-01 00:00:00 9 ACO NA #&gt; 10 CO 2019-01-01 00:00:00 10 ACO NA #&gt; # … with 1,648,502 more rows Otras consideraciones En las buenas prácticas es importante tomar en cuenta los siguientes puntos: Incluir un encabezado con el nombre de las variables. Los nombres de las variables deben ser entendibles (e.g. AgeAtDiagnosis es mejor que AgeDx). En general los datos se deben guardar en un archivo por tabla. Escribir un script con las modificaciones que se hicieron a los datos crudos (reproducibilidad). Otros aspectos importantes en la limpieza de datos son: selección del tipo de variables (por ejemplo fechas), datos faltantes, typos y detección de valores atípicos. Recursos adicionales Data Transformation Cheat Sheet de RStudio. Data Wrangling Cheat Sheet de RStudio. Limpiar nombres de columnas, eliminar filas vacías y más, paquete janitor. Lectura de datos tabulares con distintas estructuras, paquete tidycells. "],
["temas-selectos-de-r.html", "Sección 4 Temas selectos de R", " Sección 4 Temas selectos de R Esta sección describe algunos aspectos de R como lenguaje de programación (en contraste a introducir funciones para análisis de datos). Es importante tener en cuenta como funciona R para escribir código más claro, minimizando errores y más eficiente. Las referencias para esta sección son Wickham (2019) y Wickham and Grolemund (2017). Referencias "],
["funciones-e-iteracion.html", "4.1 Funciones e iteración", " 4.1 Funciones e iteración “To understand computations in R, two slogans are helpful: * Everything that exists is an object. * Everything that happens is a function call.” — John Chambers Funciones En R todas las operaciones son producto de la llamada a una función, esto incluye operaciones como +, operadores que controlan flujo como for, if y while, e incluso operadores para obtener subconjuntos como [ ] y $. a &lt;- 3 b &lt;- 4 a + b #&gt; [1] 7 `+`(a, b) #&gt; [1] 7 for (i in 1:2) print(i) #&gt; [1] 1 #&gt; [1] 2 `for`(i, 1:2, print(i)) #&gt; [1] 1 #&gt; [1] 2 Para escribir código eficiente y fácil de leer es importante saber escribir funciones, se dice que si hiciste copy-paste de una sección de tu código 3 o más veces es momento de escribir una función. Escribimos una función para calcular un promedio ponderado: wtd_mean &lt;- function(x, wt = rep(1, length(x))) { sum(x * wt) / sum(wt) } Notemos que esta función recibe hasta dos argumentos: x: el vector a partir del cual calcularemos el promedio y wt: un vector de ponderadores para cada componente del vector x. Notemos además que al segundo argumento le asignamos un valor predeterminado, esto implica que si no especificamos los ponderadores la función usará el valor predeterminado y promediara con mismo peso a todas las componentes. wtd_mean(c(1:10)) #&gt; [1] 5.5 wtd_mean(1:10, 10:1) #&gt; [1] 4 Veamos como escribir una función que reciba un vector y devuelva el mismo vector centrado en cero. Comenzamos escribiendo el código para un caso particular, por ejemplo, reescalando el vector \\((0, 5, 10)\\). vec &lt;- c(0, 5, 10) vec - mean(vec) #&gt; [1] -5 0 5 Una vez que lo probamos lo convertimos en función: center_vector &lt;- function(vec) { vec - mean(vec) } center_vector(c(0, 5, 10)) #&gt; [1] -5 0 5 Ejercicio Escribe una función que reciba un vector y devuelva el mismo vector reescalado al rango 0 a 1. Comienza escribiendo el código para un caso particular, por ejemplo, empieza reescalando el vector . Tip: la función range() devuelve el rango de un vector. Estructura de una función Las funciones de R tienen tres partes: El cuerpo: el código dentro de la función body(wtd_mean) #&gt; { #&gt; sum(x * wt)/sum(wt) #&gt; } Los formales: la lista de argumentos que controlan como puedes llamar a la función, formals(wtd_mean) #&gt; $x #&gt; #&gt; #&gt; $wt #&gt; rep(1, length(x)) El ambiente: el mapeo de la ubicación de las variables de la función, cómo busca la función cada función el valor de las variables que usa. environment(wtd_mean) #&gt; &lt;environment: R_GlobalEnv&gt; Veamos mas ejemplos, ¿qué regresan las siguientes funciones? # 1 x &lt;- 5 f &lt;- function(){ y &lt;- 10 c(x = x, y = y) } rm(x, f) # 2 x &lt;- 5 g &lt;- function(){ x &lt;- 20 y &lt;- 10 c(x = x, y = y) } rm(x, g) # 3 x &lt;- 5 h &lt;- function(){ y &lt;- 10 i &lt;- function(){ z &lt;- 20 c(x = x, y = y, z = z) } i() } # 4 ¿qué ocurre si la corremos por segunda vez? j &lt;- function(){ if (!exists(&quot;a&quot;)){ a &lt;- 5 } else{ a &lt;- a + 1 } print(a) } x &lt;- 0 y &lt;- 10 # 5 ¿qué regresa k()? ¿y k()()? k &lt;- function(){ x &lt;- 1 function(){ y &lt;- 2 x + y } } Las reglas de búsqueda determinan como se busca el valor de una variable libre en una función. A nivel lenguaje R usa lexical scoping, esto implica que en R los valores de los símbolos se basan en como se anidan las funciones cuando fueron creadas y no en como son llamadas. Las reglas de bússqueda de R, lexical scoping, son: Enmascaramiento de nombres: los nombres definidos dentro de una función enmascaran aquellos definidos fuera. x &lt;- 5 g &lt;- function(){ x &lt;- 20 y &lt;- 10 c(x = x, y = y) } g() #&gt; x y #&gt; 20 10 Si un nombre no está definido R busca un nivel arriba, x &lt;- 5 f &lt;- function(){ y &lt;- 10 c(x = x, y = y) } f() #&gt; x y #&gt; 5 10 Y lo mismo ocurre cuando una función está definida dentro de una función. x &lt;- 5 h &lt;- function(){ y &lt;- 10 i &lt;- function(){ z &lt;- 20 c(x = x, y = y, z = z) } i() } h() #&gt; x y z #&gt; 5 10 20 Y cuando una función crea otra función: x &lt;- 10 k &lt;- function(){ x &lt;- 1 function(){ y &lt;- 2 x + y } } k()() #&gt; [1] 3 Funciones o variables: en R las funciones son objetos, sin embargo una función y un objeto no-función pueden llamarse igual. En estos casos usamos un nombre en el llamado de una función se buscará únicamente entre los objetos de tipo función. p &lt;- function(x) { 5 * x } m &lt;- function(){ p &lt;- 2 p(p) } m() #&gt; [1] 10 Cada vez que llamamos una función es un ambiente limpio, es decir, los objetos que se crean durante la llamada de la función no se pasan a las llamadas posteriores. # 4 ¿qué ocurre si la corremos por segunda vez? j &lt;- function(){ if (!exists(&quot;a&quot;)) { a &lt;- 5 } else{ a &lt;- a + 1 } print(a) } j() #&gt; [1] 4 j() #&gt; [1] 4 Búsqueda dinámica: la búsqueda lexica determina donde se busca un valor más no determina cuando. En el caso de R los valores se buscan cuando la función se llama, y no cuando la función se crea. q &lt;- function() x + 1 x &lt;- 15 q() #&gt; [1] 16 x &lt;- 20 q() #&gt; [1] 21 Las reglas de búsqueda de R lo hacen muy flexible pero también propenso a cometer errores. Una función que suele resultar útil para revisar las dependencias de nuestras funciones es findGlobals() en el paquete codetools, esta función enlista las dependencias dentro de una función: codetools::findGlobals(q) #&gt; [1] &quot;+&quot; &quot;x&quot; Observaciones del uso de funciones Cuando llamamos a una función podemos especificar los argumentos en base a posición, nombre completo o nombre parcial: f &lt;- function(abcdef, bcde1, bcde2) { c(a = abcdef, b1 = bcde1, b2 = bcde2) } # Posición f(1, 2, 3) #&gt; a b1 b2 #&gt; 1 2 3 f(2, 3, abcdef = 1) #&gt; a b1 b2 #&gt; 1 2 3 # Podemos abreviar el nombre de los argumentos f(2, 3, a = 1) #&gt; a b1 b2 #&gt; 1 2 3 # Siempre y cuando la abreviación no sea ambigua f(1, 3, b = 1) #&gt; Error in f(1, 3, b = 1): argument 3 matches multiple formal arguments Los argumentos de las funciones en R se evalúan conforme se necesitan (lazy evaluation), f &lt;- function(a, b){ a ^ 2 } f(2) #&gt; [1] 4 La función anterior nunca utiliza el argumento b, de tal manera que f(2) no produce ningún error. Funciones con el mismo nombre en distintos paquetes: La función filter() (incluida en R base) aplica un filtro lineal a una serie de tiempo de una variable. x &lt;- 1:100 filter(x, rep(1, 3)) #&gt; Time Series: #&gt; Start = 1 #&gt; End = 100 #&gt; Frequency = 1 #&gt; [1] NA 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 #&gt; [18] 54 57 60 63 66 69 72 75 78 81 84 87 90 93 96 99 102 #&gt; [35] 105 108 111 114 117 120 123 126 129 132 135 138 141 144 147 150 153 #&gt; [52] 156 159 162 165 168 171 174 177 180 183 186 189 192 195 198 201 204 #&gt; [69] 207 210 213 216 219 222 225 228 231 234 237 240 243 246 249 252 255 #&gt; [86] 258 261 264 267 270 273 276 279 282 285 288 291 294 297 NA Ahora cargamos dplyr. library(dplyr) #&gt; #&gt; Attaching package: &#39;dplyr&#39; #&gt; The following objects are masked from &#39;package:stats&#39;: #&gt; #&gt; filter, lag #&gt; The following objects are masked from &#39;package:base&#39;: #&gt; #&gt; intersect, setdiff, setequal, union filter(x, rep(1, 3)) #&gt; Error in UseMethod(&quot;filter_&quot;): no applicable method for &#39;filter_&#39; applied to an object of class &quot;c(&#39;integer&#39;, &#39;numeric&#39;)&quot; R tiene un conflicto en la función a llamar, nosotros requerimos usar filter de stats y no la función filter de dplyr. R utiliza por default la función que pertenece al último paquete que se cargó. La función search() nos enlista los paquetes cargados y el orden. search() #&gt; [1] &quot;.GlobalEnv&quot; &quot;package:dplyr&quot; &quot;package:forcats&quot; #&gt; [4] &quot;package:stringr&quot; &quot;package:purrr&quot; &quot;package:readr&quot; #&gt; [7] &quot;package:tidyr&quot; &quot;package:tibble&quot; &quot;package:ggplot2&quot; #&gt; [10] &quot;package:tidyverse&quot; &quot;package:stats&quot; &quot;package:graphics&quot; #&gt; [13] &quot;package:grDevices&quot; &quot;package:utils&quot; &quot;package:datasets&quot; #&gt; [16] &quot;package:methods&quot; &quot;Autoloads&quot; &quot;package:base&quot; Una opción es especificar el paquete en la llamada de la función: stats::filter(x, rep(1, 3)) #&gt; Time Series: #&gt; Start = 1 #&gt; End = 100 #&gt; Frequency = 1 #&gt; [1] NA 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 #&gt; [18] 54 57 60 63 66 69 72 75 78 81 84 87 90 93 96 99 102 #&gt; [35] 105 108 111 114 117 120 123 126 129 132 135 138 141 144 147 150 153 #&gt; [52] 156 159 162 165 168 171 174 177 180 183 186 189 192 195 198 201 204 #&gt; [69] 207 210 213 216 219 222 225 228 231 234 237 240 243 246 249 252 255 #&gt; [86] 258 261 264 267 270 273 276 279 282 285 288 291 294 297 NA Como alternativa surge el paquete conflicted que alerta cuando hay conflictos y tiene funciones para especificar a que paquete se desea dar preferencia en una sesión de R. "],
["vectores.html", "4.2 Vectores", " 4.2 Vectores En R se puede trabajar con distintas estructuras de datos, algunas son de una sola dimensión y otras permiten más, como indica el diagrama de abajo: Hasta ahora nos hemos centrado en trabajar con data.frames, y hemos usado vectores atómicos sin profundizar, en esta sección se explican características de los vectores, y veremos que son la base de los data.frames. En R hay dos tipos de vectores, esto es, estructuras de datos de una sola dimensión: los vectores atómicos y las listas. Los vectores atómicos pueden ser de 6 tipos: lógico, entero, double, caracter, complejo y raw. Los dos últimos son poco comunes. Vector atómico de tipo lógico: a &lt;- c(TRUE, FALSE, FALSE) a #&gt; [1] TRUE FALSE FALSE Numérico (double): b &lt;- c(5, 2, 4.1, 7, 9.2) b #&gt; [1] 5.0 2.0 4.1 7.0 9.2 b[1] #&gt; [1] 5 b[2] #&gt; [1] 2 b[2:4] #&gt; [1] 2.0 4.1 7.0 Las operaciones básicas con vectores atómicos son componente a componente: c &lt;- b + 10 c #&gt; [1] 15.0 12.0 14.1 17.0 19.2 d &lt;- sqrt(b) d #&gt; [1] 2.236068 1.414214 2.024846 2.645751 3.033150 b + d #&gt; [1] 7.236068 3.414214 6.124846 9.645751 12.233150 10 * b #&gt; [1] 50 20 41 70 92 b * d #&gt; [1] 11.180340 2.828427 8.301867 18.520259 27.904982 Y podemos crear secuencias como sigue: e &lt;- 1:10 e #&gt; [1] 1 2 3 4 5 6 7 8 9 10 f &lt;- seq(0, 1, 0.25) f #&gt; [1] 0.00 0.25 0.50 0.75 1.00 Para calcular características de vectores atómicos usamos funciones: # media del vector mean(b) #&gt; [1] 5.46 # suma de sus componentes sum(b) #&gt; [1] 27.3 # longitud del vector length(b) #&gt; [1] 5 Y ejemplo de vector atómico de tipo caracter y funciones: frutas &lt;- c(&#39;manzana&#39;, &#39;manzana&#39;, &#39;pera&#39;, &#39;plátano&#39;, &#39;fresa&#39;, &quot;kiwi&quot;) frutas #&gt; [1] &quot;manzana&quot; &quot;manzana&quot; &quot;pera&quot; &quot;plátano&quot; &quot;fresa&quot; &quot;kiwi&quot; grep(&quot;a&quot;, frutas) #&gt; [1] 1 2 3 4 5 gsub(&quot;a&quot;, &quot;x&quot;, frutas) #&gt; [1] &quot;mxnzxnx&quot; &quot;mxnzxnx&quot; &quot;perx&quot; &quot;plátxno&quot; &quot;fresx&quot; &quot;kiwi&quot; Las listas, a diferencia de los vectores atómicos, pueden contener otras listas. Las listas son muy flexibles pues pueden almacenar objetos de cualquier tipo. x &lt;- list(1:3, &quot;Mila&quot;, c(TRUE, FALSE, FALSE), c(2, 5, 3.2)) str(x) #&gt; List of 4 #&gt; $ : int [1:3] 1 2 3 #&gt; $ : chr &quot;Mila&quot; #&gt; $ : logi [1:3] TRUE FALSE FALSE #&gt; $ : num [1:3] 2 5 3.2 Las listas son vectores recursivos debido a que pueden almacenar otras listas. y &lt;- list(list(list(list()))) str(y) #&gt; List of 1 #&gt; $ :List of 1 #&gt; ..$ :List of 1 #&gt; .. ..$ : list() Para construir subconjuntos a partir de listas usamos [] y [[]]. En el primer caso siempre obtenemos como resultado una lista: x_1 &lt;- x[1] x_1 #&gt; [[1]] #&gt; [1] 1 2 3 str(x_1) #&gt; List of 1 #&gt; $ : int [1:3] 1 2 3 Y en el caso de [[]] extraemos un componente de la lista, eliminando un nivel de la jerarquía de la lista. x_2 &lt;- x[[1]] x_2 #&gt; [1] 1 2 3 str(x_2) #&gt; int [1:3] 1 2 3 ¿Cómo se comparan y, y[1] y y[[1]]? Propiedades Todos los vectores (atómicos y listas) tienen las propiedades tipo y longitud, la función typeof() se usa para determinar el tipo, typeof(a) #&gt; [1] &quot;logical&quot; typeof(b) #&gt; [1] &quot;double&quot; typeof(frutas) #&gt; [1] &quot;character&quot; typeof(x) #&gt; [1] &quot;list&quot; y length() la longitud: length(a) #&gt; [1] 3 length(frutas) #&gt; [1] 6 length(x) #&gt; [1] 4 length(y) #&gt; [1] 1 La flexibilidad de las listas las convierte en estructuras muy útiles y muy comunes, muchas funciones regresan resultados en forma de lista. Incluso podemos ver que un data.frame es una lista de vectores, donde todos los vectores son de la misma longitud. Adicionalmente, los vectores pueden tener atributo de nombres, que puede usarse para indexar. names(b) &lt;- c(&quot;momo&quot;, &quot;mila&quot;, &quot;duna&quot;, &quot;milu&quot;, &quot;moka&quot;) b #&gt; momo mila duna milu moka #&gt; 5.0 2.0 4.1 7.0 9.2 b[&quot;moka&quot;] #&gt; moka #&gt; 9.2 names(x) &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;) x #&gt; $a #&gt; [1] 1 2 3 #&gt; #&gt; $b #&gt; [1] &quot;Mila&quot; #&gt; #&gt; $c #&gt; [1] TRUE FALSE FALSE #&gt; #&gt; $d #&gt; [1] 2.0 5.0 3.2 x$a #&gt; [1] 1 2 3 x[[&quot;c&quot;]] #&gt; [1] TRUE FALSE FALSE "],
["iteracion.html", "4.3 Iteración", " 4.3 Iteración En análisis de datos es común implementar rutinas iteraivas, esto es, cuando debemos aplicar los mismos pasos a distintas entradas. Veremos que hay dos paradigmas de iteración: Programación imperativa: ciclos for y ciclos while. Programación funcional: los ciclos se implmentan mediante funciones, La ventaja de la programación imperativa es que hacen la iteración de manera clara, sin embargo, veremos que una vez que nos familiarizamos con el paradigma de programación funcional, resulta en código más fácil de mantener y menos propenso a errores. Ciclos for Supongamos que tenemos una base de datos y queremos calcular la media de sus columnas numéricas. df &lt;- data.frame(id = 1:10, a = rnorm(10), b = rnorm(10, 2), c = rnorm(10, 3), d = rnorm(10, 4)) df #&gt; id a b c d #&gt; 1 1 2.01517303 2.133459 3.242543 4.457143 #&gt; 2 2 1.44233071 2.541103 2.072219 6.267019 #&gt; 3 3 0.14804181 2.463590 4.229705 4.467003 #&gt; 4 4 -0.41602629 1.863292 3.588948 5.524970 #&gt; 5 5 -1.06813843 1.322386 4.566072 4.108160 #&gt; 6 6 1.76277467 1.729673 3.480623 5.782934 #&gt; 7 7 0.06314249 2.531000 2.182135 2.304593 #&gt; 8 8 1.95222984 1.039890 3.104609 5.085241 #&gt; 9 9 1.15278545 3.120072 3.018056 4.006716 #&gt; 10 10 -1.33420894 2.338069 4.494978 2.181994 Podemos crear el código para cada columna pero esto involucra copy-paste y no será muy práctico si aumenta el número de columnas: mean(df$a) #&gt; [1] 0.5718104 mean(df$b) #&gt; [1] 2.108253 mean(df$c) #&gt; [1] 3.397989 mean(df$d) #&gt; [1] 4.418578 Con un ciclo for sería: salida &lt;- vector(&quot;double&quot;, 4) for (i in 1:4) { salida[[i]] &lt;- mean(df[[i + 1]]) } salida #&gt; [1] 0.5718104 2.1082535 3.3979888 4.4185776 Los ciclos for tienen 3 componentes: La salida: salida &lt;- vector(&quot;double&quot;, 4). Es importante especificar el tamaño de la salida antes de iniciar el ciclo for, de lo contrario el código puede ser muy lento. La secuencia: determina sobre que será la iteración, la función seq_along puede resultar útil. salida &lt;- vector(&quot;double&quot;, 5) for (i in seq_along(df)) { salida[[i]] &lt;- mean(df[[i]]) } seq_along(df) #&gt; [1] 1 2 3 4 5 El cuerpo: salida[[i]] &lt;- mean(df[[i]]), el código que calcula lo que nos interesa sobre cada objeto en la iteración. Calcula el valor máximo de cada columna numérica de los datos de ENLACE 3o de primaria enlacep_2013_3. library(estcomp) head(enlacep_2013_3) #&gt; # A tibble: 6 x 6 #&gt; CVE_ENT PUNT_ESP_3 PUNT_MAT_3 PUNT_FCE_3 ALUM_NOCONFIABLE_3 ALUM_EVAL_3 #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 01 513 536 459 0 40 #&gt; 2 01 472 472 404 2 36 #&gt; 3 01 496 526 426 0 96 #&gt; 4 01 543 586 495 5 74 #&gt; 5 01 554 560 506 0 30 #&gt; 6 01 505 546 460 0 67 Recordando la limpieza de datos de la sección anterior en uno de los últimos ejercicios leíamos archivos de manera iteativa. En este ejercicio descargaremos un archivo zip con archivos csv que contienen información de monitoreo de contaminantes en ciudad de México (RAMA), en particular PM2.5. Y juntaremos la información en una sola tabla, la siguiente instrucción descarga los datos en una carpeta data. library(usethis) use_directory(&quot;data&quot;) # crea carpeta en caso de que no exista ya usethis::use_zip(&quot;https://github.com/tereom/estcomp/raw/master/data-raw/19RAMA.zip&quot;, &quot;data&quot;) # descargar y descomprimir zip Enlistamos los archivos xls en la carpeta. paths &lt;- dir(&quot;data/19RAMA&quot;, pattern = &quot;\\\\.xls$&quot;, full.names = TRUE) Tu turno, implementa un ciclo for para leer los archivos y crear una única tabla de datos. Si pegas los data.frames de manera iterativa sugerimos usar la función bind_rows(). Programación funcional Ahora veremos como abordar iteración usando programación funcional. Regresando al ejemplo inicial de calcular la media de las columnas de una tabla de datos: salida &lt;- vector(&quot;double&quot;, 4) for (i in 1:4) { salida[[i]] &lt;- mean(df[[i + 1]]) } salida #&gt; [1] 0.5718104 2.1082535 3.3979888 4.4185776 Podemos crear una función que calcula la media de las columnas de un data.frame: col_media &lt;- function(df) { salida &lt;- vector(&quot;double&quot;, length(df)) for (i in seq_along(df)) { salida[i] &lt;- mean(df[[i]]) } salida } col_media(df) #&gt; [1] 5.5000000 0.5718104 2.1082535 3.3979888 4.4185776 col_media(select(iris, -Species)) #&gt; [1] 5.843333 3.057333 3.758000 1.199333 Y podemos extender a crear más funciones que describan los datos: col_mediana &lt;- function(df) { salida &lt;- vector(&quot;double&quot;, length(df)) for (i in seq_along(df)) { salida[i] &lt;- median(df[[i]]) } salida } col_sd &lt;- function(df) { salida &lt;- vector(&quot;double&quot;, length(df)) for (i in seq_along(df)) { salida[i] &lt;- sd(df[[i]]) } salida } Podemos hacer nuestro código más general y compacto escribiendo una función que reciba los datos sobre los que queremos iterar y la función que queremos aplicar: col_describe &lt;- function(df, fun) { salida &lt;- vector(&quot;double&quot;, length(df)) for (i in seq_along(df)) { salida[i] &lt;- fun(df[[i]]) } salida } col_describe(df, median) #&gt; [1] 5.5000000 0.6504136 2.2357643 3.3615828 4.4620733 col_describe(df, mean) #&gt; [1] 5.5000000 0.5718104 2.1082535 3.3979888 4.4185776 Ahora utilizaremos esta idea de pasar funciones a funciones para eliminar los ciclos for. La iteración a través de funciones es muy común en R, hay funciones para hacer esto en R base (lapply(), apply(), sapply()). Nosotros utilizaremos las funciones del paquete purrr, La familia de funciones del paquete iteran siempre sobre un vector (vector atómico o lista), aplican una función a cada parte y regresan un nuevo vector de la misma longitud que el vector entrada. Cada función especifica en su nombre el tipo de salida: map() devuelve una lista. map_lgl() devuelve un vector lógico. map_int() devuelve un vector entero. map_dbl() devuelve un vector double. map_chr() devuelve un vector caracter. map_df() devuelve un data.frame. En el ejemplo de las medias, map puede recibir un data.frame (lista de vectores) y aplicará las funciones a las columnas del mismo. library(purrr) map_dbl(df, mean) #&gt; id a b c d #&gt; 5.5000000 0.5718104 2.1082535 3.3979888 4.4185776 map_dbl(select(iris, -Species), median) #&gt; Sepal.Length Sepal.Width Petal.Length Petal.Width #&gt; 5.80 3.00 4.35 1.30 Usaremos map para ajustar un modelo lineal a subconjuntos de los datos mtcars determinados por el cilindraje del motor. models &lt;- mtcars %&gt;% split(.$cyl) %&gt;% map(function(df) lm(mpg ~ wt, data = df)) Podemos usar la notación . para hacer código más corto: models &lt;- mtcars %&gt;% split(.$cyl) %&gt;% map(~lm(mpg ~ wt, data = .)) Usemos map_** para unir tablas de datos que están almacenadas en múltiples archivos csv. En este caso es más apropiado usar map_df library(readxl) rama &lt;- map_df(paths, read_excel, .id = &quot;FILENAME&quot;) Ejercicio Usa la función map_** para calcular el número de valores únicos en las columnas de iris. Usa la función map_** para extraer el coeficiete de la variable wt para cada modelo: models[[1]]$coefficients[2] #&gt; wt #&gt; -5.647025 "],
["rendimiento-en-r.html", "4.4 Rendimiento en R", " 4.4 Rendimiento en R “We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil. Yet we should not pass up our opportunities in that critical 3%. A good programmer will not be lulled into complacency by such reasoning, he will be wise to look carefully at the critical code; but only after that code has been identified.” -Donald Knuth Diseña primero, luego optimiza. La optimización del código es un proceso iterativo: Encuentra el cuello de botella más importante. Intenta eliminarlo (no siempre se puede). Repite hasta que tu código sea lo suficientemente rápido. Diagnosticar Una vez que tienes código que se puede leer y funciona, el perfilamiento (profiling) del código es un método sistemático que nos permite conocer cuanto tiempo se esta usando en diferentes partes del programa. Comenzaremos con la función system.time (no es perfilamiento aún), esta calcula el tiempo en segundos que toma ejecutar una expresión (si hay un error, regresa el tiempo hasta que ocurre el error): data(&quot;Batting&quot;, package = &quot;Lahman&quot;) system.time(lm(R ~ AB + teamID, Batting)) #&gt; user system elapsed #&gt; 3.806 0.128 3.935 user time: Tiempo usado por el CPU(s) para evaluar esta expresión, tiempo que experimenta la computadora. elapsed time: tiempo en el reloj, tiempo que experimenta la persona. Notemos que el tiempo de usuario (user) puede ser menor al tiempo transcurrido (elapsed), system.time(readLines(&quot;http://www.jhsph.edu&quot;)) #&gt; user system elapsed #&gt; 0.024 0.000 0.613 o al revés: library(parallel) system.time(mclapply(2000:2007, function(x){ sub &lt;- subset(Batting, yearID == x) lm(R ~ AB + playerID, sub) }, mc.cores = 7)) #&gt; user system elapsed #&gt; 12.799 0.763 9.828 Comparemos la velocidad de dplyr con funciones que se encuentran en R estándar y plyr. # dplyr dplyr_st &lt;- system.time({ Batting %&gt;% group_by(playerID) %&gt;% summarise(total = sum(R, na.rm = TRUE), n = n()) %&gt;% dplyr::arrange(desc(total)) }) # plyr plyr_st &lt;- system.time({ Batting %&gt;% plyr::ddply(&quot;playerID&quot;, plyr::summarise, total = sum(R, na.rm = TRUE), n = length(R)) %&gt;% plyr::arrange(-total) }) # estándar lento est_l_st &lt;- system.time({ players &lt;- unique(Batting$playerID) n_players &lt;- length(players) total &lt;- rep(NA, n_players) n &lt;- rep(NA, n_players) for (i in 1:n_players) { sub_Batting &lt;- Batting[Batting$playerID == players[i], ] total[i] &lt;- sum(sub_Batting$R, na.rm = TRUE) n[i] &lt;- nrow(sub_Batting) } Batting_2 &lt;- data.frame(playerID = players, total = total, n = n) Batting_2[order(Batting_2$total, decreasing = TRUE), ] }) # estándar rápido est_r_st &lt;- system.time({ Batting_2 &lt;- aggregate(. ~ playerID, data = Batting[, c(&quot;playerID&quot;, &quot;R&quot;)], sum) Batting_ord &lt;- Batting_2[order(Batting_2$R, decreasing = TRUE), ] }) dplyr_st #&gt; user system elapsed #&gt; 0.101 0.008 0.109 plyr_st #&gt; user system elapsed #&gt; 3.990 0.012 4.002 est_l_st #&gt; user system elapsed #&gt; 62.608 0.923 63.535 est_r_st #&gt; user system elapsed #&gt; 0.383 0.000 0.382 La función system.time supone que sabes donde buscar, es decir, que sabes que expresiones debes evaluar, una función que puede ser más útil cuando uno desconoce cuál es la función que alenta un programa es profvis() del paquete con el mismo nombre. library(profvis) Batting_recent &lt;- filter(Batting, yearID &gt; 2006) profvis({ players &lt;- unique(Batting_recent$playerID) n_players &lt;- length(players) total &lt;- rep(NA, n_players) n &lt;- rep(NA, n_players) for (i in 1:n_players) { sub_Batting &lt;- Batting_recent[Batting_recent$playerID == players[i], ] total[i] &lt;- sum(sub_Batting$R, na.rm = TRUE) n[i] &lt;- nrow(sub_Batting) } Batting_2 &lt;- data.frame(playerID = players, total = total, n = n) Batting_2[order(Batting_2$total, decreasing = TRUE), ] }) profvis() utiliza a su vez la función Rprof() de R base, este es un perfilador de muestreo que registra cambios en la pila de funciones, funciona tomando muestras a intervalos regulares y tabula cuánto tiempo se lleva en cada función. Estrategias para mejorar desempeño Algunas estrategias para mejorar desempeño: Utilizar apropiadamente funciones de R, o funciones de paquetes que muchas veces están mejor escritas de lo que nosotros podríamos hacer. Hacer lo menos posible. Usar funciones vectorizadas en R (casi siempre). No hacer crecer objetos (es preferible definir su tamaño antes de operar en ellos). Paralelizar. La más simple y muchas veces la más barata: conseguir una máquina más grande (por ejemplo Amazon web services). A continuación revisamos y ejemplificamos los puntos anteriores, los ejemplos de código se tomaron del taller EfficientR, impartido por Martin Morgan. Utilizar apropiadamente funciones de R Si el cuello de botella es la función de un paquete vale la pena buscar alternativas, CRAN task views es un buen lugar para buscar. Hacer lo menos posible Utiliza funciones más específicas, por ejemplo: rowSums(), colSums(), rowMeans() y colMeans() son más rápidas que las invocaciones equivalentes de apply(). Si quieres checar si un vector contiene un valor any(x == 10) es más veloz que 10 %in% x, esto es porque examinar igualdad es más sencillo que examinar inclusión en un conjunto. Este conocimiento requiere que conozcas alternativas, para ello debes construir tu vocabulario, puedes comenzar por lo básico e ir incrementando conforme lees código. Otro caso es cuando las funciones son más rápidas cunado les das más información del problema, por ejemplo: read.csv(), especificar las clases de las columnas con colClasses. factor() especifica los niveles con el argumento levels. Usar funciones vectorizadas en R Es común escuchar que en R vectorizar es conveniente, el enfoque vectorizado va más allá que evitar ciclos for: Pensar en objetos, en lugar de enfocarse en las componentes de un vector, se piensa únicamente en el vector completo. Los ciclos en las funciones vectorizadas de R están escritos en C, lo que los hace más veloces. Las funciones vectorizadas programadas en R pueden mejorar la interfaz de una función pero no necesariamente mejorar el desempeño. Usar vectorización para desempeño implica encontrar funciones de R implementadas en C. Al igual que en el punto anterior, vectorizar requiere encontrar las funciones apropiadas, algunos ejemplos incluyen: _rowSums(), colSums(), rowMeans() y colMeans(). Ejemplo: iteración (for, lapply(), sapply(), vapply(), mapply(), apply(), …) en un vector de n elementos llama a R base n veces compute_pi0 &lt;- function(m) { s = 0 sign = 1 for (n in 0:m) { s = s + sign / (2 * n + 1) sign = -sign } 4 * s } compute_pi1 &lt;- function(m) { even &lt;- seq(0, m, by = 2) odd &lt;- seq(1, m, by = 2) s &lt;- sum(1 / (2 * even + 1)) - sum(1 / (2 * odd + 1)) 4 * s } m &lt;- 1e6 Utilizamos el paquete microbenchmark para medir tiempos varias veces. library(microbenchmark) m &lt;- 1e4 result &lt;- microbenchmark( compute_pi0(m), compute_pi0(m * 10), compute_pi0(m * 100), compute_pi1(m), compute_pi1(m * 10), compute_pi1(m * 100), compute_pi1(m * 1000), times = 20 ) result #&gt; Unit: microseconds #&gt; expr min lq mean median #&gt; compute_pi0(m) 816.518 822.801 831.1244 830.2875 #&gt; compute_pi0(m * 10) 8223.409 8250.367 8298.7711 8278.5290 #&gt; compute_pi0(m * 100) 82009.376 82207.918 82834.5575 82314.4845 #&gt; compute_pi1(m) 151.117 170.328 237.5847 249.2485 #&gt; compute_pi1(m * 10) 1244.388 1366.016 2399.1560 1402.5795 #&gt; compute_pi1(m * 100) 12818.157 13100.263 22443.8337 15345.3470 #&gt; compute_pi1(m * 1000) 242726.558 329503.262 338571.8512 346929.4110 #&gt; uq max neval #&gt; 833.889 886.307 20 #&gt; 8326.450 8476.216 20 #&gt; 82433.242 88315.656 20 #&gt; 291.455 326.139 20 #&gt; 1447.884 8271.769 20 #&gt; 20512.961 128284.941 20 #&gt; 351542.958 446626.543 20 Evitar copias Otro aspecto importante es que generalmente conviene asignar objetos en lugar de hacerlos crecer (es más eficiente asignar toda la memoria necesaria antes del cálculo que asignarla sucesivamente). Esto es porque cuando se usan instrucciones para crear un objeto más grande (e.g. append(), cbind(), c(), rbind()) R debe primero asignar espacio a un nuevo objeto y luego copiar al nuevo lugar. Para leer más sobre esto Burns (2015) es una buena referencia. Ejemplo: crecer un vector puede causar que R copie de manera repetida el vector chico en el nuevo vector, aumentando el tiempo de ejecución. Solución: crear vector de tamaño final y llenarlo con valores. Las funciones como lapply() y map hacen esto de manera automática y son más sencillas que los ciclos for. memory_copy1 &lt;- function(n) { result &lt;- numeric() for (i in seq_len(n)) result &lt;- c(result, 1/i) result } memory_copy2 &lt;- function(n) { result &lt;- numeric() for (i in seq_len(n)) result[i] &lt;- 1 / i result } pre_allocate1 &lt;- function(n) { result &lt;- numeric(n) for (i in seq_len(n)) result[i] &lt;- 1 / i result } pre_allocate2 &lt;- function(n) { vapply(seq_len(n), function(i) 1 / i, numeric(1)) } vectorized &lt;- function(n) { 1 / seq_len(n) } n &lt;- 10000 microbenchmark( memory_copy1(n), memory_copy2(n), pre_allocate1(n), pre_allocate2(n), vectorized(n), times = 10, unit = &quot;relative&quot; ) #&gt; Unit: relative #&gt; expr min lq mean median uq #&gt; memory_copy1(n) 5578.43716 5415.09617 620.287448 4265.91375 3561.41144 #&gt; memory_copy2(n) 96.42319 94.34348 12.359685 78.21081 66.48237 #&gt; pre_allocate1(n) 21.11749 20.62980 3.921356 16.06344 13.48745 #&gt; pre_allocate2(n) 204.26856 201.06847 24.824861 161.81038 143.64531 #&gt; vectorized(n) 1.00000 1.00000 1.000000 1.00000 1.00000 #&gt; max neval #&gt; 85.390880 10 #&gt; 2.772414 10 #&gt; 2.121196 10 #&gt; 4.494756 10 #&gt; 1.000000 10 Un caso común donde se hacen copias sin necesidad es al trabajar con data.frames. Ejemplo: actualizar un data.frame copia el data.frame completo. Solución: operar en vectores y actualiza el data.frame al final. n &lt;- 1e4 df &lt;- data.frame(Index = 1:n, A = seq(10, by = 1, length.out = n)) f1 &lt;- function(df) { ## constants cost1 &lt;- 3 cost2 &lt;- 0.05 cost3 &lt;- 50 ## update data.frame -- copies entire data frame each time! df$S[1] &lt;- cost1 for (j in 2:(n)) df$S[j] &lt;- df$S[j - 1] - cost3 + df$S[j - 1] * cost2 / 12 ## return result df } .f2helper &lt;- function(cost1, cost2, cost3, n) { ## create the result vector separately cost2 &lt;- cost2 / 12 # &#39;hoist&#39; common operations result &lt;- numeric(n) result[1] &lt;- cost1 for (j in 2:(n)) result[j] &lt;- (1 + cost2) * result[j - 1] - cost3 result } f2 &lt;- function(df) { cost1 &lt;- 3 cost2 &lt;- 0.05 cost3 &lt;- 50 ## update the data.frame once df$S &lt;- .f2helper(cost1, cost2, cost3, n) df } microbenchmark( f1(df), f2(df), times = 5, unit = &quot;relative&quot; ) #&gt; Unit: relative #&gt; expr min lq mean median uq max neval #&gt; f1(df) 247.1612 240.59 79.81128 233.7589 64.47879 29.77538 5 #&gt; f2(df) 1.0000 1.00 1.00000 1.0000 1.00000 1.00000 5 Paralelizar Paralelizar usa varios cores para trabajar de manera simultánea en varias secciones de un problema, no reduce el tiempo computacional pero incrementa el tiempo del usuario pues aprovecha los recursos. Como referencia está [Parallel Computing for Data Science] de Norm Matloff. Referencias "],
["lecturas-y-recursos-recomendados-de-r.html", "4.5 Lecturas y recursos recomendados de R", " 4.5 Lecturas y recursos recomendados de R Algunas recomendaciones para mejorar el flujo de trabajo y aprender nuevas herramientas de R son: What they forgot to teach you about R de Jenny Bryan y Jim Hester. Flujos de trabajo basados en proyectos que facilitan el trabajo del analista. Good enough practices in scientific computing, Greg Wilson, Jennifer Bryan, et al. Happy Git with R, Jenny Bryan y Jim Hester. R Markdown: The Definitive Guide, Yihui Xie, J. J. Allaire, Garrett Grolemund. "],
["introduccion-a-calculo-de-probabilidades.html", "Sección 5 Introducción a Cálculo de Probabilidades", " Sección 5 Introducción a Cálculo de Probabilidades “Probabilidad es el lenguaje matemático para cuantificar incertidumbre.” -Wasserman En esta parte hacemos un repaso de conceptos de probabilidad con un enfoque computacional: Modelos probabilísticos: espacio de resultados, eventos, funciones de probabilidad. Interpretación frecuentista de probabilidad. Variables aleatorias. Las referencias para esta sección son Pitman (1992), Ross (1998) y Wasserman (2010). Referencias "],
["probabilidad-como-extension-de-proporcion.html", "5.1 Probabilidad como extensión de proporción", " 5.1 Probabilidad como extensión de proporción Históricamente las primeras ideas probabilísticas ocurrieron en el contexto de juegos de azar, y la consideración si una apuesta es “justa” o no. El concepto original fue formulado quizá por primera vez (Cardano) de la siguiente forma: Las apuestas en un juego de azar deben ser en proporción al número de maneras en que un jugador puede ganar. Por ejemplo, supongamos que yo apuesto a que una tirada de dado va salir un 1 o 2. Mi contrincante gana si sale 3, 4, 5, 6. Como hay el doble de resultados desfavorables para mi, el juego es justo si yo apuesto 10 pesos y mi contrincante 20. Implícitamente, esta regla razonable introduce el concepto de probabilidad o “verosimilitud” de un evento aleatorio. Las bases para la formalización de esta idea son las siguientes: Los resultados del experimento (o el juego de azar) son simétricos: nada los distingue excepto la etiqueta (por ejemplo el 1 y el 2 en el dado). En este caso decimos que estos resultados son “equiprobables”. La “probabilidad” de un conjunto de resultados es proporcional al tamaño del conjunto de resultados (1 y 2 son dos posibles resultados de 6). Ejemplos En el ejemplo del dado, no podríamos definir los resultados como “Tiro 1 o 2” o “No tiro 1 o 2”, porque no hay simetría entre los dos resultados: el dado tiene cuatro caras que corresponden al resultado “No tiro 1 o 2” y solo dos para “Tiro 1 o 2” Si tenemos 100 pelotas idénticas en una bolsa, las revolvemos bien, y sacamos sin ver una pelota, en el experimento aleatorio no hay nada que distinga una pelota de otra, así que tiene sentido el modelo equiprobable: todas las pelotas tienen la misma probabilidad de salir. Sin embargo, si hay unas pelotas más pesadas que otra, no revolvemos bien, etc. el experimento pierde la simetría y el modelo equiprobable puede nos ser apropiado. En esta familia de modelos, la probabilidad se ve como una extensión de la idea de proporción, o cociente de una parte con respecto a un todo. Este es uno de los modelos de probabilidad más fundamentales. Podemos definir algunos conceptos para tener una teoría matemática para este tipo de modelos. Espacio de resultados y eventos El espacio de resultados \\(\\Omega\\) es el conjunto de posibles resultados de un experimento aleatorio. A los puntos \\(\\omega \\in \\Omega\\) se les conoce como resultados muestrales, o realizaciones del experimento aleatorio. Ejemplo: Si lanzamos una moneda dos veces entonces el espacio de resultados es: \\[\\Omega = \\{AA, AS, SA, SS \\}\\] Un evento es un subconjunto del espacio muestral. Los eventos usualmente se denotan por letras mayúsculas. El evento: que la primer lanzamiento resulte águila es el evento \\[A=\\{AA, AS\\}\\] Espacios de probabilidad equiprobables Espacios equiprobables. Si todos los elementos en el espacio de resultados tienen la misma oportunidad de ser elegidos entonces la probabilidad del evento A es el número de resultados en A dividido entre el número total de posibles resultados: \\[P(A)=\\frac{\\#(A)}{\\#(\\Omega)},\\] de modo que calcular probabilidades se reduce a un ejercicio de conteo. Por ejemplo, la probabilidad de obtener \\(AA\\) si lanzamos una moneda dos veces es \\(1/4 = 0.25\\), y la probabilidad del evento que la primer lanzamiento resulte águila es \\(2/4 = 0.5\\). Lanzamos un dado y anotamos el número de la cara superior, después lanzamos otro dado y anotamos el número de la cara superior. ¿Cuál es el espacio de resultados? ¿Cuál es la probabilidad de que la suma de los números sea 5? ¿Cuál es la probabilidad de que el segundo número sea mayor que el primero? Repite las preguntas anteriores cuando lanzas 2 dados con \\(n\\) caras (\\(n \\ge 4\\)). Observaciones: Como explicamos arriba, este tipo de modelos es apropiado cuando podemos escribir el experimento aleatorio de forma que los resultados son equiprobables (existe simetría de los resultados). También podemos pensar en que el fundamento de estos modelos es el principio de razón insuficiente: si no hay nada que distinga los resultados del experimento, ningún modelo o cálculo que hagamos debe distingir entre los resultados. Ejemplo Supongamos que sacamos tres cartas de una baraja. ¿Cuál es la probabilidad de una cuarta carta que saquemos es un as? Utiiza el principio de razón insuficiente. Para problemas más complejos, podemos utilizar técnicas de conteo más avanzadas. Ejemplo: combinaciones Un comité de 5 personas será seleccionado de un grupo de 6 hombres y 9 mujeres. Si la selección es aleatoria, ¿cuál es la probabilidad de que el comité este conformado por 3 hombres y 2 mujeres? Hay \\(\\dbinom{15}{5}\\) posibles comités, cada uno tiene la misma posibilidad de ser seleccionado. Por otra parte, hay \\(\\dbinom{6}{3} \\dbinom{9}{2}\\) posibles comités que incluyen 3 hombres y 2 mujeres, por lo tanto, la probabilidad que buscamos es: \\[\\frac{\\dbinom{6}{3} \\dbinom{9}{2}}{\\dbinom{15}{5}} \\] y la función para calcular combinaciones en R es choose(n, r) choose(6, 3) * choose(9, 2) / choose(15, 5) #&gt; [1] 0.2397602 Los solución a problemas derivados de juegos de azar se complica rápidamente y suele ser necesario conocer técnicas de conteo para resolverlos. "],
["interpretacion-frecuentista-de-probabilidad.html", "5.2 Interpretación frecuentista de probabilidad", " 5.2 Interpretación frecuentista de probabilidad La interpretación de la probabilidad como extensión a la idea de proporción es fundamental, pero deja sin responder una pregunta crítica: ¿Cómo sabemos que un modelo probabilístico de este tipo describe apropiadamente la realidad? ¿Qué pruebas empíricas podemos buscar que de soporte a tal modelo? El concepto subyacente que tardó más en formalizarse es el siguiente. En términos de juegos justos: A partir de una sola repetición del juego, no podemos determinar si un juego es justo o no. Sin embargo, si repetimos una gran cantidad de veces el juego justo, nuestras pérdidas y ganancias deberían equilibrarse, y con seguridad nuestro balance será cercano a 0. Ejemplo Según el concepto de juego justo, si mi probabilidad de ganar es \\(p\\), es justo que apueste una cantidad \\(Ap\\) y mi contrincante una cantidad \\(A(1-p)\\). Después de \\(n\\) repeticiones de este juego, supongamos que gané un número de veces \\(m\\). Entonces, tengo \\(A(1-p)m\\) pesos de las veces que gané, y perdí \\(Ap(n-m)\\) pesos por las veces que perdí. En total, mi neto de ganancias es \\(A(1-p)m - Ap(n-m)\\). Si esta cantidad es cercana a cero \\[A(1-p)m - Ap(n-m) \\approx 0,\\] entonces despejando obtenemos que \\[p \\approx \\frac{m}{n},\\] Es decir, aproximadamente tengo que ganar una fracción \\(m/n\\) de veces. Esta cantidad es una frecuencia relativa de ocurrencia. Una frecuencia relativa es una proporción que mide que tan seguido, o frecuente, ocurre una u otra cosa en una sucesión de observaciones. Pensemos en un experimento que se pueda repetir, por ejemplo, lanzar una moneda, lanzar un dado, el nacimiento de un bebé. Llamaremos ensayo a una repetición del experimento. Ahora, sea A un posible resultado del evento (obtener sol, obtener un 6, el bebé es niña), si A ocurre \\(m\\) veces en \\(n\\) ensayos, entonces la frecuencia relativa de A en \\(n\\) ensayos es \\(m/n\\). Ejemplo Supongamos que lanzamos una moneda 10 veces y obtenemos los siguientes resultados: set.seed(2881) lanzamientos_10 &lt;- sample(c(&quot;A&quot;, &quot;S&quot;), 10, replace = TRUE) lanzamientos_10 #&gt; [1] &quot;A&quot; &quot;A&quot; &quot;A&quot; &quot;A&quot; &quot;A&quot; &quot;A&quot; &quot;S&quot; &quot;A&quot; &quot;A&quot; &quot;A&quot; Podemos calcular las secuencia de frecuencias relativas de águila: cumsum(lanzamientos_10 == &quot;A&quot;) # suma acumulada de águilas #&gt; [1] 1 2 3 4 5 6 6 7 8 9 cumsum(lanzamientos_10 == &quot;A&quot;) / 1:10 #&gt; [1] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 0.8571429 #&gt; [8] 0.8750000 0.8888889 0.9000000 Resultados empíricos acerca de frecuencias relativas Una primera observación empírica es que las frecuencias relativas basadas en un número mayor de observaciones son menos fluctuantes comparado con las frecuencias relativas basadas en pocas observaciones. Este fenómeno se conoce a veces como la ley empírica de los promedios (que se formaliza después en las leyes de los grandes números): n &lt;- 1000 tibble(num_lanzamiento = 1:n, lanzamiento = sample(c(&quot;A&quot;, &quot;S&quot;), n, replace = TRUE)) %&gt;% mutate(frec_rel = cummean(lanzamiento == &quot;A&quot;)) %&gt;% ggplot(aes(x = num_lanzamiento, y = frec_rel)) + geom_hline(yintercept = 0.5, color = &quot;red&quot;, alpha = 0.5) + geom_line(color = &quot;darkgray&quot;) + geom_point(size = 1.0) + labs(y = &quot;frecuencia relativa&quot;, title = &quot;1000 volados&quot;, x = &quot;lanzamiento&quot;) Veamos las frecuencias relativas para 3 series de 1000 lanzamientos. lanzar &lt;- function(n = 1000){ tibble(num_lanzamiento = 1:n, lanzamiento = sample(c(&quot;A&quot;, &quot;S&quot;), n, replace = TRUE)) %&gt;% mutate(frec_rel = cummean(lanzamiento == &quot;A&quot;)) } head(lanzar()) #&gt; # A tibble: 6 x 3 #&gt; num_lanzamiento lanzamiento frec_rel #&gt; &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 1 A 1 #&gt; 2 2 S 0.5 #&gt; 3 3 A 0.667 #&gt; 4 4 S 0.5 #&gt; 5 5 S 0.4 #&gt; 6 6 S 0.333 set.seed(31287931) # usamos la función map_df del paquete purrr map_df(1:3, ~lanzar(), .id = &quot;serie&quot;) %&gt;% ggplot(aes(x = log(num_lanzamiento), y = frec_rel, color = as.character(serie))) + geom_hline(yintercept = 0.5, color = &quot;darkgray&quot;) + geom_line() + scale_x_continuous(&quot;lanzamiento&quot;, labels = exp, breaks = log(sapply(0:10, function(i) 2 ^ i))) + labs(color = &quot;serie&quot;, y = &quot;frecuencia relativa&quot;, title = &quot;1000 volados&quot;) La segunda observación empírica es que, cuando el modelo de resultados equiprobables es apropiado: En el modelo de resultados equiprobables, la frecuencia relativa a largo plazo de ocurrencia de un evento es su probabilidad \\(P(A)\\) de ocurrencia En la interpretación frecuentista, la probabilidad de un evento \\(A\\) es la estimación de la frecuencia relativa de \\(A\\) cuando el número de ensayos tiende a infinito. Si denotemos la proporción de veces que ocurre \\(A\\) en \\(n\\) ensayos por \\(P_n(A)\\), se espera que \\(P_n(A)\\) sea cercana a la probabilidad \\(P(A)\\) si \\(n\\) es grande: \\[P_n(A) \\approx P(A)\\] Esta interpretación es crucial, pues es la única que realmente nos permite conectar nuestros modelos probabilísticos con observaciones empíricas. Ejemplo: Lanzamiento de dos monedas Supongamos que lanzamos dos monedas de manera simultánea. ¿Cuál es la probabilidad de que las dos monedas sean águila? Las dos son águila o no, así que la posibilidad es 1/2. Si definimos el resultado como el número de caras que se leen en las monedas, puede haber 0, 1 o 2. Si suponemos que estos tres resultados son igualmente probables, entonces la posibilidad es 1/3. A pesar de que las monedas son similares supongamos que se pueden distinguir, llamémoslas moneda 1 y moneda 2. Ahora tenemos cuatro posibles resultados: AA, AS, SA, SS, (la primer letra corresponde a la cara observada en la moneda 1 y la segunda en la moneda 2). Si estos 4 resultados son igualmente probables entonces el evento AA tiene posibilidad de 1/4. ¿Cuál es la respuesta correcta? En cuanto a teoría formal todas son correctas, cada escenario tiene supuestos de resultados equiprobables claramente enunciados y en base a éstos determina una probabilidad de manera correcta; sin embargo, los supuestos son diferentes y por tanto también las conclusiones. Únicamente una de las soluciones puede ser consistente con la interpretación frecuentista, ¿cuál es? La primer respuesta es incorrecta pues supone probabilidad cero para el evento águila y sol. La solución dos, por otra parte, no es fácil de desacreditar, así que realicemos el experimento para encontrar la respuesta: n &lt;- 10000 moneda_1 &lt;- sample(c(&quot;A&quot;, &quot;S&quot;), n, replace = TRUE) moneda_2 &lt;- sample(c(&quot;A&quot;, &quot;S&quot;), n, replace = TRUE) sum(moneda_1 == moneda_2 &amp; moneda_1 == &quot;A&quot;) / n #&gt; [1] 0.2482 La respuesta 3 es la correcta, y lo que vemos es que incluso cuando el supuesto de igualmente probables es apropiado a un cierto nivel de descripción determinado, este nivel no es algo que se pueda juzgar usando únicamente matemáticas, sino que se debe juzgar usando una interpretación de la probabilidad, como frecuencias relativas en ensayos. Más aún, hay ejemplos donde las monedas no son justas, o el sexo de un bebé recién nacido, donde el supuesto de equiprobabilidad no es adecuado. "],
["simulacion-para-el-calculo-de-probabilidades.html", "5.3 Simulación para el cálculo de probabilidades", " 5.3 Simulación para el cálculo de probabilidades En el ejemplo anterior vimos que puede ser sencillo usar simulación para calcular probabilidades, pues usando la interpretación de frecuencia relativa simplemente hace falta simular el experimento y contar los casos favorables entre el total de casos. Simulación para el cálculo de probabilidades Definir el modelo probabilístico: Definir el espacio de resultados. Describir el mecanismo que genera los resultados, esto incluye entender los pasos que involucran azar y los que no. Simular: Replicar el experimento con código, siguiendo el conocimiento elicitado en 1 y 2. Repetir el paso 3 \\(n\\) veces y calcular la frecuencia relativa de éxitos, estimando así la probabilidad. Para el paso 2 (resultados equiprobables), en R suelen ser de utilidad las funciones runif y sample(), revisa la ayuda de estas funciones. Ejemplo: comité Un comité de 5 personas será seleccionado de un grupo de 6 hombres y 9 mujeres. Si la selección es aleatoria, ¿cuál es la probabilidad de que el comité este conformado por 3 hombres y 2 mujeres? El espacio de resultados es \\(\\Omega = \\{M_1M_2M_3M_4M_5, M_2M_3M_4M_5M_6,... H_1,H_2H_3H_4H_5,H_2H_3H_4H_5H_6\\}\\). Se seleccionan 5 integrantes al azar del conjunto de hombres y mujeres, es claro que cada persona solo puee estar una vez. candidatos &lt;- c(paste(&quot;M&quot;, 1:9, sep = &quot;_&quot;), paste(&quot;H&quot;, 1:6, sep = &quot;_&quot;)) sample(candidatos, 5, replace = FALSE) #&gt; [1] &quot;M_9&quot; &quot;M_2&quot; &quot;M_8&quot; &quot;M_3&quot; &quot;M_6&quot; comite &lt;- function(){ candidatos &lt;- c(paste(&quot;M&quot;, 1:9, sep = &quot;_&quot;), paste(&quot;H&quot;, 1:6, sep = &quot;_&quot;)) comite &lt;- sample(candidatos, 5, replace = FALSE) n_mujeres &lt;- sum(substr(comite, 1, 1) == &quot;M&quot;) n_mujeres == 2 } rerun(1000, comite()) %&gt;% flatten_dbl() %&gt;% mean() #&gt; [1] 0.223 Ejemplo: La ruina del jugador Un jugador tiene $100, y va a apostar en un juego donde la probabilidad de ganar es p = 0.47 (e.g. una ruleta 18/38), si gana recibe el doble de lo que arriesgó, si no gana pierde todo lo que apostó. Cada vez que juega puede apostar cualquier cantidad siempre y cuando aún cuente con dinero. El jugador dejará de jugar cuando su capital sea $0 o cuando gane $200. El jugador busca una estrategia que le ayude a aumentar su probabilidad de ganar y te pregunta: ¿Cuál es la probabilidad de ganar si apuesto en incrementos de $5 cada vez que apuesto? Siguiendo los pasos enunciados: Cada elemento del espacio de resultados es una sucesión \\(\\omega_1, \\omega_2, \\omega_3, \\ldots\\) donde cada \\(\\omega_i\\) es \\(G\\) o \\(P\\) (gana o pierde). El jugador juega mientras tenga capital y este sea menor a $200, el monto de la apuesta está fijo en $5, no importa el capital en cada momento. La componente aleatoria involucra si gana cada uno de los juegos y esto ocurre con probabilidad 0.47. apostar &lt;- function(dinero = 100, apuesta = 5, tope = 200) { while (0 &lt; dinero &amp; dinero &lt; tope) { if (sample(1:38, 1) &lt;= 18) { dinero &lt;- dinero + apuesta } else { dinero &lt;- dinero - apuesta } } dinero &gt; 0 } set.seed(9923) n_juegos &lt;- 5000 juegos &lt;- rerun(n_juegos, apostar()) %&gt;% flatten_dbl() mean(juegos) #&gt; [1] 0.1126 # incrementos de 50? juegos &lt;- rerun(n_juegos, apostar(apuesta = 50)) %&gt;% flatten_dbl() mean(juegos) #&gt; [1] 0.454 La solución analítica la pueden leer en este documento de caminatas aleatorias: p &lt;- 0.474 1 - (1 - (p / (1 - p)) ^ (100 / 5)) / (1 - (p / (1 - p)) ^ (200 / 5)) # apostando de 5 en 5 #&gt; [1] 0.1108707 1 - (1 - (p / (1 - p)) ^ (100 / 50)) / (1 - (p / (1 - p)) ^ (200 / 50)) # apostando de 50 en 50 #&gt; [1] 0.4481402 Cumpleaños. ¿Cuántas personas debe haber en un salón para que la probabilidad de encontrar 2 con el mismo cumpleaños sea mayor a 0.5? Supuestos: Mismo cumpleaños implica mismo día y mes. No hay años bisiestos. La probabilidad de que alguien nazca un día dado es la misma para todos los días del año. Chabelo (Monty Hall) Supongamos que estamos jugando las catafixias de Chabelo, en este juego hay 3 catafixias: 2 de ellas están vacías y una tiene un premio: El juego comienza cuando escoges una catafixia. A continuación Chabelo abre una catafixia vacía de las dos catafixias restantes. Tu eliges si te mantienes con tu catafixia o cambias a la otra que continúa cerrada. Chabelo abre tu segunda elección de catafixia y se revela si ganaste. ¿Cuál es la probabilidad de que ganes si cambias de catafixia? Urna: 10 personas (con nombres distintos) escriben sus nombres y los ponen en una urna, después seleccionan un nombre (al azar). Sea A el evento en el que ninguna persona selecciona su nombre, ¿Cuál es la probabilidad del evento A? Supongamos que hay 3 personas con el mismo nombre, ¿Cómo calcularías la probabilidad del evento A en este nuevo experimento? El señor J. tiene 2 cachorros, el mayor es hembra. ¿Cuál es la probabilidad de que los dos sean hembra? La señora K. tiene 2 cachorros, al menos uno es macho. ¿Cuál es la probabilidad de que los dos sean macho? Espacios equiprobables continuos Podemos generalizar las definiciones de equiprobable al caso continuo, como ejemplo supongamos que se lanza un dardo a un tablero cuadrandgular de lado 2, ¿cuál es la probabilidad de que el dardo caiga en el círculo de radio 1 inscrito en un cuadrado de lado 2? tablero &lt;- ggplot() + ggforce::geom_circle(aes(x0 = 0, y0 = 0, r = 1)) + geom_rect(aes(xmin = -1, xmax = 1, ymin = -1, ymax = 1), fill = &quot;white&quot;, color = &quot;black&quot;, alpha = 0.5) + coord_equal() ggsave(&quot;img/tablero.png&quot;, tablero, width = 3, height = 3) knitr::include_graphics(&quot;img/tablero.png&quot;) En este caso usamos áreas relativas para calcular la probabilidad: denotemos C al evento tal que el dardo cae en el círculo, entonces: \\[P(B) = \\frac{Área(B)}{Área(\\Omega)}\\] ¿Y simulando? dentro_circunferencia &lt;- function(){ x &lt;- runif(1) * sample(c(-1, 1), 1) y &lt;- runif(1) * sample(c(-1, 1), 1) sqrt(x ^ 2 + y ^ 2) &lt; 1 } rerun(10000, dentro_circunferencia()) %&gt;% flatten_dbl() %&gt;% mean() #&gt; [1] 0.787 dardos &lt;- tibble(x = runif(1000, -1, 1), y = runif(1000, -1, 1), en_circulo = sqrt(x ^ 2 + y ^ 2) &lt; 1) tablero_dardos &lt;- tablero + geom_point(data = dardos, aes(x, y, color = en_circulo), alpha = 0.5, show.legend = FALSE) ggsave(&quot;img/tablero_dardos.png&quot;, tablero_dardos, width = 3, height = 3) knitr::include_graphics(&quot;img/tablero_dardos.png&quot;) ¿Qué defectos puedes ver en este modelo probabilístico para el lanzamiento de un dardo? "],
["modelos-de-probabilidad-definicion-general.html", "5.4 Modelos de probabilidad (definición general)", " 5.4 Modelos de probabilidad (definición general) En muchos casos, el modelo equiprobable (discreto o continuo) no es tan fácil adaptar a problemas particulares de modelación probabilística. Por ejemplo: En el problema del dardo, como la mayor parte de la gente apunta hacia el centro, regiones centrales deberían tener probabilidad mayor que regiones cerca del borde. Si sacamos una pelota al azar de una bolsa revuelta, y las pelotas son de distintos tamaños, entonces las probabilidades de extraer cada pelota son diferentes. Modelos apropiados para estos experimentos son más complicados, pues no tenemos la simetría que nos da asignaciones automáticas de probabilidades. 5.4.1 Espacios discretos En el caso discreto, podríamos poner: Si los resultados posibles son \\(\\omega_1,\\ldots, \\omega_n\\), asignamos probabilidades \\(p_1\\ldots p_n\\) a cada resultado (pueden ser distintas), La probabilidad de un evento \\(A\\) es la suma de las probabilidades \\(p_i\\) de los elementos que están contenidos en \\(A\\). 5.4.1.1 Ejemplo: bolsa acumulada de lotería Imaginemos que tenemos una lotería tipo Melate. Para simplificar, pensemos que se escogen 3 números del 1 al 10, y que tenemos 200 concursantes. ¿Cuál es la probabilidad de la bolsa de este concurso se acumule (nadie tenga la combinación ganadora)? Podemos resolver este problema con conteo, pero veamos como hacerlo simulando. seleccionar_combinacion &lt;- function(){ sample(1:10, 3) %&gt;% sort } acumula_bolsa &lt;- function(n_concursantes = 200){ combinacion_ganadora &lt;- sample(1:10, 3) %&gt;% sort boletos &lt;- rerun(n_concursantes, seleccionar_combinacion()) map_lgl(boletos, ~ all(. == combinacion_ganadora)) %&gt;% any } # probabilidad de que alguien gane set.seed(99244) prob_ganador &lt;- rerun(500, acumula_bolsa()) %&gt;% flatten_lgl %&gt;% mean # probabilidad de acumulación 1 - prob_ganador #&gt; [1] 0.206 ¿Qué problema ves con este ejemplo? En realidad, la elección de los concursantes no es aleatoria. Existen números favoritos (por ejemplo, el 7 o el 13), patrones que atraen a concursantes (patrones aritméticos, formas en el boleto de melate, selección de números según fechas de cumpleaños, etc.) ¿Qué tanto puede afectar esta elección consciente? Intenamos una variación simple: supongamos que la probabilidad de escoger el número 7 es más alta que otros números. seleccionar_combinacion &lt;- function(prob = rep(1, 10)){ sample(1:10, 3, prob = prob) %&gt;% sort } # el 7 es 5 veces más probable: p_numeros &lt;- c(rep(1,6), 5, rep(1,3)) acumula_bolsa &lt;- function(n_concursantes = 200, prob = rep(1, 10)){ combinacion_ganadora &lt;- sample(1:10, 3) %&gt;% sort boletos &lt;- rerun(n_concursantes, seleccionar_combinacion(prob = prob)) map_lgl(boletos, ~ all(. == combinacion_ganadora)) %&gt;% any } # probabilidad de que alguien gane prob_ganador &lt;- rerun(500, acumula_bolsa(prob = p_numeros)) %&gt;% flatten_lgl %&gt;% mean # probabilidad de acumulación 1 - prob_ganador #&gt; [1] 0.408 5.4.1.2 Ejemplo: comité Supongamos que el proceso de selección del comité tiene sesgo, las mujeres se seleccionan con mayor probabilidad que los hombres: comite &lt;- function(){ candidatos &lt;- c(paste(&quot;M&quot;, 1:9, sep = &quot;_&quot;), paste(&quot;H&quot;, 1:6, sep = &quot;_&quot;)) comite &lt;- sample(candidatos, 5, replace = FALSE, prob = c(rep(2, 9), rep(1, 6))) n_mujeres &lt;- sum(substr(comite, 1, 1) == &quot;M&quot;) n_mujeres == 2 } rerun(1000, comite()) %&gt;% flatten_dbl() %&gt;% mean() #&gt; [1] 0.086 5.4.2 Espacios continuos En el caso de espacio de resultados continuos, también quisiéramos tener un concepto de resultados no equiprobables. Por ejemplo, para el dardo en el tablero, es más realista pensar que la probabilidad de que el dardo caiga en un segmento de la zona central no es la misma a que caiga en un segmento de igual área en las orillas. tablero_zonas &lt;- tablero + geom_rect(aes(xmin = -1, xmax = -0.8, ymin = -1, ymax = -0.8), fill = &quot;red&quot;, alpha = 0.5) + geom_rect(aes(xmin = -.1, xmax = 0.1, ymin = -0.1, ymax = 0.1), fill = &quot;red&quot;, alpha = 0.5) ggsave(&quot;img/tablero_zonas.png&quot;, tablero_zonas, width = 3, height = 3) knitr::include_graphics(&quot;img/tablero_zonas.png&quot;) La definición de probabilidad como área relativa no se puede usar en estos casos, sin embargo, el enfoque de simulación se continúa manteniendo. Comencemos con el caso de un dardo univariado. En este caso, la probabilidad se calcula como longitud relativa. La probabilidad de que el dardo caiga en el intervalo \\([a,b]\\subset [0,1]\\) es \\[P([a,b]) = \\frac{b-a}{1-0} = b-a\\] Y nótese ahora que podemos escribir este cálculo como la integral de una constante: \\[P([a, b]) = \\frac{b-a}{1} = \\int_a^b 1dx\\] donde clarametne \\(P([0,1]) = 1.\\) Ahora, si el dardo cae en ciertas zonas con mayor probabilidad podemos perturbar la función que integramos para asignar mayor probabilidad en zonas donde es más probable que el dardo caiga. Esto implica introducir una función \\(f\\), que llamamos densidad de probabilidad, cuya integral nos de valores de probabilidad: ggplot(tibble(x = c(0 , 1)), aes(x)) + stat_function(fun = dbeta, args = list(shape1 = 2, shape2 = 2)) + geom_rect(data = NULL, aes(xmin = 0, xmax = 1, ymin = 0, ymax = 1), fill = &quot;red&quot;, alpha = 0.2) \\[P([a,b])=\\int_a^bf(x)dx\\] Nótese que la integral sobre \\([0,1]\\) debe ser 1 (probabilidad de que el dardo caiga entre 0 y 1). Podemos calcular probabilidades con simulación, por ejemplo la probabilidad de x en [0.2, 0.5]: curva &lt;- function(){ # Este método es simulación por rechazo x &lt;- runif(1) y &lt;- runif(1) * 1.5 while (dbeta(x, 2, 2) &lt; y) { x &lt;- runif(1) y &lt;- runif(1) * 2.5 } x } sims_x &lt;- rerun(5000, curva()) %&gt;% flatten_dbl() mean(sims_x &gt; 0.2 &amp; sims_x &lt; 0.5) #&gt; [1] 0.3954 Consideramos la siguiente gráfica para ayudar en la intuición del método: los puntos seleccionados por encima de la función de densidad son rechazados, de manera que es claro que la probabilidad que estimamos arriba de caer en el intervalo de interés es el área bajo la curva (integral) de nuestra función de densidad: tibble(x = runif(1000), y = runif(1000) * 1.5, dentro = dbeta(x, 2, 2) &gt; y, en_int = dentro * (x &gt; 0.2 &amp; x &lt; 0.5), cat = case_when(!dentro ~ &quot;a&quot;, dentro &amp; en_int ~ &quot;b&quot;, TRUE ~ &quot;c&quot;)) %&gt;% ggplot() + stat_function(fun = dbeta, args = list(shape1 = 2, shape2 = 2)) + geom_point(aes(x, y, color = cat), alpha = 0.5, show.legend = FALSE) "],
["probabilidad-definicion-matematica.html", "5.5 Probabilidad: definición matemática", " 5.5 Probabilidad: definición matemática Podemos cubrir todos los casos que hemos visto hasta ahora (y otros adicionales) con la siguiente definición de probabilidad: Supongamos que tenemos un espacio de resultados \\(\\Omega\\), y que todos los eventos de interés están representados como subconjuntos de \\(\\Omega\\). Podemos pensar en \\(\\Omega\\) como una representación de todas las situaciones que pueden ocurrir, no suponemos que es finito, ni que los eventos son igualmente probables. Las reglas de la probabilidad involucran relaciones lógicas entre eventos; estas se traducen a relaciones de conjuntos. Por ejemplo, si C es el evento que ocurre si sucede A o si sucede B, entonces el conjunto de maneras en las que ocurre C es la unión del conjunto de maneras en que ocurre A y el conjunto de maneras en que ocurre B. Veamos como se traduce de eventos a conjuntos Lenguaje de eventos Lenguaje de conjuntos Notación de conjuntos Espacio de resultados conjunto universal \\(\\Omega\\) evento subconjunto de \\(\\Omega\\) \\(A,B,C,...\\) evento imposible conjunto vacío \\(\\emptyset\\) no A, opuesto de A complemento de A \\(A^c\\) A o B unión de A y B \\(A\\cup B\\) tanto A como B intersección de A y B \\(AB,A\\cap B\\) A y B mutuamente excluyentes A y B disjuntos \\(AB=\\emptyset\\) si A entonces B A es subconjunto de B \\(A\\subset B\\) Particiones y axiomas de probabilidad Decimos que un conjunto de \\(n\\) eventos \\(B_1,...,B_n\\) es una partición del evento \\(B\\) si \\(B=B_1 \\cup B_2 \\cup \\cdot\\cdot\\cdot \\cup B_n\\) y los eventos \\(B_1,...,B_n\\) son mutuamente excluyentes. Ahora podemos definir probabilidad: Una función \\(P\\) es una función de probabilidad si satisface las siguientes condiciones: Un valor de probabilidad debe ser no-negativo: \\[P(B) \\geq 0\\] para cualquier evento \\(B\\) La suma de las probabilidades a través de todos los posibles eventos en el espacio de resultados debe ser 1 (i.e. uno de los eventos en el espacio de resultados debe ocurrir). \\[P(\\Omega) = 1\\] Si \\(B_1,...,B_n\\) es una partición del evento \\(B\\) entonces, la probabilidad de que ocurra B es la suma de las probabilidades individuales: \\[P(B)=P(B_1)+P(B_2) + \\cdot\\cdot\\cdot +P(B_n)\\] Propiedades de la función de probabilidad: \\(P(A^c) = 1 - P(A)\\) \\(P(\\emptyset)=0\\) Si \\(A \\subset B\\) entonces \\(P(A) \\le P(B)\\) \\(0\\le P(A) \\le 1\\) La regla general de la suma: \\(P(A \\cup B) = P(A) + P(B) - P(A \\cap B)\\) "],
["variables-aleatorias.html", "5.6 Variables aleatorias", " 5.6 Variables aleatorias A partir de un experimento aleatorio se pueden definir muchas preguntas de probabilidad, por ejemplo, en el caso de la ruina del jugador podríamos preguntarnos: las ganancias después del tercer juego, probabilidad de ganar, duración del experimento (cuántos juegos se jugaron antes de alcanzar las reglas de término). Sin embargo, muchas veces nos centramos en estudiar un solo aspecto numérico del experimento. La variable aleatoria \\(X\\) es un mapeo entre el espacio de resultados y los números reales. Este enfoque tiene dos ventajas importantes: Simplifica muchas veces el ejercicio de modelación, pues en lugar de tener que entender y modelar la totalidad del experimento aleatorio, podemos concentrarnos en propiedades de la función \\(X\\). Usando probabilidades asociadas a la función \\(X\\) podemos resumir aspectos de interés el experimento aleatorio. El uso de variables aleatorias nos permite usar álgebra para derivar resultados y representar cómputos de manera conveniente. Ejemplo Supongamos que nuestro experimento aleatorio es tirar un dado 10 veces. Este experimento aleatorio tiene \\(10^6\\) posibles resultados. Supongamos que nos interesa principlamente \\(X =\\) número de seises que obtuvimos en le experimento. Entonces es posible demostrar (o puedes estimar con simulación), que las probabilidades asociadas a \\(X\\) podemos escribirlas como: X_prob &lt;- tibble(X = seq(0, 10)) %&gt;% mutate(prob = dbinom(X, 10, 1/6), prob_redondear = round(prob, 3)) X_prob #&gt; # A tibble: 11 x 3 #&gt; X prob prob_redondear #&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 0 0.162 0.162 #&gt; 2 1 0.323 0.323 #&gt; 3 2 0.291 0.291 #&gt; 4 3 0.155 0.155 #&gt; 5 4 0.0543 0.054 #&gt; 6 5 0.0130 0.013 #&gt; 7 6 0.00217 0.002 #&gt; 8 7 0.000248 0 #&gt; 9 8 0.0000186 0 #&gt; 10 9 0.000000827 0 #&gt; 11 10 0.0000000165 0 Y con esta función podemos resolver otros problemas de interés sin tener que recurrir al modelo probabilístico completo. Por ejemplo, contesta la siguientes preguntas (puedes usar simulación si es necesario) : ¿Cuál es la probabilidad de que al jugar este juego obtengamos 2 o menos seises? ¿Cuál es la probabilidad de que tiremos un número par de seises? Si repetimos este juego 5 veces, ¿cuál es la probabilidad de obtener un número total de seises mayor a 5? Distribución de probabilidad En general, la distribución de probabilidad de una variable aleatoria \\(X\\) es la función que asigna a cada evento \\(X\\in A\\) una probabilidad \\(P(X\\in A)\\). A los eventos \\(X \\in A\\) les llamamos eventos asociados a una variable aleatoria. Nótese que no todos los eventos posibles asociados son de la forma \\(X\\in A\\) para una variable aleatoria fija. Ejemplo En el ejemplo anterior calculamos \\(P(X \\in \\{ 0, 1, 2 \\} = P(X \\geq 2)\\) y \\(P(X \\in \\{0,2,4,6,8,10\\}).\\) Sin embargo, el evento “tiramos al menos un 3” no se puede escribir en la forma \\(P(X\\in A)\\). Este tipo de eventos siempre está relacionado con el número de seises que obtuvimos en el experimento. Como vimos arriba, si tenemos una variable aleatoria que toma un número finito de valores, las probabilidades \\(P(X\\in A)\\) pueden calcularse sumando probabilidades individuales de los valores en A: \\[P(X\\in A) = \\sum_{a \\in A} P(X = a)\\] Y una argumento similar se puede utilizar para variables que toman un número infinito pero numerable de valores (por ejemplo, enteros de 0 a infinito). Variables aleatorias continuas Consideremos el ejemplo del dardo sesgado unidimensional que vimos arriba. Para este experimento aleatorio, definimos la variable aleatoria \\(X =\\) posición del dardo en el intervalo \\([0,1]\\), y propusimos un modelo donde las probabilidades se calculan integrando: \\[P(X\\in [a,b]) = \\int_a^b f(x)\\, dx\\] En general, para cualquier subconjunto \\(A\\subset [0,1]\\) podemos definir la integral que defina la función de destribución como: \\[P(X\\in A) = \\int_A f(x)\\, dx\\] que se calcula sumando las probabilidades de los intervalos individuales que componen \\(A\\) Ejemplo Si queremos calcular la probabilidad de que el dardo segado caiga en los extremos, por ejemplo en \\([0,0.1]\\) o \\([0.9,1]\\), podemos hacer \\[A = [0,0.1]\\cup[0.9,1]\\] y calcular \\[P(X\\in A) = \\int_0^{0.1} f(x)\\, dx + \\int_{0.9}^1 f(x)\\, dx\\] La función de distribución acumulada contiene la misma información que la función de distribución y se define como \\[P(X \\le x)\\] con la ventaja de que la definición aplica tanto al caso discreto como en el caso continuo. Ejemplo Calculamos la función de distribución acumulada para el ejemplo anterior: X_prob %&gt;% mutate(fda = cumsum(prob)) #&gt; # A tibble: 11 x 4 #&gt; X prob prob_redondear fda #&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 0 0.162 0.162 0.162 #&gt; 2 1 0.323 0.323 0.485 #&gt; 3 2 0.291 0.291 0.775 #&gt; 4 3 0.155 0.155 0.930 #&gt; 5 4 0.0543 0.054 0.985 #&gt; 6 5 0.0130 0.013 0.998 #&gt; 7 6 0.00217 0.002 1.000 #&gt; 8 7 0.000248 0 1.000 #&gt; 9 8 0.0000186 0 1.000 #&gt; 10 9 0.000000827 0 1.000 #&gt; 11 10 0.0000000165 0 1.000 Pregunta: ¿cómo recuperamos la probabilidades de cada valor a partir de la función de distribución acumulada? Esperanza La esperanza (valor esperado o media) de una variable aleatoria \\(X\\), es la media de la distribución \\(X\\), esto es, \\[E(X)=\\sum_{x\\in \\Omega_x} x P(X=x)\\] el promedio de todos los posibles valores de \\(X\\) ponderados por sus probabilidades. Por ejemplo, si \\(X\\) toma únicamente dos posibles valores, \\(a,b\\) con probabilidad \\(P(a)\\) y \\(P(b)\\) entonces \\[E(X)=aP(a)+bP(b).\\] Ejemplo: Supongamos que \\(X\\) es el valor que se produce cuando tiro un dado justo. Entonces, \\[E(X)=1\\cdot P(X=1) +2\\cdot P(X=2) +3\\cdot P(X=3) +4\\cdot P(X=4) +5\\cdot P(X=5) +6\\cdot P(X=6) = 3.5\\] Lo que nos dice que si tiramos el dado muchas veces deberíamos esperar que el promedio de las tiradas sea cercano a 3.5. Esperanza como un promedio cuando n es grande. Si vemos las probabilidades de los valores de \\(X\\) como una aproximación de frecuencias relativas cuando n es grande, entonces \\(E(X)\\) es aproximadamente el valor promedio del valor de \\(X\\) cuando n es grande. x &lt;- rnorm(10000, mean = 10) mean(x) #&gt; [1] 9.997833 La esperanza cumple las siguientes reglas: Constantes. La esperanza de una variable aleatoria constante es su valor constante, \\[E(c) = c\\] Indicadoras. Si \\(I_A\\) es la función indicadora del evento \\(A\\), \\[E(I_A) = P(A)\\] Funciones. Típicamente, \\(E[g(X)]\\ne g[E(X)]\\), pero \\[E[g(X)] = \\sum_{x \\in \\Omega_X} g(x) P(X=x)\\] Factores constantes. Para una constante c, \\[E(cX)=cE(X)\\] Adición. Para cualquier par de variables aleatorias \\(X\\), \\(Y\\), \\[E(X+Y) = E(X)+E(Y)\\] Multiplicación. Típicamente \\(E(XY) \\ne E(X)E(Y)\\), pero si \\(X\\) y \\(Y\\) son independientes, entonces \\[E(XY)=E(X)E(Y)\\] Varianza y desviación estándar Si intentamos predecir el valor de una variable aleatoria usando su media \\(E(X)=\\mu\\), vamos a fallar por una cantidad aleatoria \\(X-\\mu\\). Suele ser importante tener una idea de que tan grande será esta desviación. Debido a que \\[E(X-\\mu) = E(X)-\\mu=0\\] es necesario considerar la diferencia absoluta o la diferencia al cuadrado de \\(X-\\mu\\) con el fin de tener una idea del tamaño de la desviación sin importar el signo de esta. Varianza y desviación estándar. La varianza de \\(X\\), denotada \\(var(X)=\\sigma^2\\) es la media de la desviación cuadrada de \\(X\\) respecto a su valor esperado \\(\\mu=E(X)\\): \\[\\sigma^2(X)=var(X)=E(X-\\mu)^2\\] La desviación estándar de \\(X\\), es la raíz cuadrada de la varianza de X: \\[\\sigma(X)=sd(X)=\\sqrt{var(X)}\\] Intuitivamente, \\(sd(X)\\) es una medida de la dispersión de la distribución de \\(X\\) alrededor de su media. Debido a que la varianza es el valor central de la distribución de \\((X-\\mu)^2\\), su raíz cuadrada da una idea del tamaño típico de la desviación absoluta \\(|X-\\mu|\\). Notemos que \\(E(X)\\), \\(var(X)\\) y \\(sd(X)\\) están determinados por \\(X\\), de tal manera que si dos variables aleatorias tienen la misma distribución, también tienen la misma media, varianza y desviación estándar. "],
["bootstrap-no-parametrico.html", "Sección 6 Bootstrap no paramétrico", " Sección 6 Bootstrap no paramétrico Bootstrap: to pull oneself up by one’s bootstrap Estas notas se desarrollaron con base en Efron and Tibshirani (1993), adicionalmente se usaron ideas de Hesterberg (2015). Abordamos los siguientes temas: Muestras aleatorias El principio del plug-in Bootstrap no paramétrico Ejemplos: componentes principales, ajuste de curvas, muestreo. Ejemplo: aspirina y ataques cardiacos Como explican Efron y Tibshirani, las explicaciones del bootstrap y otros métodos computacionales involucran las ideas de inferencia estadistica tradicional. Las ideas báscias no han cambiado pero la implementación de estas sí. Los tres conceptos básicos de estadística son: Recolección de datos, resúmenes (o descriptivos) de datos y inferencia. Veamos un ejemplo de estos conceptos y como se introduce bootstrap. Usaremos datos de un estudio clínico de consumo de aspirina y ataques cardiacos cuyos resultados fueron publicados en el New York Times: Planteamiento: se diseñó un estudio para investigar si el consumo de dosis bajas de aspirina podía prevenir los ataques cardiacos en hombres sanos en edad media. Recolección de datos: Se hizo un diseño controlado, aleatorizado y doblemente ciego. La mitad de los participantes recibieron aspirina y la otra mitad un placebo. Descriptivos: Las estadísticas descriptivas del artículo son muy sencillas: grupo ataques cardiacos sujetos aspirina 104 11037 placebo 189 11034 De manera que la estimación del cociente de las tasas es \\[\\hat{\\theta}=\\frac{104/11037}{189/11034} = 0.55\\] En la muestra los individuos que toman aspirina tienen únicamente 55% de los ataques que los que toman placebo. Sin embargo, lo que realmente nos interesa es \\(\\theta\\): el cociente de tasas que observaríamos si pudieramos tratar a todos los hombres y no únicamente a una muestra. Inferencia: aquí es donde recurrimos a inferencia estadística: \\[0.43 &lt; \\theta &lt; 0.70\\] El verdadero valor de \\(\\theta\\) esta en el intervalo \\((0.43,0.70)\\) con una confianza del 95%. Ahora, el bootstrap es un método de simulación basado en datos para inferencia estadística. La idea detrás es que si una muestra es una aproximación de la población que la generó, entoces podemos hacer muestreos de la muestra para calcular una estadística de interés y medir la exactitud en la misma. En este caso tenemos los resultados del experimento en la variable trial. trial &lt;- tibble(patient = 1:22071, group = ifelse(patient &lt;= 11037, &quot;aspirin&quot;, &quot;control&quot;), heart_attack = c(rep(TRUE, 104), rep(FALSE, 10933), rep(TRUE, 189), rep(FALSE, 10845))) trial #&gt; # A tibble: 22,071 x 3 #&gt; patient group heart_attack #&gt; &lt;int&gt; &lt;chr&gt; &lt;lgl&gt; #&gt; 1 1 aspirin TRUE #&gt; 2 2 aspirin TRUE #&gt; 3 3 aspirin TRUE #&gt; 4 4 aspirin TRUE #&gt; 5 5 aspirin TRUE #&gt; 6 6 aspirin TRUE #&gt; 7 7 aspirin TRUE #&gt; 8 8 aspirin TRUE #&gt; 9 9 aspirin TRUE #&gt; 10 10 aspirin TRUE #&gt; # … with 22,061 more rows Y calculamos el cociente de las tasas: summary_stats &lt;- trial %&gt;% group_by(group) %&gt;% summarise( n_attacks = sum(heart_attack), n_subjects = n(), rate_attacks = n_attacks / n_subjects * 100 ) summary_stats #&gt; # A tibble: 2 x 4 #&gt; group n_attacks n_subjects rate_attacks #&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; #&gt; 1 aspirin 104 11037 0.942 #&gt; 2 control 189 11034 1.71 ratio_rates &lt;- summary_stats$rate_attacks[1] / summary_stats$rate_attacks[2] ratio_rates #&gt; [1] 0.550115 Después calculamos 1000 replicaciones bootstrap de \\(\\hat{\\theta*}\\) boot_ratio_rates &lt;- function(){ boot_sample &lt;- trial %&gt;% group_by(group) %&gt;% sample_frac(replace = TRUE) rates &lt;- boot_sample %&gt;% summarise(rate_attacks = sum(heart_attack) / n()) %&gt;% pull(rate_attacks) rates[1] / rates[2] } boot_ratio_rates &lt;- rerun(1000, boot_ratio_rates()) %&gt;% flatten_dbl() Las replicaciones se pueden utilizar para hacer inferencia de los datos. Por ejemplo, podemos estimar el error estándar de \\(\\theta\\): se &lt;- sd(boot_ratio_rates) comma(se) #&gt; [1] &quot;0.067&quot; Referencias "],
["el-principio-del-plug-in.html", "6.1 El principio del plug-in", " 6.1 El principio del plug-in Muestras aleatorias Supongamos que tenemos una población finita o universo \\(U\\), conformado por unidades individuales con propiedades que nos gustaría aprender (opinión política, nivel educativo, preferencias de consumo, …). Debido a que es muy difícil y caro examinar cada unidad en \\(U\\) seleccionamos una muestra aleatoria. Una muestra aleatoria de tamaño \\(n\\) se define como una colección de \\(n\\) unidades \\(u_1,...,u_n\\) seleccionadas aleatoriamente de una población \\(U\\). Una vez que se selecciona una muestra aleatoria, los datos observados son la colección de medidas \\(x_1,...,x_n\\), también denotadas \\(\\textbf{x} = (x_1,...,x_n)\\). En principio, el proceso de muestreo es como sigue: Seleccionamos \\(n\\) enteros de manera independiente (con probabilidad \\(1/N\\)), cada uno de ellos asociado a un número entre \\(1\\) y \\(N\\). Los enteros determinan las unidades que seleccionamos y tomamos medidas a cada unidad. En la práctica el proceso de selección suele ser más complicado y la definición de la población \\(U\\) suele ser deficiente; sin embargo, el marco conceptual sigue siendo útil para entender la inferencia estadística. Nuestra definición de muestra aleatoria comprende muestras con y sin reemplazo: muestra sin reemplazo: una unidad particular puede aparecer a lo más una vez. muestra con reemplazo: permite que una unidad aparezca más de una vez. Es más común tomar muestras sin remplazo, sin embargo, para hacer inferencia suele ser más sencillo permitir repeticiones (muestreo con remplazo) y si el tamaño de la muestra \\(n\\) es mucho más chico que la población \\(N\\), la probabilidad de muestrear la misma unidad más de una vez es chica. El caso particular en el que obtenemos las medidas de interés de cada unidad en la población se denomina censo, y denotamos al conjunto de datos observados de la población por \\(\\mathcal{X}\\). En general, no nos interesa simplemente describir la muestra que observamos sino que queremos aprender acerca de la población de donde se seleccionó la muestra: El objetivo de la inferencia estadística es expresar lo que hemos aprendido de la población \\(\\mathcal{X}\\) a partir de los datos observados \\(\\textbf{x}\\). Ejemplo: ENLACE Veamos un ejemplo donde tomamos una muestra de 300 escuelas primarias del Estado de México, de un universo de 7,518 escuelas, library(estcomp) # universo enlace &lt;- enlacep_2013 %&gt;% janitor::clean_names() %&gt;% mutate(id = 1:n()) %&gt;% select(id, cve_ent, turno, tipo, esp_3 = punt_esp_3, esp_6 = punt_esp_6, n_eval_3 = alum_eval_3, n_eval_6 = alum_eval_6) %&gt;% na.omit() %&gt;% filter(esp_3 &gt; 0, esp_6 &gt; 0, n_eval_3 &gt; 0, n_eval_6 &gt; 0, cve_ent == &quot;15&quot;) glimpse(enlace) #&gt; Observations: 7,518 #&gt; Variables: 8 #&gt; $ id &lt;int&gt; 38570, 38571, 38572, 38573, 38574, 38575, 38576, 38577,… #&gt; $ cve_ent &lt;chr&gt; &quot;15&quot;, &quot;15&quot;, &quot;15&quot;, &quot;15&quot;, &quot;15&quot;, &quot;15&quot;, &quot;15&quot;, &quot;15&quot;, &quot;15&quot;, &quot;… #&gt; $ turno &lt;chr&gt; &quot;MATUTINO&quot;, &quot;MATUTINO&quot;, &quot;MATUTINO&quot;, &quot;MATUTINO&quot;, &quot;MATUTI… #&gt; $ tipo &lt;chr&gt; &quot;INDêGENA&quot;, &quot;INDêGENA&quot;, &quot;INDêGENA&quot;, &quot;INDêGENA&quot;, &quot;INDêGE… #&gt; $ esp_3 &lt;dbl&gt; 550, 485, 462, 646, 508, 502, 570, 441, 597, 648, 535, … #&gt; $ esp_6 &lt;dbl&gt; 483, 490, 385, 613, 452, 500, 454, 427, 582, 614, 443, … #&gt; $ n_eval_3 &lt;dbl&gt; 13, 17, 9, 33, 26, 10, 65, 82, 132, 16, 16, 6, 10, 27, … #&gt; $ n_eval_6 &lt;dbl&gt; 19, 18, 9, 26, 35, 13, 49, 78, 110, 18, 9, 2, 12, 34, 9… set.seed(16021) n &lt;- 300 # muestra enlace_muestra &lt;- sample_n(enlace, n) %&gt;% mutate(clase = &quot;muestra&quot;) para cada escuela en la muestra consideremos la medida \\(x_i\\), conformada por el promedio de las calificaciones en español de los alumnos de tercero y sexto de primaria (prueba ENLACE 2010): \\[x_i=(esp_{3i}, esp_{6i})\\] En este ejemplo contamos con un censo de las escuelas y tomamos la muestra aleatoria de la tabla de datos general, sin embargo, es común contar únicamente con la muestra. Para español 3o de primaria la media observada es mean(enlace_muestra$esp_3) #&gt; [1] 554.5867 La media muestral es una estadística descriptiva de la muestra, pero también la podemos usar para describir a la población de escuelas. Al usar la media observada para describir a la población estamos aplicando el principio del plug-in que dice que una característica dada de una distribución puede ser aproximada por la equivalente evaluada en la distribución empírica de una muestra aleatoria. Función de distribución empírica Dada una muestra aleatoria de tamaño \\(n\\) de una distribución de probabilidad \\(P\\), la función de distribución empírica \\(P_n\\) se define como la distribución que asigna probabilidad \\(1/n\\) a cada valor \\(x_i\\) con \\(i=1,2,...,n\\). En otras palabras, \\(P_n\\) asigna a un conjunto \\(A\\) en el espacio muestral de \\(x\\) la probabilidad empírica: \\[P_n(A)=\\#\\{x_i \\in A \\}/n\\] La función de distribución empírica \\(P_n\\) es una estimación de la distribución completa \\(P\\), por lo que una manera inmediata de estimar aspectos de \\(P\\) (e.g media o mediana) es calcular el aspecto correspondiente de \\(P_n\\). En cuanto a la teoría el principio del plug-in está soportado por el teorema de Glivenko Cantelli: Sea \\(X_1,...,X_n\\) una muestra aleatoria de una distribución \\(P\\), con distribución empírica \\(P_n\\) entonces \\[\\sup_{x \\in \\mathcal{R}}|P_n(x)-P(x)|\\to_p0\\] casi seguro. Regresando al ejemplo de las escuelas, comparemos la distribución poblacional y la distribución empírica. enlace_long &lt;- enlace %&gt;% mutate(clase = &quot;población&quot;) %&gt;% bind_rows(enlace_muestra) %&gt;% gather(grado, calif, esp_3:esp_6) ggplot(enlace_long, aes(x = calif)) + geom_histogram(aes(y = ..density..), binwidth = 20, fill = &quot;darkgray&quot;) + facet_grid(grado ~ clase) Podemos comparar la función de distribución acumulada empírica y la función de distribución acumulada poblacional: En la siguiente gráfica la curva roja representa la función de distribución acumulada empírica y la curva con relleno gris la función de distribución acumulada poblacional. ggplot() + stat_ecdf(data = filter(enlace_long, clase == &quot;población&quot;), aes(x = calif, ymin = 0, ymax = ..y..), geom = &quot;ribbon&quot;, pad = TRUE, alpha = 0.5, fill = &quot;gray&quot;, color = &quot;darkgray&quot;) + stat_ecdf(data = filter(enlace_long, clase == &quot;muestra&quot;), aes(x = calif), geom = &quot;step&quot;, color = &quot;red&quot;) + facet_grid(~ grado) + labs(color = &quot;&quot;) Cuando la variable de interés toma pocos valores es fácil ver la distribución empírica, supongamos que la medición de las unidades que nos interesa es la variable tipo de escuela, entonces la distribución empírica en la muestra es table(enlace_muestra$tipo) / n #&gt; #&gt; CONAFE GENERAL INDêGENA PARTICULAR #&gt; 0.01000000 0.82000000 0.02333333 0.14666667 Vale la pena notar que pasar de la muestra desagregada a la distribución empírica (lista de valores y la proporción que ocurre cada una en la muestra) no conlleva ninguna pérdida de información: el vector de frecuencias observadas es un estadístico suficiente para la verdadera distribución. Esto quiere decir que toda la información de \\(P\\) contenida en el vector de observaciones \\(\\textbf{x}\\) está también contenida en \\(P_n\\). Nota: el teorema de suficiencia asume que las observaciones \\(\\textbf{x}\\) son una muestra aleatoria de la distribución \\(P\\), este no es siempre el caso (e.g. si tenemos una serie de tiempo). Parámetros y estadísticas Cuando aplicamos teoría estadística a problemas reales, es común que las respuestas estén dadas en términos de distribuciones de probabilidad. Por ejemplo, podemos preguntarnos que tan correlacionados están los resultados de las pruebas de español correspondientes a 3o y 6o. Si conocemos la distribución de probabilidad \\(P\\) contestar esta pregunta es simplemente cuestión de aritmética, el coeficiente de correlación poblacional esta dado por: \\[corr(y,z) = \\frac{\\sum_{j=1}^{N}(Y_j - \\mu_y)(Z_j-\\mu_z)} {[\\sum_{j=1}^{N}(Y_j - \\mu_y)^2\\sum_{j=1}^{N}(Z_j - \\mu_z)^2]^{1/2}}\\] en nuestro ejemplo \\((Y_j,Z_j)\\) son el j-ésimo punto en la población de escuelas primarias \\(\\mathcal{X}\\), \\(\\mu_y=\\sum Y_j/3311\\) y \\(\\mu_z=\\sum Z_j/3311\\). ggplot(enlace, aes(x = esp_3, y = esp_6)) + geom_point(alpha = 0.5) cor(enlace$esp_3, enlace$esp_6) %&gt;% round(2) #&gt; [1] 0.49 Si no tenemos un censo debemos inferir, podríamos estimar la correlación \\(corr(y,z)\\) a través del coeficiente de correlación muestral: \\[\\hat{corr}(y,z) = \\frac{\\sum_{j=1}^{n}(y_j - \\hat{\\mu}_y)(z_j-\\hat{\\mu}_z)} {[\\sum_{j=1}^{n}(y_j - \\hat{\\mu}_y)^2\\sum_{j=1}^{n}(z_j - \\hat{\\mu}_z)^2]^{1/2}}\\] recordando que la distribución empírica es una estimación de la distribución completa. cor(enlace_muestra$esp_3, enlace_muestra$esp_6) #&gt; [1] 0.4392921 Al igual que la media esto es una estimación plug-in. Otros ejemplos son: Supongamos que nos interesa estimar la mediana de las calificaciones de español para 3^o de primaria: median(enlace_muestra$esp_3) #&gt; [1] 554.5 Supongamos que nos interesa estimar la probabilidad de que la calificación de español de una escuela sea mayor a 700: \\[\\theta=\\frac{1}{N}\\sum_{j=1}^N I_{\\{Y_i&gt;700\\}}\\] donde \\(I_{\\{\\cdot\\}}\\) es la función indicadora. La estimación plug-in de \\(\\hat{\\theta}\\) sería: sum(enlace_muestra$esp_3 &gt; 700) / n #&gt; [1] 0.01333333 Ejemplo: dado Observamos 100 lanzamientos de un dado, obteniendo la siguiente distribución empírica: dado &lt;- read.table(&quot;data/dado.csv&quot;, header = TRUE, quote = &quot;\\&quot;&quot;) prop.table(table(dado$x)) #&gt; #&gt; 1 2 3 4 5 6 #&gt; 0.13 0.19 0.10 0.17 0.14 0.27 En este caso no tenemos un censo, solo contamos con la muestra. Una pregunta de inferencia que surge de manera natural es si el dado es justo, esto es, si la distribución que generó esta muestra tiene una distribución \\(P = (1/6, 1/6, 1/6,1/6, 1/6, 1/6)\\). Para resolver esta pregunta, debemos hacer inferencia de la distribución empírica. Antes de proseguir repasemos dos conceptos importantes: parámetros y estadísticos: Un parámetro es una función de la distribución de probabilidad \\(\\theta=t(P)\\), mientras que una estadística es una función de la muestra \\(\\textbf{x}\\). Por ejemplo, la \\(corr(x,y)\\) es un parámetro de \\(P\\) y \\(\\hat{corr}(x,y)\\) es una estadística con base en \\(\\textbf{x}\\) y \\(\\textbf{y}\\). Entonces: El principio del plug-in es un método para estimar parámetros a partir de muestras; la estimación plug-in de un parámetro \\(\\theta=t(P)\\) se define como: \\[\\hat{\\theta}=t(P_n).\\] Es decir, estimamos la función \\(\\theta = t(P)\\) de la distribución de probabilidad \\(P\\) con la misma función aplicada en la distribución empírica \\(\\hat{\\theta}=t(P_n)\\). ¿Qué tan bien funciona el principio del plug-in? Suele ser muy bueno cuando la única información disponible de \\(P\\) es la muestra \\(\\textbf{x}\\), bajo esta circunstancia \\(\\hat{\\theta}=t(P_n)\\) no puede ser superado como estimador de \\(\\theta=t(P)\\), al menos no en el sentido asintótico de teoría estadística \\((n\\to\\infty)\\). El principio del plug-in provee de una estimación más no habla de precisión: usaremos el bootstrap para estudiar el sesgo y el error estándar del estimador plug-in \\(\\hat{\\theta}=t(P_n)\\). Distribuciones muestrales y errores estándar La distribución muestral de una estadística es la distribución de probabilidad de la misma, considerada como una variable aleatoria. Es así que la distribución muestral depende de: 1) La distribución poblacional, 2) la estadística que se está considerando, y 3) la muestra aleatoria: cómo se seleccionan las unidades de la muestra y cuántas. En teoría para obtener la distribución muestral uno seguiría los siguientes pasos: Selecciona muestras de una población (todas las posibles o un número infinito de muestras). Calcula la estadística de interés para cada muestra. La distribución de la estadística es la distribución muestral. library(LaplacesDemon) library(patchwork) # En este ejemplo la población es una mezcla de normales pob_plot &lt;- ggplot(data_frame(x = -15:20), aes(x)) + stat_function(fun = dnormm, args = list(p = c(0.3, 0.7), mu = c(-2, 8), sigma = c(3.5, 3)), alpha = 0.8) + geom_vline(aes(color = &quot;mu&quot;, xintercept = 5), alpha = 0.5) + scale_colour_manual(values = c(&#39;mu&#39; = &#39;red&#39;), name = &#39;&#39;, labels = expression(mu)) + labs(x = &quot;&quot;, subtitle = &quot;Población&quot;, color = &quot;&quot;) samples &lt;- data_frame(sample = 1:3) %&gt;% mutate( sims = rerun(3, rnormm(30, p = c(0.3, 0.7), mu = c(-2, 8), sigma = c(3.5, 3))), x_bar = map_dbl(sims, mean)) muestras_plot &lt;- samples %&gt;% unnest() %&gt;% ggplot(aes(x = sims)) + geom_histogram(binwidth = 2, alpha = 0.5, fill = &quot;darkgray&quot;) + geom_vline(xintercept = 5, color = &quot;red&quot;, alpha = 0.5) + geom_segment(aes(x = x_bar, xend = x_bar, y = 0, yend = 0.8), color = &quot;blue&quot;) + xlim(-15, 20) + facet_wrap(~ sample) + geom_text(aes(x = x_bar, y = 0.95, label = &quot;bar(x)&quot;), parse = TRUE, color = &quot;blue&quot;, alpha = 0.2, hjust = 1) + labs(x = &quot;&quot;, subtitle = &quot;Muestras&quot;) samples_dist &lt;- data_frame(sample = 1:10000) %&gt;% mutate( sims = rerun(10000, rnormm(100, p = c(0.3, 0.7), mu = c(-2, 8), sigma = c(3.5, 3))), mu_hat = map_dbl(sims, mean)) dist_muestral_plot &lt;- ggplot(samples_dist, aes(x = mu_hat)) + geom_density(adjust = 2) + labs(x = &quot;&quot;, subtitle = expression(&quot;Distribución muestral de &quot;~hat(mu))) + geom_vline(xintercept = 5, color = &quot;red&quot;, alpha = 0.5) (pob_plot | plot_spacer()) / (muestras_plot | dist_muestral_plot) Para hacer inferencia necesitamos describir la forma de la distribución muestral, es natural pensar en la desviación estándar pues es una medida de la dispersión de la distribución de la estadística alrededor de su media: El error estándar es la desviación estándar de la distribución muestral de una estadística. Ejemplo: el error estándar de una media Supongamos que \\(x\\) es una variable aleatoria que toma valores en los reales con distribución de probabilidad \\(P\\). Denotamos por \\(\\mu_P\\) y \\(\\sigma_P^2\\) la media y varianza de \\(P\\), \\[\\mu_P = E_P(x),\\] \\[\\sigma_P^2=var_P(x)=E_P[(x-\\mu_P)^2]\\] en la notación enfatizamos la dependencia de la media y varianza en la distribución \\(P\\). Ahora, sea \\((x_1,...,x_n)\\) una muestra aleatoria de \\(P\\), de tamaño \\(n\\), la media de la muestra \\(\\bar{x}=\\sum_{i=1}^nx_i/n\\) tiene: esperanza \\(\\mu_P\\), varianza \\(\\sigma_P^2/n\\). En palabras: la esperanza de \\(\\bar{x}\\) es la misma que la esperanza de \\(x\\), pero la varianza de \\(\\bar{x}\\) es \\(1/n\\) veces la varianza de \\(x\\), así que entre mayor es la \\(n\\) tenemos una mejor estimación de \\(\\mu_P\\). En el caso de la media \\(\\bar{x}\\), el error estándar, que denotamos \\(se_P(\\bar{x})\\), es la raíz de la varianza de \\(\\bar{x}\\), \\[se_P(\\bar{x}) = [var_P(\\bar{x})]^{1/2}= \\sigma_P/ \\sqrt{n}.\\] En este punto podemos usar el principio del plug-in, simplemente sustituimos \\(P_n\\) por \\(P\\) y obtenemos, primero, una estimación de \\(\\sigma_P\\): \\[\\hat{\\sigma}=\\hat{\\sigma}_{P_n} = \\bigg\\{\\frac{1}{n}\\sum_{i=1}^n(x_i-\\bar{x})^2\\bigg\\}^{1/2}\\] de donde se sigue la estimación del error estándar: \\[\\hat{se}(\\bar{x})=\\hat{\\sigma}_{P_n}/\\sqrt{n}=\\bigg\\{\\frac{1}{n^2}\\sum_{i=1}^n(x_i-\\bar{x})^2\\bigg\\}^{1/2}\\] Notemos que usamos el principio del plug-in en dos ocasiones, primero para estimar la esperanza \\(\\mu_P\\) mediante \\(\\mu_{P_n}\\) y luego para estimar el error estándar \\(se_P(\\bar{x})\\). Consideramos los datos de ENLACE edo. de México (enlace), y la columna de calificaciones de español 3o de primaria (esp_3). Selecciona una muestra de tamaño \\(n = 10, 100, 1000\\). Para cada muestra calcula media y el error estándar de la media usando el principio del plug-in: \\(\\hat{\\mu}=\\bar{x}\\), y \\(\\hat{se}(\\bar{x})=\\hat{\\sigma}_{P_n}/\\sqrt{n}\\). Ahora aproximareos la distribución muestral, para cada tamaño de muestra \\(n\\): simula 10,000 muestras aleatorias, ii) calcula la media en cada muestra, iii) Realiza un histograma de la distribución muestral de las medias (las medias del paso anterior) iv) aproxima el error estándar calculando la desviación estándar de las medias del paso ii. Calcula el error estándar de la media para cada tamaño de muestra usando la información poblacional (ésta no es una aproximación), usa la fórmula: \\(se_P(\\bar{x}) = \\sigma_P/ \\sqrt{n}\\). ¿Cómo se comparan los errores estándar correspondientes a los distintos tamaños de muestra? ¿Por qué bootstrap? En el caso de la media \\(\\hat{\\theta}=\\bar{x}\\) la aplicación del principio del plug-in para el cálculo de errores estándar es inmediata; sin embargo, hay estadísticas para las cuáles no es fácil aplicar este método. El método de aproximarlo con simulación, como lo hicimos en el ejercicio de arriba no es factible pues en la práctica no podemos seleccionar un número arbitrario de muestras de la población, sino que tenemos únicamente una muestra. La idea del bootstrap es replicar el método de simulación para aproximar el error estándar, esto es seleccionar muchas muestras y calcular la estadística de interés en cada una, con la diferencia que las muestras se seleccionan de la distribución empírica a falta de la distribución poblacional. "],
["el-estimador-bootstrap-del-error-estandar.html", "6.2 El estimador bootstrap del error estándar", " 6.2 El estimador bootstrap del error estándar Entonces, los pasos para calcular estimador bootstrap del error estándar son: Tenemos una muestra aleatoria \\(\\textbf{x}=(x_1,x_2,...,x_n)\\) proveniente de una distribución de probabilidad desconocida \\(P\\), Seleccionamos muestras aleatorias con reemplazo de la distribución empírica. Calculamos la estadística de interés para cada muestra: \\[\\hat{\\theta}=s(\\textbf{x})\\] la estimación puede ser la estimación plug-in \\(t(P_n)\\) pero también puede ser otra. La distribución de la estadística es la distribución bootstrap, y el estimador bootstrap del error estándar es la desviación estándar de la distribución bootstrap. dist_empirica &lt;- tibble(id = 1:30, obs = samples$sims[[1]]) dist_empirica_plot &lt;- ggplot(dist_empirica, aes(x = obs)) + geom_histogram(binwidth = 2, alpha = 0.5, fill = &quot;darkgray&quot;) + geom_vline(aes(color = &quot;mu&quot;, xintercept = 5), alpha = 0.5) + geom_vline(aes(xintercept = samples$x_bar[1], color = &quot;x_bar&quot;), alpha = 0.8, linetype = &quot;dashed&quot;) + xlim(-15, 20) + geom_vline(xintercept = 5, color = &quot;red&quot;, alpha = 0.5) + labs(x = &quot;&quot;, subtitle = expression(&quot;Distribución empírica&quot;~P[n])) + scale_colour_manual(values = c(&#39;mu&#39; = &#39;red&#39;, &#39;x_bar&#39; = &#39;blue&#39;), name = &#39;&#39;, labels = c(expression(mu), expression(bar(x)))) samples_boot &lt;- data_frame(sample_boot = 1:3) %&gt;% mutate( sims_boot = rerun(3, sample(dist_empirica$obs, replace = TRUE)), x_bar_boot = map_dbl(sims_boot, mean) ) muestras_boot_plot &lt;- samples_boot %&gt;% unnest() %&gt;% ggplot(aes(x = sims_boot)) + geom_histogram(binwidth = 2, alpha = 0.5, fill = &quot;darkgray&quot;) + geom_vline(aes(xintercept = samples$x_bar[1]), color = &quot;blue&quot;, linetype = &quot;dashed&quot;, alpha = 0.8) + geom_vline(xintercept = 5, color = &quot;red&quot;, alpha = 0.5) + geom_segment(aes(x = x_bar_boot, xend = x_bar_boot, y = 0, yend = 0.8), color = &quot;black&quot;) + xlim(-15, 20) + facet_wrap(~ sample_boot) + geom_text(aes(x = x_bar_boot, y = 0.95, label = &quot;bar(x)^&#39;*&#39;&quot;), parse = TRUE, color = &quot;black&quot;, alpha = 0.3, hjust = 1) + labs(x = &quot;&quot;, subtitle = &quot;Muestras bootstrap&quot;) boot_dist &lt;- data_frame(sample = 1:10000) %&gt;% mutate( sims_boot = rerun(10000, sample(dist_empirica$obs, replace = TRUE)), mu_hat_star = map_dbl(sims_boot, mean)) boot_muestral_plot &lt;- ggplot(boot_dist, aes(x = mu_hat_star)) + geom_histogram(alpha = 0.5, fill = &quot;darkgray&quot;) + labs(x = &quot;&quot;, subtitle = expression(&quot;Distribución bootstrap de &quot;~hat(mu)^&#39;*&#39;)) + geom_vline(xintercept = 5, color = &quot;red&quot;, alpha = 0.5) + geom_vline(aes(xintercept = samples$x_bar[1]), color = &quot;blue&quot;, linetype = &quot;dashed&quot;, alpha = 0.8) (dist_empirica_plot | plot_spacer()) / (muestras_boot_plot | boot_muestral_plot) Describamos la notación y conceptos: Definimos una muestra bootstrap como una muestra aleatoria de tamaño \\(n\\) que se obtiene de la distribución empírica \\(P_n\\) y la denotamos \\[\\textbf{x}^* = (x_1^*,...,x_n^*).\\] La notación de estrella indica que \\(\\textbf{x}^*\\) no son los datos \\(\\textbf{x}\\) sino una versión de remuestreo de \\(\\textbf{x}\\). Otra manera de frasearlo: Los datos bootsrtap \\(x_1^*,...,x_n^*\\) son una muestra aleatoria de tamaño \\(n\\) seleccionada con reemplazo de la población de \\(n\\) objetos \\((x_1,...,x_n)\\). A cada muestra bootstrap \\(\\textbf{x}^*\\) le corresponde una replicación \\(\\hat{\\theta}^*=s(\\textbf{x}^*).\\) el estimador bootstrap de \\(se_P(\\hat{\\theta})\\) se define como: \\[se_{P_n}(\\hat{\\theta}^*)\\] en otras palabras, la estimación bootstrap de \\(se_P(\\hat{\\theta})\\) es el error estándar de \\(\\hat{\\theta}\\) para conjuntos de datos de tamaño \\(n\\) seleccionados de manera aleatoria de \\(P_n\\). La fórmula \\(se_{P_n}(\\hat{\\theta}^*)\\) no existe para casi ninguna estimación diferente de la media, por lo que recurrimos a la técnica computacional bootstrap: Algoritmo bootstrap para estimar errores estándar Selecciona \\(B\\) muestras bootstrap independientes: \\[\\textbf{x}^{*1},..., \\textbf{x}^{*B}\\]. Evalúa la replicación bootstrap correspondiente a cada muestra bootstrap: \\[\\hat{\\theta}^{*b}=s(\\textbf{x}^{*b})\\] para \\(b=1,2,...,B.\\) Estima el error estándar \\(se_P(\\hat{\\theta})\\) usando la desviación estándar muestral de las \\(B\\) replicaciones: \\[\\hat{se}_B = \\bigg\\{\\frac{\\sum_{b=1}^B[\\hat{\\theta}^{*}(b)-\\hat{\\theta}^*(\\cdot)]^2 }{B-1}\\bigg\\}^{1/2}\\] donde \\[\\hat{\\theta}^*(\\cdot)=\\sum_{b=1}^B \\theta^{*}(b)/B \\]. Notemos que: La estimación bootstrap de \\(se_{P}(\\hat{\\theta})\\), el error estándar de una estadística \\(\\hat{\\theta}\\), es un estimador plug-in que usa la función de distribución empírica \\(P_n\\) en lugar de la distribución desconocida \\(P\\). Conforme el número de replicaciones \\(B\\) aumenta \\[\\hat{se}_B\\approx se_{P_n}(\\hat{\\theta})\\] este hecho equivale a decir que la desviación estándar empírica se acerca a la desviación estándar poblacional conforme crece el número de muestras. La población en este caso es la población de valores \\(\\hat{\\theta}^*=s(x^*)\\). Al estimador de bootstrap ideal \\(se_{P_n}(\\hat{\\theta})\\) y su aproximación \\(\\hat{se}_B\\) se les denota estimadores bootstrap no paramétricos ya que estan basados en \\(P_n\\), el estimador no paramétrico de la población \\(P\\). Ejemplo: Error estándar bootstrap de una media mediaBoot &lt;- function(x){ # x: variable de interés # n: número de replicaciones bootstrap n &lt;- length(x) muestra_boot &lt;- sample(x, size = n, replace = TRUE) mean(muestra_boot) # replicacion bootstrap de theta_gorro } thetas_boot &lt;- rerun(10000, mediaBoot(enlace_muestra$esp_3)) %&gt;% flatten_dbl() sd(thetas_boot) #&gt; [1] 3.238793 y se compara con \\(\\hat{se}(\\bar{x})\\) (estimador plug-in del error estándar): se &lt;- function(x) sqrt(sum((x - mean(x)) ^ 2)) / length(x) se(enlace_muestra$esp_3) #&gt; [1] 3.264511 Nota: Conforme \\(B\\) aumenta \\(\\hat{se}_{B}(\\bar{x})\\to \\{\\sum_{i=1}^n(x_i - \\bar{x})^2 / n \\}^{1/2}\\), se demuestra con la ley débil de los grandes números. Considera el coeficiente de correlación muestral entre la calificación de \\(y=\\)esp_3 y la de \\(z=\\)esp_6: \\(\\hat{corr}(y,z)=0.9\\). ¿Qué tan precisa es esta estimación? Variación en distribuciones bootstrap En el proceso de estimación bootstrap hay dos fuentes de variación pues: La muestra original se selecciona con aleatoriedad de una población. Las muestras bootstrap se seleccionan con aleatoriedad de la muestra original. Esto es: La estimación bootstrap ideal es un resultado asintótico \\(B=\\infty\\), en esta caso \\(\\hat{se}_B\\) iguala la estimación plug-in \\(se_{P_n}\\). En el proceso de bootstrap podemos controlar la variación del segundo aspecto, conocida como implementación de muestreo Monte Carlo, y la variación Monte Carlo decrece conforme incrementamos el número de muestras. Podemos eliminar la variación Monte Carlo si seleccionamos todas las posibles muestras con reemplazo de tamaño \\(n\\), hay \\({2n-1}\\choose{n}\\) posibles muestras y si seleccionamos todas obtenemos \\(\\hat{se}_\\infty\\) (bootstrap ideal), sin embargo, en la mayor parte de los problemas no es factible proceder así. set.seed(8098) pob_plot &lt;- ggplot(data_frame(x = -15:20), aes(x)) + stat_function(fun = dnormm, args = list(p = c(0.3, 0.7), mu = c(-2, 8), sigma = c(3.5, 3)), alpha = 0.8) + geom_vline(aes(color = &quot;mu&quot;, xintercept = 5), alpha = 0.5) + scale_colour_manual(values = c(&#39;mu&#39; = &#39;red&#39;), name = &#39;&#39;, labels = expression(mu)) + labs(x = &quot;&quot;, y = &quot;&quot;, subtitle = &quot;Población&quot;, color = &quot;&quot;) + theme(axis.text.y = element_blank()) samples &lt;- data_frame(sample = 1:6) %&gt;% mutate( sims = rerun(6, rnormm(50, p = c(0.3, 0.7), mu = c(-2, 8), sigma = c(3.5, 3))), x_bar = map_dbl(sims, mean)) means_boot &lt;- function(n, sims) { rerun(n, mean(sample(sims, replace = TRUE))) %&gt;% flatten_dbl() } samples_boot &lt;- samples %&gt;% mutate( medias_boot_30_1 = map(sims, ~means_boot(n = 30, .)), medias_boot_30_2 = map(sims, ~means_boot(n = 30, .)), medias_boot_1000_1 = map(sims, ~means_boot(n = 1000, .)), medias_boot_1000_2 = map(sims, ~means_boot(n = 1000, .)) ) emp_dists &lt;- samples_boot %&gt;% unnest(cols = sims) %&gt;% rename(obs = sims) emp_dists_plots &lt;- ggplot(emp_dists, aes(x = obs)) + geom_histogram(binwidth = 2, alpha = 0.5, fill = &quot;darkgray&quot;) + geom_vline(aes(color = &quot;mu&quot;, xintercept = 5), alpha = 0.5, show.legend = FALSE) + geom_vline(aes(xintercept = x_bar, color = &quot;x_bar&quot;), show.legend = FALSE, alpha = 0.8, linetype = &quot;dashed&quot;) + xlim(-15, 20) + geom_vline(xintercept = 5, color = &quot;red&quot;, alpha = 0.5) + labs(x = &quot;&quot;, y = &quot;&quot;, subtitle = expression(&quot;Distribución empírica&quot;~P[n])) + scale_colour_manual(values = c(&#39;mu&#39; = &#39;red&#39;, &#39;x_bar&#39; = &#39;blue&#39;), name = &#39;&#39;, labels = c(expression(mu), expression(bar(x)))) + facet_wrap(~ sample, ncol = 1) + theme(strip.background = element_blank(), strip.text.x = element_blank(), axis.text.y = element_blank()) boot_dists_30 &lt;- samples_boot %&gt;% unnest(cols = c(medias_boot_30_1, medias_boot_30_2)) %&gt;% pivot_longer(cols = c(medias_boot_30_1, medias_boot_30_2), values_to = &quot;mu_hat_star&quot;, names_to = &quot;boot_trial&quot;, names_prefix = &quot;medias_boot_30_&quot;) boot_dists_30_plot &lt;- ggplot(boot_dists_30, aes(x = mu_hat_star)) + geom_histogram(alpha = 0.5, fill = &quot;darkgray&quot;) + labs(x = &quot;&quot;, y = &quot;&quot;, subtitle = expression(&quot;Distribución bootstrap B = 30&quot;)) + geom_vline(xintercept = 5, color = &quot;red&quot;, alpha = 0.5) + geom_vline(aes(xintercept = x_bar), color = &quot;blue&quot;, linetype = &quot;dashed&quot;, alpha = 0.8) + facet_grid(sample~boot_trial) + theme(strip.background = element_blank(), strip.text.y = element_blank(), axis.text.y = element_blank()) boot_dists_1000 &lt;- samples_boot %&gt;% unnest(cols = c(medias_boot_1000_1, medias_boot_1000_2)) %&gt;% pivot_longer(cols = c(medias_boot_1000_1, medias_boot_1000_2), values_to = &quot;mu_hat_star&quot;, names_to = &quot;boot_trial&quot;, names_prefix = &quot;medias_boot_1000_&quot;) boot_dists_1000_plot &lt;- ggplot(boot_dists_1000, aes(x = mu_hat_star)) + geom_histogram(alpha = 0.5, fill = &quot;darkgray&quot;) + labs(subtitle = expression(&quot;Distribución bootstrap B = 1000&quot;), x = &quot;&quot;, y = &quot;&quot;) + geom_vline(xintercept = 5, color = &quot;red&quot;, alpha = 0.5) + geom_vline(aes(xintercept = x_bar), color = &quot;blue&quot;, linetype = &quot;dashed&quot;, alpha = 0.8) + facet_grid(sample~boot_trial) + scale_colour_manual(values = c(&#39;mu&#39; = &#39;red&#39;, &#39;x_bar&#39; = &#39;blue&#39;), name = &#39;&#39;, labels = c(expression(mu), expression(bar(x)))) + theme(strip.background = element_blank(), strip.text.y = element_blank(), strip.text.x = element_blank(), axis.text.y = element_blank()) (pob_plot | plot_spacer() | plot_spacer()) / (emp_dists_plots | boot_dists_30_plot | boot_dists_1000_plot) + plot_layout(heights = c(1, 5)) En la siguiente gráfica mostramos 6 posibles muestras de tamaño 50 simuladas de la población, para cada una de ellas se graficó la distribución empírica y se se realizan histogramas de la distribución bootstrap con \\(B=30\\) y \\(B=1000\\), en cada caso hacemos dos repeticiones, notemos que cuando el número de muestras bootstrap es grande las distribuciones bootstrap son muy similares (para una muestra de la población dada), esto es porque disminuimos el erro Monte Carlo. También vale la pena recalcar que la distribución bootstrap está centrada en el valor observado en la muestra (línea azúl punteada) y no en el valor poblacional sin embargo la forma de la distribución es similar a lo largo de las filas. Entonces, ¿cuántas muestras bootstrap? Incluso un número chico de replicaciones bootstrap, digamos \\(B=25\\) es informativo, y \\(B=50\\) con frecuencia es suficiente para dar una buena estimación de \\(se_P(\\hat{\\theta})\\) (Efron and Tibshirani (1993)). Cuando se busca estimar error estándar Hesterberg (2015) recomienda \\(B=1000\\) muestras, o \\(B=10,000\\) muestras dependiendo la presición que se busque. seMediaBoot &lt;- function(x, B){ thetas_boot &lt;- rerun(B, mediaBoot(x)) %&gt;% flatten_dbl() sd(thetas_boot) } B_muestras &lt;- data_frame(n_sims = c(5, 25, 50, 100, 200, 400, 1000, 1500, 3000, 5000, 10000, 20000)) %&gt;% mutate(est = map_dbl(n_sims, ~seMediaBoot(x = enlace_muestra$esp_3, B = .))) #&gt; Warning: `data_frame()` is deprecated, use `tibble()`. #&gt; This warning is displayed once per session. B_muestras #&gt; # A tibble: 12 x 2 #&gt; n_sims est #&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 5 3.08 #&gt; 2 25 3.20 #&gt; 3 50 3.17 #&gt; 4 100 3.04 #&gt; 5 200 3.36 #&gt; 6 400 3.24 #&gt; 7 1000 3.17 #&gt; 8 1500 3.38 #&gt; 9 3000 3.27 #&gt; 10 5000 3.29 #&gt; 11 10000 3.27 #&gt; 12 20000 3.26 Referencias "],
["intervalos-de-confianza.html", "6.3 Intervalos de confianza", " 6.3 Intervalos de confianza Hasta ahora hemos discutido la idea detrás del bootstrap y como se puede usar para estimar errores estándar. Comenzamos con el error estándar pues es la manera más común para describir la precisión de una estadística. En términos generales, esperamos que \\(\\bar{x}\\) este a una distancia de \\(\\mu_P\\) menor a un error estándar el 68% del tiempo, y a menos de 2 errores estándar el 95% del tiempo. Estos porcentajes están basados el teorema central del límite que nos dice que bajo ciertas condiciones (bastante generales) de \\(P\\) la distribución de \\(\\bar{x}\\) se aproximará a una distribución normal: \\[\\bar{x} \\overset{\\cdot}{\\sim} N(\\mu_P,\\sigma_P^2/n)\\] Veamos algunos ejemplos de como funciona el Teorema del Límite Central, buscamos ver como se aproxima la distribución muestral de la media (cuando las observaciones provienen de distintas distribuciones) a una Normal conforme aumenta el tamaño de muestra. Para esto, aproximamos la distribución muestral de la media usando simulación de la población. Vale la pena observar que hay distribuciones que requieren un mayor tamaño de muestra \\(n\\) para lograr una buena aproximación (por ejemplo la log-normal), ¿a qué se debe esto? Para la opción de Elecciones tenemos una población de tamaño \\(N=143,437\\) y el objetivo es estimar la media del tamaño de la lista nominal de las casillas (datos de las elecciones presidenciales de 2012). Podemos ver como mejora la aproximación Normal de la distribución muestral conforme aumenta el tamaño de muestra \\(n\\); sin embargo, también sobresale que no es necesario tomar una muestra demasiado grande (\\(n = 60\\) ya es razonable). knitr::include_app(&quot;https://tereom.shinyapps.io/15-TLC/&quot;, height = &quot;1000px&quot;) En lo que sigue veremos distintas maneras de construir intervalos de confianza usando bootstrap. Un intervalo de confianza \\((1-2\\alpha)\\)% para un parámetro \\(\\theta\\) es un intervalo \\((a,b)\\) tal que \\(P(a \\le \\theta \\le b) = 1-2\\alpha\\) para todo \\(\\theta \\in \\Theta\\). Y comenzamos con la versión bootstrap del intervalo más popular. Intervalo Normal con error estándar bootstrap. El intervalo para \\(\\hat{\\theta}\\) con un nivel de confianza de \\(100\\cdot(1-2\\alpha)\\%\\) se define como: \\[(\\hat{\\theta}-z^{(1-\\alpha)}\\cdot \\hat{se}_B, \\hat{\\theta}+z^{(1-\\alpha)}\\cdot \\hat{se})\\]. donde \\(z^{(\\alpha)}\\) denota el percentil \\(100\\cdot \\alpha\\) de una distribución \\(N(0,1)\\). este intervalo está soportado por el Teorema Central del Límite, sin embargo, no es adecuado cuando \\(\\hat{\\theta}\\) no se distribuye aproximadamente Normal. 6.3.0.1 Ejemplo: kurtosis Supongamos que queremos estimar la kurtosis de una base de datos que consta de 799 tiempos de espera entre pulsasiones de un nervio (Cox, Lewis 1976). \\[\\hat{\\theta} = t(P_n) =\\frac{1/n \\sum_{i=1}^n(x_i-\\hat{\\mu})^3}{\\hat{\\sigma}^3}\\] library(ACSWR) data(&quot;nerve&quot;) head(nerve) #&gt; [1] 0.21 0.03 0.05 0.11 0.59 0.06 kurtosis &lt;- function(x){ n &lt;- length(x) 1 / n * sum((x - mean(x)) ^ 3) / sd(x) ^ 3 } theta_hat &lt;- kurtosis(nerve) theta_hat #&gt; [1] 1.757943 kurtosis_boot &lt;- function(x){ x_boot &lt;- sample(x, replace = TRUE) kurtosis(x_boot) } B &lt;- 10000 kurtosis &lt;- rerun(B, kurtosis_boot(nerve)) %&gt;% flatten_dbl() Usando el intervalo normal tenemos: li_normal &lt;- round(theta_hat - 1.96 * sd(kurtosis), 2) ls_normal &lt;- round(theta_hat + 1.96 * sd(kurtosis), 2) c(li_normal, ls_normal) #&gt; [1] 1.44 2.08 Una modificación común del intervalo normal es el intervalo t, estos intervalos son mejores en caso de muestras pequeñas (\\(n\\) chica). Intervalo \\(t\\) con error estándar bootstrap. Para una muestra de tamaño \\(n\\) el intervalo \\(t\\) con un nivel de confianza de \\(100\\cdot(1-2\\alpha)\\%\\) se define como: \\[(\\hat{\\theta}-t^{(1-\\alpha)}_{n-1}\\cdot \\hat{se}_B, \\hat{\\theta}+t^{(1-\\alpha)}_{n-1}\\cdot \\hat{se}_B)\\]. donde \\(t^{(\\alpha)}_{n-1}\\) denota denota el percentil \\(100\\cdot \\alpha\\) de una distribución \\(t\\) con \\(n-1\\) grados de libertad. n_nerve &lt;- length(nerve) li_t &lt;- round(theta_hat + qt(0.025, n_nerve - 1) * sd(kurtosis), 2) ls_t &lt;- round(theta_hat - qt(0.025, n_nerve - 1) * sd(kurtosis), 2) c(li_t, ls_t) #&gt; [1] 1.44 2.08 Los intervalos normales y \\(t\\) se valen de la estimación bootstrap del error estándar; sin embargo, el bootstrap se puede usar para estimar la función de distribución de \\(\\hat{\\theta}\\) por lo que no es necesario hacer supuestos distribucionales para \\(\\hat{\\theta}\\) sino que podemos estimarla como parte del proceso de construir intervalos de confianza. Veamos un histograma de las replicaciones bootstrap de \\(\\hat{\\theta}^*\\) library(gridExtra) nerve_kurtosis &lt;- tibble(kurtosis) hist_nerve &lt;- ggplot(nerve_kurtosis, aes(x = kurtosis)) + geom_histogram(binwidth = 0.05, fill = &quot;gray30&quot;) + geom_vline(xintercept = c(li_normal, ls_normal, theta_hat), color = c(&quot;black&quot;, &quot;black&quot;, &quot;red&quot;), alpha = 0.5) qq_nerve &lt;- ggplot(nerve_kurtosis) + geom_abline(color = &quot;red&quot;, alpha = 0.5) + stat_qq(aes(sample = kurtosis), dparams = list(mean = mean(kurtosis), sd = sd(kurtosis))) grid.arrange(hist_nerve, qq_nerve, ncol = 2, newpage = FALSE) En el ejemplo anterior el supuesto de normalidad parece razonable, veamos como se comparan los cuantiles de la estimación de la distribución de \\(\\hat{\\theta}\\) con los cuantiles de una normal: comma(q_kurt &lt;- quantile(kurtosis, probs = c(0.025, 0.05, 0.1, 0.9, 0.95, 0.975))) comma(qnorm(p = c(0.025, 0.05, 0.1, 0.9, 0.95, 0.975), mean = theta_hat, sd = sd(kurtosis))) #&gt; 2.5% 5% 10% 90% 95% 97.5% #&gt; &quot;1.4&quot; &quot;1.5&quot; &quot;1.5&quot; &quot;2.0&quot; &quot;2.0&quot; &quot;2.1&quot; #&gt; [1] &quot;1.4&quot; &quot;1.5&quot; &quot;1.5&quot; &quot;2.0&quot; &quot;2.0&quot; &quot;2.1&quot; Esto sugiere usar los cuantiles del histograma bootstrap para definir los límites de los intervalos de confianza: Percentiles. Denotemos por \\(G\\) la función de distribución acumulada de \\(\\hat{\\theta}^*\\) el intervalo percentil de \\(1-2\\alpha\\) se define por los percentiles \\(\\alpha\\) y \\(1-\\alpha\\) de \\(G\\) \\[(\\theta^*_{\\%,inf}, \\theta^*_{\\%,sup}) = (G^{-1}(\\alpha), G^{-1}(1-\\alpha))\\] Por definición \\(G^{-1}(\\alpha)=\\hat{\\theta}^*(\\alpha)\\), esto es, el percentil \\(100\\cdot \\alpha\\) de la distribución bootstrap, por lo que podemos escribir el intervalo bootstrap como \\[(\\theta^*_{\\%,inf}, \\theta^*_{\\%,sup})=(\\hat{\\theta}^*(\\alpha),\\hat{\\theta}^*(1-\\alpha))\\] ggplot(arrange(nerve_kurtosis, kurtosis)) + stat_ecdf(aes(x = kurtosis)) + geom_segment(data = data_frame(x = c(-Inf, -Inf, q_kurt[c(1, 6)]), xend = q_kurt[c(1, 6, 1, 6)], y = c(0.025, 0.975, 0, 0), yend = c(0.025, 0.975, 0.025, 0.975)), aes(x = x, xend = xend, y = y, yend = yend), color = &quot;red&quot;, size = 0.4, alpha = 0.5) + labs(x = &quot;Cuantiles muestrales&quot;, y = &quot;ecdf&quot;) Las expresiones de arriba hacen referencia a la situación bootstrap ideal donde el número de replicaciones bootstrap es infinito, en la práctica usamos aproximaciones. Y se procede como sigue: Intervalo percentil: Generamos B muestras bootstrap independientes \\(\\textbf{x}^{*1},..., \\textbf{x}^{*B}\\) y calculamos las replicaciones \\(\\hat{\\theta}^{*b}=s(x^{*b}).\\) Sea \\(\\hat{\\theta}^{*}_B(\\alpha)\\) el percentil \\(100\\cdot\\alpha\\) de la distribución empírica de \\(\\hat{\\theta}^{*}\\), y \\(\\hat{\\theta}^{*}_B(1-\\alpha)\\) el correspondiente al percentil \\(100\\cdot (1-\\alpha)\\), escribimos el intervalo de percentil \\(1-2\\alpha\\) como \\[(\\theta^*_{\\%,inf}, \\theta^*_{\\%,sup})\\approx(\\hat{\\theta}^*_B(\\alpha),\\hat{\\theta}^*_B(1-\\alpha))\\] ls_per &lt;- round(quantile(kurtosis, prob = 0.975), 2) li_per &lt;- round(quantile(kurtosis, prob = 0.025), 2) stringr::str_c(li_normal, ls_normal, sep = &quot;,&quot;) stringr::str_c(li_per, ls_per, sep = &quot;,&quot;) #&gt; [1] &quot;1.44,2.08&quot; #&gt; [1] &quot;1.42,2.07&quot; Si la distribución de \\(\\hat{\\theta}^*\\) es aproximadamente normal, entonces los intervalos normales y de percentiles serán similares. Con el fin de comparar los intervalos creamos un ejemplo de simulación (ejemplo tomado de Efron and Tibshirani (1993)), generamos una muestra de tamaño 10 de una distribución normal estándar, supongamos que el parámetro de interés es \\(e^{\\mu}\\) donde \\(\\mu\\) es la media poblacional. set.seed(137612) x &lt;- rnorm(10) boot_sim_exp &lt;- function(){ x_boot &lt;- sample(x, size = 10, replace = TRUE) exp(mean(x_boot)) } theta_boot &lt;- rerun(1000, boot_sim_exp()) %&gt;% flatten_dbl() theta_boot_df &lt;- data_frame(theta_boot) hist_emu &lt;- ggplot(theta_boot_df, aes(x = theta_boot)) + geom_histogram(fill = &quot;gray30&quot;, binwidth = 0.08) qq_emu &lt;- ggplot(theta_boot_df) + geom_abline(color = &quot;red&quot;, alpha = 0.5) + stat_qq(aes(sample = theta_boot), dparams = list(mean = mean(theta_boot), sd = sd(theta_boot))) grid.arrange(hist_emu, qq_emu, ncol = 2, newpage = FALSE) La distribución empírica de \\(\\hat{\\theta}^*\\) es asimétrica, por lo que no esperamos que coincidan los intervalos. # Normal round(exp(mean(x)) - 1.96 * sd(theta_boot), 2) #&gt; [1] 0.36 round(exp(mean(x)) + 1.96 * sd(theta_boot), 2) #&gt; [1] 1.6 #Percentil round(quantile(theta_boot, prob = 0.025), 2) #&gt; 2.5% #&gt; 0.53 round(quantile(theta_boot, prob = 0.975), 2) #&gt; 97.5% #&gt; 1.79 La inspección del histograma deja claro que la aproximación normal no es conveniente en este caso, veamos que ocurre cuando aplicamos la transformación logarítmica. hist_log &lt;- ggplot(data_frame(theta_boot), aes(x = log(theta_boot))) + geom_histogram(fill = &quot;gray30&quot;, binwidth = 0.08) qq_log &lt;- ggplot(data_frame(theta_boot)) + geom_abline(color = &quot;red&quot;, alpha = 0.5) + stat_qq(aes(sample = log(theta_boot)), dparams = list(mean = mean(log(theta_boot)), sd = sd(log(theta_boot)))) grid.arrange(hist_log, qq_log, ncol = 2, newpage = FALSE) Y los intervalos se comparan: # Normal round(mean(x) - 1.96 * sd(log(theta_boot)), 2) #&gt; [1] -0.63 round(mean(x) + 1.96 * sd(log(theta_boot)), 2) #&gt; [1] 0.58 #Percentil round(quantile(log(theta_boot), prob = 0.025), 2) #&gt; 2.5% #&gt; -0.63 round(quantile(log(theta_boot), prob = 0.975), 2) #&gt; 97.5% #&gt; 0.58 La transformación logarítmica convierte la distribución de \\(\\hat{\\theta}\\) en normal y por tanto los intervalos de \\(\\hat{\\phi}^*=log(\\hat{\\theta}^*)\\) son similares. La forma normal no es sorprendente pues \\(\\hat{\\phi}^*=\\bar{x}^*\\). Si mapeamos los intervalos normales calculados para \\(log(\\hat{\\theta}^*)\\) de regreso a la escala de \\(\\theta\\) obtenemos intervalos similares a los calculados para \\(\\hat{\\theta}^*\\) usando percentiles: exp(round(mean(x) - 1.96 * sd(log(theta_boot)), 2)) #&gt; [1] 0.5325918 exp(round(mean(x) + 1.96 * sd(log(theta_boot)), 2)) #&gt; [1] 1.786038 Podemos ver que el método de aplicar una transformación, calcular intervalos usando la normal y aplicar la transformación inversa para volver a la escala original genera intervalos de confianza atractivos, el problema con este método es que requiere que conozcamos la transformación adecuada para cada parámetro. Por otra parte, podemos pensar en el método del percentil como un algoritmo que incorpora la transformación de manera automática. Lema. Supongamos que la transformación \\(\\hat{\\phi}=m(\\hat{\\theta})\\) normaliza la distribución de \\(\\hat{\\theta}\\) de manera perfecta, \\[\\hat{\\phi} \\approx N(\\phi, c^2)\\] para alguna desviación estándar \\(c\\). Entonces el intervalo de percentil basado en \\(\\hat{\\theta}\\) es igual a \\[(m^{-1} (\\hat{\\phi}-z^{(1-\\alpha)}c), m^{-1}(\\hat{\\phi}-z^{(\\alpha)}c))\\] Se dice que el intervalo de confianza de percentiles es invariante a transformaciones. Existen otras alternativas al método del percentil y cubren otras fallas del intervalo normal. Por ejemplo, hay ocasiones en que \\(\\hat{\\theta}\\) tiene una distribución normal sesgada: \\[\\hat{\\theta} \\approx N(\\theta + sesgo, \\hat{se}^2)\\] en este caso no existe una transformación \\(m(\\theta)\\) que arregle el intervalo. Intervalos acelerados y corregidos por sesgo. Esta es una versión mejorada del intervalo de percentil, la denotamos \\(BC_{a}\\) (bias-corrected and accelerated). Usaremos un ejemplo de Efron and Tibshirani (1993), los datos constan de los resultados en dos pruebas espaciales de 26 niños con algún problema neurológico. Supongamos que queremos calcular un intervalo de confianza de 90% para \\(\\theta=var(A)\\). El estimador plugin es: \\[\\hat{\\theta}=\\sum_{i=1}^n(A_i-\\bar{A})^2/n\\] notemos que el estimador plug-in es ligeramente menor que el estimador usual insesgado: \\[\\hat{\\theta}=\\sum_{i=1}^n(A_i-\\bar{A})^2/(n-1)\\] library(bootstrap) ggplot(spatial) + geom_point(aes(A, B)) sum((spatial$A - mean(spatial$A)) ^ 2) / nrow(spatial) #&gt; [1] 171.534 sum((spatial$A - mean(spatial$A)) ^ 2) / (nrow(spatial) - 1) #&gt; [1] 178.3954 El método \\(BC_{a}\\) corrige el sesgo de manera automática, lo cuál es una de sus prinicipales ventajas comparado con el método del percentil. Los extremos en los intervalos \\(BC_{a}\\) están dados por percentiles de la distribución bootstrap, los percentiles usados dependen de dos números \\(\\hat{a}\\) y \\(\\hat{z}_0\\), que se denominan la aceleración y la corrección del sesgo: \\[BC_a : (\\hat{\\theta}_{inf}, \\hat{\\theta}_{sup})=(\\hat{\\theta}^*(\\alpha_1), \\hat{\\theta}^*(\\alpha_2))\\] donde \\[\\alpha_1= \\Phi\\bigg(\\hat{z}_0 + \\frac{\\hat{z}_0 + z^{(\\alpha)}}{1- \\hat{a}(\\hat{z}_0 + z^{(\\alpha)})}\\bigg)\\] \\[\\alpha_2= \\Phi\\bigg(\\hat{z}_0 + \\frac{\\hat{z}_0 + z^{(1-\\alpha)}}{1- \\hat{a}(\\hat{z}_0 + z^{(1-\\alpha)})}\\bigg)\\] y \\(\\Phi\\) es la función de distribución acumulada de la distribución normal estándar y \\(z^{\\alpha}\\) es el percentil \\(100 \\cdot \\alpha\\) de una distribución normal estándar. Notemos que si \\(\\hat{a}\\) y \\(\\hat{z}_0\\) son cero entonces \\(\\alpha_1=\\alpha\\) y \\(\\alpha_2=1-\\alpha\\), obteniendo así los intervalos de percentiles. El valor de la corrección por sesgo \\(\\hat{z}_0\\) se obtiene de la propoción de de replicaciones bootstrap menores a la estimación original \\(\\hat{\\theta}\\), \\[z_0=\\Phi^{-1}\\bigg(\\frac{\\#\\{\\hat{\\theta}^*(b) &lt; \\hat{\\theta} \\} }{B} \\bigg)\\] a grandes razgos \\(\\hat{z}_0\\) mide la mediana del sesgo de \\(\\hat{\\theta}^*\\), esto es, la discrepancia entre la mediana de \\(\\hat{\\theta}^*\\) y \\(\\hat{\\theta}\\) en unidades normales. Por su parte la aceleración \\(\\hat{a}\\) se refiere a la tasa de cambio del error estándar de \\(\\hat{\\theta}\\) respecto al verdadero valor del parámetro \\(\\theta\\). La aproximación estándar usual \\(\\hat{\\theta} \\approx N(\\theta, se^2)\\) supone que el error estándar de \\(\\hat{\\theta}\\) es el mismo para toda \\(\\hat{\\theta}\\), esto puede ser poco realista, en nuestro ejemplo, donde \\(\\hat{\\theta}\\) es la varianza si los datos provienen de una normal \\(se(\\hat{\\theta})\\) depende de \\(\\theta\\). Una manera de calcular \\(\\hat{a}\\) es \\[\\hat{a}=\\frac{\\sum_{i=1}^n (\\hat{\\theta}(\\cdot) - \\hat{\\theta}(i))^3}{6\\{\\sum_{i=1}^n (\\hat{\\theta}(\\cdot) - \\hat{\\theta}(i))^2\\}^{3/2}}\\] Los intervalos \\(BC_{a}\\) tienen 2 ventajas teóricas: Respetan transformaciones, esto nos dice que los extremos del intervalo se transforman de manera adecuada si cambiamos el parámetro de interés por una función del mismo. Su exactitud, los intervalos \\(BC_{a}\\) tienen precisión de segundo orden, esto es, los errores de cobertura se van a cero a una tasa de 1/n. Los intervalos \\(BC_{a}\\) están implementados en el paquete boot (boot.ci()) y en el paquete bootstrap (bcanon()). La desventaja de los intervalos \\(BC_{a}\\) es que requieren intenso cómputo estadístico, de acuerdo a Efron and Tibshirani (1993) al menos \\(B= 1000\\) replicaciones son necesairas para reducir el error de muestreo. Ante esto surgen los intervalos ABC (approximate bootstrap confidence intervals), que es un método para aproximar \\(BC_{a}\\) analíticamente (usando expansiones de Taylor). Usando la implementación del paquete bootstrap: library(bootstrap) var_sesgada &lt;- function(x) sum((x - mean(x)) ^ 2) / length(x) bcanon(x = spatial[, 1], nboot = 2000, theta = var_sesgada, alpha = c(0.025, 0.975)) #&gt; $confpoints #&gt; alpha bca point #&gt; [1,] 0.025 103.8402 #&gt; [2,] 0.975 274.0533 #&gt; #&gt; $z0 #&gt; [1] 0.1383042 #&gt; #&gt; $acc #&gt; [1] 0.06124012 #&gt; #&gt; $u #&gt; [1] 164.3936 176.7200 174.5184 178.3776 172.0544 172.0544 174.5184 #&gt; [8] 172.0544 175.9584 173.0400 168.5984 168.2016 155.1200 141.8144 #&gt; [15] 177.9296 178.2816 177.6096 151.0176 178.1664 177.0656 165.8784 #&gt; [22] 173.0400 177.0656 177.8400 178.3904 173.0400 #&gt; #&gt; $call #&gt; bcanon(x = spatial[, 1], nboot = 2000, theta = var_sesgada, alpha = c(0.025, #&gt; 0.975)) Comapara el intervalo anterior con los intervalos normal y de percentiles. Otros intervalos basados en bootstrap incluyen los intervalos pivotales y los intervalos bootstrap-t. Sin embargo, BC y ABC son mejores alternativas. Intervalos pivotales. Sea \\(\\theta=s(P)\\) y \\(\\hat{\\theta}=s(P_n)\\) definimos el pivote \\(R=\\hat{\\theta}-\\theta\\). Sea \\(H(r)\\) la función de distribución acumulada del pivote: \\[H(r) = P(R&lt;r)\\] Definimos \\(C_n^*=(a,b)\\) donde: \\[a=\\hat{\\theta}-H^{-1}(1-\\alpha), b=\\hat{\\theta}-H^{-1}(\\alpha)\\] \\(C_n^*\\) es un intervalo de confianza de \\(1-2\\alpha\\) para \\(\\theta\\); sin embargo, \\(a\\) y \\(b\\) dependen de la distribución desconocida \\(H\\), la podemos estimar usando bootstrap: \\[\\hat{H}(r)=\\frac{1}{B}\\sum_{b=1}^B I(R^*_b \\le r)\\] y obtenemos \\[C_n=(2\\hat{\\theta} - \\hat{\\theta}^*_{1-\\alpha}, 2\\hat{\\theta} + \\hat{\\theta}^*_{1-\\alpha})\\] Exactitud en intervalos de confianza. Un intervalo de \\(95%\\) de confianza exacto no captura el verdadero valor \\(2.5%\\) de las veces, en cada lado. Un intervalo que sub-cubre un lado y sobre-cubre el otro es sesgado. Los intervalos estándar y de percentiles tienen exactitud de primer orden: los errores de cobertura se van a cero a una tasa de \\(1/\\sqrt{n}\\). Los intervalos \\(BC_a\\) tienen exactitud de segundo orden: los errores de cobertura se van a cero a una tasa de \\(1/n\\). A pesar de que los intervalos \\(BC_a\\) pueden ser superiores a los intervalos normales y de percentiles, en la práctica es más común utilizar intervalos normales o de percentiles pues su implementación es más sencilla y son adecuados para un gran número de casos. Ejemplo componentes principales: calificaciones en exámenes Los datos marks (Mardia, Kent y Bibby, 1979) contienen los puntajes de 88 estudiantes en 5 pruebas: mecánica, vectores, álgebra, análisis y estadística. Cada renglón corresponde a la calificación de un estudiante en cada prueba. data(marks, package = &quot;ggm&quot;) glimpse(marks) #&gt; Observations: 88 #&gt; Variables: 5 #&gt; $ mechanics &lt;dbl&gt; 77, 63, 75, 55, 63, 53, 51, 59, 62, 64, 52, 55, 50, 6… #&gt; $ vectors &lt;dbl&gt; 82, 78, 73, 72, 63, 61, 67, 70, 60, 72, 64, 67, 50, 6… #&gt; $ algebra &lt;dbl&gt; 67, 80, 71, 63, 65, 72, 65, 68, 58, 60, 60, 59, 64, 5… #&gt; $ analysis &lt;dbl&gt; 67, 70, 66, 70, 70, 64, 65, 62, 62, 62, 63, 62, 55, 5… #&gt; $ statistics &lt;dbl&gt; 81, 81, 81, 68, 63, 73, 68, 56, 70, 45, 54, 44, 63, 3… Entonces un análisis de componentes principales proseguiría como sigue: pc_marks &lt;- princomp(marks) summary(pc_marks) #&gt; Importance of components: #&gt; Comp.1 Comp.2 Comp.3 Comp.4 #&gt; Standard deviation 26.0600955 14.1291852 10.13060363 9.15149631 #&gt; Proportion of Variance 0.6191097 0.1819910 0.09355915 0.07634838 #&gt; Cumulative Proportion 0.6191097 0.8011007 0.89465983 0.97100821 #&gt; Comp.5 #&gt; Standard deviation 5.63935825 #&gt; Proportion of Variance 0.02899179 #&gt; Cumulative Proportion 1.00000000 loadings(pc_marks) #&gt; #&gt; Loadings: #&gt; Comp.1 Comp.2 Comp.3 Comp.4 Comp.5 #&gt; mechanics 0.505 0.749 0.301 0.295 #&gt; vectors 0.368 0.207 -0.419 -0.781 0.190 #&gt; algebra 0.346 -0.146 -0.924 #&gt; analysis 0.451 -0.301 -0.594 0.521 0.286 #&gt; statistics 0.535 -0.547 0.600 -0.178 0.151 #&gt; #&gt; Comp.1 Comp.2 Comp.3 Comp.4 Comp.5 #&gt; SS loadings 1.0 1.0 1.0 1.0 1.0 #&gt; Proportion Var 0.2 0.2 0.2 0.2 0.2 #&gt; Cumulative Var 0.2 0.4 0.6 0.8 1.0 plot(pc_marks, type = &quot;lines&quot;) biplot(pc_marks) Los cálculos de un análisis de componentes principales involucran la matriz de covarianzas empírica \\(G\\) (estimaciones plug-in) \\[G_{jk} = \\frac{1}{88}\\sum_{i=1}^88(x_{ij}-\\bar{x_j})(x_{ik}-\\bar{x_k})\\] para \\(j,k=1,2,3,4,5\\), y donde \\(\\bar{x_j} = \\sum_{i=1}^88 x_{ij} / 88\\) (la media de la i-ésima columna). G &lt;- cov(marks) * 87 / 88 G #&gt; mechanics vectors algebra analysis statistics #&gt; mechanics 302.2147 125.59969 100.31599 105.11415 116.15819 #&gt; vectors 125.5997 170.87810 84.18957 93.59711 97.88688 #&gt; algebra 100.3160 84.18957 111.60318 110.83936 120.48567 #&gt; analysis 105.1142 93.59711 110.83936 217.87603 153.76808 #&gt; statistics 116.1582 97.88688 120.48567 153.76808 294.37177 Los pesos y las componentes principales no son mas que los eigenvalores y eigenvectores de la matriz de covarianzas \\(G\\), estos se calculan a través de una serie de de manipulaciones algebraicas que requieren cálculos del orden de p^3 (cuando G es una matriz de tamaño p\\(\\times\\)p). eigen_G &lt;- eigen(G) lambda &lt;- eigen_G$values v &lt;- eigen_G$vectors lambda #&gt; [1] 679.12858 199.63388 102.62913 83.74988 31.80236 v #&gt; [,1] [,2] [,3] [,4] [,5] #&gt; [1,] 0.5053373 0.74917585 0.3006046 0.294631757 -0.07873256 #&gt; [2,] 0.3682215 0.20692361 -0.4185473 -0.781332853 -0.18955902 #&gt; [3,] 0.3456083 -0.07622065 -0.1457830 -0.003348995 0.92384059 #&gt; [4,] 0.4512152 -0.30063472 -0.5944322 0.520724416 -0.28551729 #&gt; [5,] 0.5347961 -0.54747360 0.5998773 -0.177611847 -0.15121842 Proponemos el siguiente modelo simple para puntajes correlacionados: \\[\\textbf{x}_i = Q_i \\textbf{v}\\] donde \\(\\textbf{x}_i\\) es la tupla de calificaciones del i-ésimo estudiante, \\(Q_i\\) es un número que representa la habilidad del estudiante y \\(\\textbf{v}\\) es un vector fijo con 5 números que aplica a todos los estudiantes. Si este modelo simple fuera cierto, entonces únicamente el \\(\\hat{\\lambda}_1\\) sería positivo y \\(\\textbf{v} = \\hat{v}_1\\). Sea \\[\\hat{\\theta}=\\sum_{i=1}^5\\hat{\\lambda}_i\\] el modelo propuesto es equivalente a \\(\\hat{\\theta}=1\\), inculso si el modelo es correcto, no esperamos que \\(\\hat{\\theta}\\) sea exactamente uno pues hay ruido en los datos. theta_hat &lt;- lambda[1]/sum(lambda) theta_hat #&gt; [1] 0.6191097 El valor de \\(\\hat{\\theta}\\) mide el porcentaje de la varianza explicada en la primer componente principal, ¿qué tan preciso es \\(\\hat{\\theta}\\)? La complejidad matemática en el cálculo de \\(\\hat{\\theta}\\) es irrelevante siempre y cuando podamos calcular \\(\\hat{\\theta}^*\\) para una muestra bootstrap, en esta caso una muestra bootsrtap es una base de datos de 88$$5 \\(\\textbf{X}^*\\), donde las filas \\(\\textbf{x_i}^*\\) de \\(\\textbf{X}^*\\) son una muestra aleatoria de tamaño 88 de la verdadera matriz de datos. pc_boot &lt;- function(){ muestra_boot &lt;- sample_n(marks, size = 88, replace = TRUE) G &lt;- cov(muestra_boot) * 87 / 88 eigen_G &lt;- eigen(G) theta_hat &lt;- eigen_G$values[1] / sum(eigen_G$values) } B &lt;- 1000 thetas_boot &lt;- rerun(B, pc_boot()) %&gt;% flatten_dbl() Veamos un histograma de las replicaciones de \\(\\hat{\\theta}\\): ggplot(data_frame(theta = thetas_boot)) + geom_histogram(aes(x = theta, y = ..density..), binwidth = 0.02, fill = &quot;gray40&quot;) + geom_vline(aes(xintercept = mean(theta)), color = &quot;red&quot;) + labs(x = expression(hat(theta)^&quot;*&quot;), y = &quot;&quot;) Estas tienen un error estándar theta_se &lt;- sd(thetas_boot) theta_se #&gt; [1] 0.04689286 y media mean(thetas_boot) #&gt; [1] 0.6193033 la media de las replicaciones es muy similar a la estimación \\(\\hat{\\theta}\\), esto indica que \\(\\hat{\\theta}\\) es cercano a insesgado. El eigenvetor \\(\\hat{v}_1\\) correspondiente al mayor eigenvalor se conoce como primera componente de \\(G\\), supongamos que deseamos resumir la calificación de los estudiantes mediante un único número, entonces la mejor combinación lineal de los puntajes es \\[y_i = \\sum_{k = 1}^5 \\hat{v}_{1k}x_{ik}\\] esto es, la combinación lineal que utiliza las componentes de \\(\\hat{v}_1\\) como ponderadores. Si queremos un resumen compuesto por dos números \\((y_i,z_i)\\), la segunda combinación lineal debería ser: \\[z_i = \\sum_{k = 1}^5 \\hat{v}_{2k}x_{ik}\\] Las componentes principales \\(\\hat{v}_1\\) y \\(\\hat{v}_2\\) son estadísticos, usa bootstrap para dar una medición de su variabilidad calculando el error estándar de cada una. Referencias "],
["mas-alla-de-muestras-aleatorias-simples.html", "6.4 Más alla de muestras aleatorias simples", " 6.4 Más alla de muestras aleatorias simples Introdujimos el bootstrap en el contexto de muestras aleatorias, esto es, suponiendo que las observaciones son independientes; en este escenario basta con aproximar la distribución desconocida \\(P\\) usando la dsitribución empírica \\(P_n\\), y el cálculo de los estadísticos es inmediato. Hay casos en los que el mecanismo que generó los datos es más complicado, por ejemplo, cuando tenemos dos muestras, en diseños de encuestas complejas o en series de tiempo. Ejemplo: Dos muestras En el ejemplo de experimentos clínicos de aspirina y ataques de de corazón, podemos pensar el modelo probabilístico \\(P\\) como compuesto por dos distribuciones de probabilidad \\(G\\) y \\(Q\\) una correspondiente al grupo control y otra al grupo de tratamiento, entonces las observaciones de cada grupo provienen de distribuciones distintas y el método bootstrap debe tomar en cuenta esto al generar las muestras, en este caso implica seleccionar muesreas de manera independiente dentro de cada grupo. Ejemplo: Bootstrap en muestreo de encuestas La necesidad de estimaciones confiables junto con el uso eficiente de recursos conllevan a diseños de muestras complejas. Estos diseños típicamente usan las siguientes técnicas: muestreo sin reemplazo de una población finita, muestreo sistemático, estratificación, conglomerados, ajustes a no-respuesta, postestratificación. Como consecuencia, los valores de la muestra suelen no ser independientes. La complejidad de los diseños de encuestas conlleva a que el cálculo de errores estándar sea muy complicado, para atacar este problema hay dos técnicas básicas: 1) un enfoque analítico usando linearización, 2) métodos de remuestreo como bootstrap. El incremento en el poder de cómputo ha favorecido los métodos de remuestreo pues la linearización requiere del desarrollo de una fórmula para cada estimación y supuestos adicionales para simplificar. En 1988 Rao and Wu (1988) propusieron un método de bootstrap para diseños estratificados multietápicos con reemplazo de UPMs que describimos a continuación. ENIGH. Usaremos como ejemplo la Encuesta Nacional de Ingresos y Gastos de los Hogares, ENIGH 2018 (INEGI 2018), esta encuesta usa un diseño de conglomerados estratificado. Antes de proceder a bootstrap debemos entender como se seleccionaron los datos, esto es, el diseño de la muestra: Unidad primaria de muestreo (UPM). Las UPMs están constituidas por agrupaciones de viviendas. Se les denomina unidades primarias pues corresponden a la primera etapa de selección, las unidades secundarias (USMs) serían los hogares. Estratificación. Los estratos se construyen en base a estado, ámbito (urbano, complemento urbano, rural), características sociodemográficas de los habitantes de las viviendas, características físicas y equipamiento. El proceso de estratificación resulta en 888 subestratos en todo el ámbito nacional. La selección de la muestra es independiente para cada estrato, y una vez que se obtiene la muestra se calculan los factores de expansión que reflejan las distintas probabilidades de selección. Después se llevan a cabo ajustes por no respuesta y por proyección (calibración), esta última busca que distintos dominios de la muestra coincidan con la proyección de población de INEGI. library(usethis) use_zip(&quot;https://www.inegi.org.mx/contenidos/programas/enigh/nc/2018/datosabiertos/conjunto_de_datos_enigh_2018_ns_csv.zip&quot;, &quot;data&quot;) library(here) concentrado_hogar &lt;- read_csv(here(&quot;data&quot;, &quot;conjunto_de_datos_enigh_2018_ns_csv&quot;, &quot;conjunto_de_datos_concentradohogar_enigh_2018_ns&quot;, &quot;conjunto_de_datos&quot;, &quot;conjunto_de_datos_concentradohogar_enigh_2018_ns.csv&quot;)) glimpse(concentrado_hogar) #&gt; Observations: 74,647 #&gt; Variables: 126 #&gt; $ folioviv &lt;dbl&gt; 100013601, 100013602, 100013603, 100013604, 100013606… #&gt; $ foliohog &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… #&gt; $ ubica_geo &lt;dbl&gt; 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,… #&gt; $ tam_loc &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… #&gt; $ est_socio &lt;dbl&gt; 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,… #&gt; $ est_dis &lt;dbl&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,… #&gt; $ upm &lt;dbl&gt; 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4,… #&gt; $ factor &lt;dbl&gt; 175, 175, 175, 175, 175, 189, 189, 189, 189, 186, 186… #&gt; $ clase_hog &lt;dbl&gt; 2, 2, 2, 2, 2, 2, 1, 2, 2, 3, 2, 1, 2, 2, 2, 2, 3, 1,… #&gt; $ sexo_jefe &lt;dbl&gt; 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1,… #&gt; $ edad_jefe &lt;dbl&gt; 74, 48, 39, 70, 51, 41, 57, 53, 30, 69, 76, 77, 70, 2… #&gt; $ educa_jefe &lt;dbl&gt; 4, 11, 10, 8, 4, 11, 9, 11, 6, 4, 3, 4, 6, 6, 9, 7, 6… #&gt; $ tot_integ &lt;dbl&gt; 3, 5, 2, 2, 4, 4, 1, 2, 3, 4, 2, 1, 2, 4, 4, 2, 5, 1,… #&gt; $ hombres &lt;dbl&gt; 2, 2, 1, 1, 1, 2, 0, 1, 2, 4, 0, 1, 1, 2, 3, 1, 2, 1,… #&gt; $ mujeres &lt;dbl&gt; 1, 3, 1, 1, 3, 2, 1, 1, 1, 0, 2, 0, 1, 2, 1, 1, 3, 0,… #&gt; $ mayores &lt;dbl&gt; 3, 5, 2, 2, 3, 4, 1, 2, 2, 3, 2, 1, 2, 2, 4, 2, 5, 1,… #&gt; $ menores &lt;dbl&gt; 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 2, 0, 0, 0, 0,… #&gt; $ p12_64 &lt;dbl&gt; 1, 5, 2, 1, 3, 4, 1, 2, 2, 2, 1, 0, 0, 2, 2, 0, 5, 1,… #&gt; $ p65mas &lt;dbl&gt; 2, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 2, 0, 2, 2, 0, 0,… #&gt; $ ocupados &lt;dbl&gt; 2, 2, 2, 0, 2, 2, 1, 2, 2, 2, 1, 1, 1, 1, 2, 0, 4, 1,… #&gt; $ percep_ing &lt;dbl&gt; 3, 5, 2, 2, 2, 2, 1, 2, 2, 4, 2, 1, 2, 1, 4, 2, 4, 1,… #&gt; $ perc_ocupa &lt;dbl&gt; 2, 2, 2, 0, 2, 2, 1, 2, 2, 2, 1, 1, 1, 1, 2, 0, 4, 1,… #&gt; $ ing_cor &lt;dbl&gt; 76403.70, 42987.73, 580697.74, 46252.71, 53837.09, 23… #&gt; $ ingtrab &lt;dbl&gt; 53114.74, 15235.06, 141885.21, 0.00, 43229.49, 129836… #&gt; $ trabajo &lt;dbl&gt; 53114.74, 0.00, 141885.21, 0.00, 8852.45, 129836.03, … #&gt; $ sueldos &lt;dbl&gt; 53114.74, 0.00, 133770.48, 0.00, 8852.45, 95901.63, 2… #&gt; $ horas_extr &lt;dbl&gt; 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,… #&gt; $ comisiones &lt;dbl&gt; 0.00, 0.00, 0.00, 0.00, 0.00, 22131.14, 0.00, 0.00, 0… #&gt; $ aguinaldo &lt;dbl&gt; 0.00, 0.00, 3934.42, 0.00, 0.00, 11803.26, 0.00, 2213… #&gt; $ indemtrab &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… #&gt; $ otra_rem &lt;dbl&gt; 0.00, 0.00, 4180.31, 0.00, 0.00, 0.00, 0.00, 0.00, 0.… #&gt; $ remu_espec &lt;dbl&gt; 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,… #&gt; $ negocio &lt;dbl&gt; 0.00, 13759.66, 0.00, 0.00, 34377.04, 0.00, 0.00, 0.0… #&gt; $ noagrop &lt;dbl&gt; 0.00, 13759.66, 0.00, 0.00, 34377.04, 0.00, 0.00, 0.0… #&gt; $ industria &lt;dbl&gt; 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,… #&gt; $ comercio &lt;dbl&gt; 0.00, 0.00, 0.00, 0.00, 34377.04, 0.00, 0.00, 0.00, 0… #&gt; $ servicios &lt;dbl&gt; 0.00, 13759.66, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0… #&gt; $ agrope &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… #&gt; $ agricolas &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… #&gt; $ pecuarios &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… #&gt; $ reproducc &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… #&gt; $ pesca &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… #&gt; $ otros_trab &lt;dbl&gt; 0.0, 1475.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, … #&gt; $ rentas &lt;dbl&gt; 0.00, 0.00, 29508.19, 0.00, 0.00, 0.00, 0.00, 0.00, 0… #&gt; $ utilidad &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… #&gt; $ arrenda &lt;dbl&gt; 0.00, 0.00, 29508.19, 0.00, 0.00, 0.00, 0.00, 0.00, 0… #&gt; $ transfer &lt;dbl&gt; 11288.96, 3752.67, 391304.34, 34252.71, 107.60, 89906… #&gt; $ jubilacion &lt;dbl&gt; 9147.54, 0.00, 0.00, 23606.55, 0.00, 23606.55, 0.00, … #&gt; $ becas &lt;dbl&gt; 0.0, 491.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0… #&gt; $ donativos &lt;dbl&gt; 0.00, 147.54, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0… #&gt; $ remesas &lt;dbl&gt; 0.00, 98.36, 0.00, 5901.63, 0.00, 0.00, 0.00, 0.00, 0… #&gt; $ bene_gob &lt;dbl&gt; 1622.95, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.… #&gt; $ transf_hog &lt;dbl&gt; 0.00, 3014.97, 0.00, 0.00, 107.60, 61714.26, 0.00, 0.… #&gt; $ trans_inst &lt;dbl&gt; 518.47, 0.00, 391304.34, 4744.53, 0.00, 4585.70, 0.00… #&gt; $ estim_alqu &lt;dbl&gt; 12000.00, 24000.00, 18000.00, 12000.00, 10500.00, 180… #&gt; $ otros_ing &lt;dbl&gt; 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,… #&gt; $ gasto_mon &lt;dbl&gt; 18551.47, 55470.99, 103106.89, 19340.06, 13605.03, 33… #&gt; $ alimentos &lt;dbl&gt; 5618.47, 20930.29, 37594.06, 2892.84, 7367.09, 0.00, … #&gt; $ ali_dentro &lt;dbl&gt; 4075.63, 8587.46, 25251.25, 2892.84, 4795.67, 0.00, 8… #&gt; $ cereales &lt;dbl&gt; 964.25, 2689.65, 3728.53, 385.71, 257.14, 0.00, 437.1… #&gt; $ carnes &lt;dbl&gt; 0.00, 1401.41, 2828.56, 2121.42, 2931.41, 0.00, 1787.… #&gt; $ pescado &lt;dbl&gt; 745.71, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0… #&gt; $ leche &lt;dbl&gt; 0.00, 443.55, 4345.70, 0.00, 0.00, 0.00, 2841.41, 149… #&gt; $ huevo &lt;dbl&gt; 719.98, 0.00, 411.42, 0.00, 0.00, 0.00, 308.57, 629.9… #&gt; $ aceites &lt;dbl&gt; 0.00, 0.00, 1928.57, 0.00, 0.00, 0.00, 0.00, 0.00, 0.… #&gt; $ tuberculo &lt;dbl&gt; 0.00, 257.14, 385.71, 0.00, 128.57, 0.00, 231.42, 411… #&gt; $ verduras &lt;dbl&gt; 745.70, 1893.29, 2635.66, 0.00, 835.70, 0.00, 861.38,… #&gt; $ frutas &lt;dbl&gt; 0.00, 533.16, 1864.27, 0.00, 0.00, 0.00, 244.27, 809.… #&gt; $ azucar &lt;dbl&gt; 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 257.14, 0.00, 0.0… #&gt; $ cafe &lt;dbl&gt; 0.00, 462.85, 1414.28, 0.00, 0.00, 0.00, 964.28, 0.00… #&gt; $ especias &lt;dbl&gt; 0.00, 167.14, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0… #&gt; $ otros_alim &lt;dbl&gt; 0.00, 392.13, 2545.71, 385.71, 514.28, 0.00, 0.00, 26… #&gt; $ bebidas &lt;dbl&gt; 899.99, 347.14, 3162.84, 0.00, 128.57, 0.00, 411.42, … #&gt; $ ali_fuera &lt;dbl&gt; 771.42, 12342.83, 12342.81, 0.00, 2571.42, 0.00, 1928… #&gt; $ tabaco &lt;dbl&gt; 771.42, 0.00, 0.00, 0.00, 0.00, 0.00, 1182.84, 0.00, … #&gt; $ vesti_calz &lt;dbl&gt; 0.00, 401.06, 2015.21, 97.82, 0.00, 0.00, 0.00, 1565.… #&gt; $ vestido &lt;dbl&gt; 0.00, 224.98, 2015.21, 97.82, 0.00, 0.00, 0.00, 293.4… #&gt; $ calzado &lt;dbl&gt; 0.00, 176.08, 0.00, 0.00, 0.00, 0.00, 0.00, 1271.73, … #&gt; $ vivienda &lt;dbl&gt; 3912.00, 2495.00, 4475.00, 1458.00, 300.00, 2801.00, … #&gt; $ alquiler &lt;dbl&gt; 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 3900.… #&gt; $ pred_cons &lt;dbl&gt; 0.00, 1250.00, 1250.00, 0.00, 0.00, 140.00, 250.00, 0… #&gt; $ agua &lt;dbl&gt; 312.00, 750.00, 750.00, 600.00, 0.00, 741.00, 630.00,… #&gt; $ energia &lt;dbl&gt; 3600.00, 495.00, 2475.00, 858.00, 300.00, 1920.00, 35… #&gt; $ limpieza &lt;dbl&gt; 522.00, 412.16, 3318.26, 5514.00, 3300.00, 5682.00, 2… #&gt; $ cuidados &lt;dbl&gt; 522.00, 375.00, 2340.00, 5514.00, 3300.00, 5682.00, 2… #&gt; $ utensilios &lt;dbl&gt; 0.00, 37.16, 978.26, 0.00, 0.00, 0.00, 195.65, 391.30… #&gt; $ enseres &lt;dbl&gt; 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 5901.63, 0.… #&gt; $ salud &lt;dbl&gt; 0.00, 1348.99, 28858.68, 322.82, 56.73, 0.00, 4695.64… #&gt; $ atenc_ambu &lt;dbl&gt; 0.00, 1007.59, 28858.68, 0.00, 56.73, 0.00, 4695.64, … #&gt; $ hospital &lt;dbl&gt; 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,… #&gt; $ medicinas &lt;dbl&gt; 0.00, 341.40, 0.00, 322.82, 0.00, 0.00, 0.00, 0.00, 0… #&gt; $ transporte &lt;dbl&gt; 8400.00, 7628.56, 12325.68, 7350.00, 600.00, 18235.70… #&gt; $ publico &lt;dbl&gt; 0.00, 578.56, 4255.68, 0.00, 0.00, 1285.70, 0.00, 0.0… #&gt; $ foraneo &lt;dbl&gt; 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 590.16, 0.00, 0.0… #&gt; $ adqui_vehi &lt;dbl&gt; 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,… #&gt; $ mantenim &lt;dbl&gt; 7200.00, 3600.00, 4500.00, 6000.00, 0.00, 13200.00, 4… #&gt; $ refaccion &lt;dbl&gt; 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 2213.11, 0.00, 0.… #&gt; $ combus &lt;dbl&gt; 7200.00, 3600.00, 4500.00, 6000.00, 0.00, 13200.00, 2… #&gt; $ comunica &lt;dbl&gt; 1200.00, 3450.00, 3570.00, 1350.00, 600.00, 3750.00, … #&gt; $ educa_espa &lt;dbl&gt; 0.00, 17567.05, 0.00, 639.34, 0.00, 1800.00, 627.00, … #&gt; $ educacion &lt;dbl&gt; 0.00, 8547.39, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.… #&gt; $ esparci &lt;dbl&gt; 0.00, 167.21, 0.00, 639.34, 0.00, 1800.00, 627.00, 36… #&gt; $ paq_turist &lt;dbl&gt; 0.00, 8852.45, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.… #&gt; $ personales &lt;dbl&gt; 99.00, 4663.29, 8520.00, 1065.24, 1686.13, 5109.00, 3… #&gt; $ cuida_pers &lt;dbl&gt; 99.00, 1497.00, 8520.00, 180.00, 1647.00, 4509.00, 15… #&gt; $ acces_pers &lt;dbl&gt; 0.00, 166.29, 0.00, 0.00, 39.13, 0.00, 0.00, 0.00, 0.… #&gt; $ otros_gas &lt;dbl&gt; 0.00, 3000.00, 0.00, 885.24, 0.00, 600.00, 1835.65, 0… #&gt; $ transf_gas &lt;dbl&gt; 0.00, 24.59, 6000.00, 0.00, 295.08, 0.00, 491.80, 236… #&gt; $ percep_tot &lt;dbl&gt; 0.00, 6073.09, 3857.14, 1380.55, 0.00, 1928.57, 489.1… #&gt; $ retiro_inv &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… #&gt; $ prestamos &lt;dbl&gt; 0.00, 7.37, 0.00, 737.70, 0.00, 0.00, 0.00, 0.00, 491… #&gt; $ otras_perc &lt;dbl&gt; 0.00, 462.28, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0… #&gt; $ ero_nm_viv &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… #&gt; $ ero_nm_hog &lt;dbl&gt; 0.00, 5603.44, 3857.14, 642.85, 0.00, 1928.57, 489.13… #&gt; $ erogac_tot &lt;dbl&gt; 0.00, 9009.82, 81147.53, 0.00, 0.00, 14754.09, 0.00, … #&gt; $ cuota_viv &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 12000, 0, 0, 0, 0, 0, 0, 0, 0, 0… #&gt; $ mater_serv &lt;dbl&gt; 0.00, 147.54, 0.00, 0.00, 0.00, 0.00, 0.00, 7868.85, … #&gt; $ material &lt;dbl&gt; 0.00, 147.54, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0… #&gt; $ servicio &lt;dbl&gt; 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 7868.85, 0.… #&gt; $ deposito &lt;dbl&gt; 0.00, 9.83, 66393.44, 0.00, 0.00, 0.00, 0.00, 0.00, 0… #&gt; $ prest_terc &lt;dbl&gt; 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,… #&gt; $ pago_tarje &lt;dbl&gt; 0.00, 8852.45, 0.00, 0.00, 0.00, 14754.09, 0.00, 0.00… #&gt; $ deudas &lt;dbl&gt; 0.00, 0.00, 14754.09, 0.00, 0.00, 0.00, 0.00, 38360.6… #&gt; $ balance &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… #&gt; $ otras_erog &lt;dbl&gt; 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,… #&gt; $ smg &lt;dbl&gt; 7952.4, 7952.4, 7952.4, 7952.4, 7952.4, 7952.4, 7952.… # seleccionar variable de ingreso corriente hogar &lt;- concentrado_hogar %&gt;% mutate( upm = as.integer(upm), jefe_hombre = sexo_jefe == 1, edo = str_sub(ubica_geo, 1, 2), jefa_50 = (sexo_jefe == 2) &amp; (edad_jefe &gt; 50) ) %&gt;% select(folioviv, foliohog, est_dis, upm, factor, ing_cor, sexo_jefe, edad_jefe, edo, jefa_50) %&gt;% group_by(est_dis) %&gt;% mutate(n = n_distinct(upm)) %&gt;% # número de upms por estrato ungroup() hogar #&gt; # A tibble: 74,647 x 11 #&gt; folioviv foliohog est_dis upm factor ing_cor sexo_jefe edad_jefe edo #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; #&gt; 1 1.00e8 1 2 1 175 76404. 1 74 10 #&gt; 2 1.00e8 1 2 1 175 42988. 1 48 10 #&gt; 3 1.00e8 1 2 1 175 580698. 1 39 10 #&gt; 4 1.00e8 1 2 1 175 46253. 2 70 10 #&gt; 5 1.00e8 1 2 1 175 53837. 2 51 10 #&gt; 6 1.00e8 1 2 2 189 237743. 2 41 10 #&gt; 7 1.00e8 1 2 2 189 32607. 2 57 10 #&gt; 8 1.00e8 1 2 2 189 169918. 1 53 10 #&gt; 9 1.00e8 1 2 2 189 17311. 1 30 10 #&gt; 10 1.00e8 1 2 3 186 120488. 1 69 10 #&gt; # … with 74,637 more rows, and 2 more variables: jefa_50 &lt;lgl&gt;, n &lt;int&gt; Para el cálculo de estadísticos debemos usar los factores de expansión, por ejemplo el ingreso trimestral total sería: sum(hogar$factor * hogar$ing_cor / 1000) #&gt; [1] 1723700566 y ingreso trimestral medio (miles pesos) sum(hogar$factor * hogar$ing_cor / 1000) / sum(hogar$factor) #&gt; [1] 49.61029 La estimación del error estándar, por otro lado, no es sencilla y requiere usar aproximaciones, en la metodología de INEGI proponen una aproximación con series de Taylor. Figure 6.1: Extracto de estimación de errores de muestreo, ENIGH 2018. Veamos ahora como calcular el error estándar siguiendo el bootstrap de Rao y Wu: En cada estrato se seleccionan con reemplazo \\(m_h\\) UPMs de las \\(n_h\\) de la muestra original. Denotamos por \\(m_{hi}^*\\) el número de veces que se seleccionó la UPM \\(i\\) en el estrato \\(h\\) (de tal manera que \\(\\sum m_{hi}^*=m_h\\)). Creamos una replicación del ponderador correspondiente a la \\(k\\)-ésima unidad (USM) como: \\[d_k^*=d_k \\bigg[\\bigg(1-\\sqrt{\\frac{m_h}{n_h - 1}}\\bigg) + \\bigg(\\sqrt{\\frac{m_h}{n_h - 1}}\\frac{n_h}{m_h}m_{h}^*\\bigg)\\bigg]\\] donde \\(d_k\\) es el inverso de la probabilidad de selección. Si \\(m_h&lt;(n_h -1)\\) todos los pesos definidos de esta manera serán no negativos. Calculamos el peso final \\(w_k^*\\) aplicando a \\(d_k^*\\) los mismos ajustes que se hicieron a los ponderadores originales. Calculamos el estadístico de interés \\(\\hat{\\theta}\\) usando los ponderadores \\(w_k^*\\) en lugar de los originales \\(w_k\\). Repetimos los pasos 1 y 2 \\(B\\) veces para obtener \\(\\hat{\\theta}^{*1},\\hat{\\theta}^{*2},...,\\hat{\\theta}^{*B}\\). Calculamos el error estándar como: \\[\\hat{se}_B = \\bigg\\{\\frac{\\sum_{b=1}^B[\\hat{\\theta}^*(b)-\\hat{\\theta}^*(\\cdot)]^2 }{B}\\bigg\\}^{1/2}\\] Podemos elegir cualquier valor de \\(m_h \\geq 1\\), el más sencillo es elegir \\(m_h=n_h-1\\), en este caso: \\[d_k^*=d_k \\frac{n_h}{n_h-1}m_{hi}^*\\] en este escenario las unidades que no se incluyen en la muestra tienen un valor de cero como ponderador. Si elegimos \\(n_h \\ne n_h-1\\) las unidades que no están en la muestra tienen ponderador distinto a cero, si \\(m_h=n_h\\) el ponderador podría tomar valores negativos. Implementemos el bootstrap de Rao y Wu a la ENIGH, usaremos \\(m_h=n_h-1\\) # creamos una tabla con los estratos y upms est_upm &lt;- hogar %&gt;% distinct(est_dis, upm, n) hogar_factor &lt;- est_upm %&gt;% split(.$est_dis) %&gt;% # dentro de cada estrato tomamos muestra (n_h-1) map_df(~sample_n(., size = first(.$n) - 1, replace = TRUE)) %&gt;% add_count(upm, name = &quot;m_hi&quot;) %&gt;% # calculamos m_hi* left_join(hogar, by = c(&quot;est_dis&quot;, &quot;upm&quot;, &quot;n&quot;)) %&gt;% mutate(factor_b = factor * m_hi * n / (n - 1)) # unimos los pasos anteriores en una función para replicar en cada muestra bootstrap svy_boot &lt;- function(est_upm, hogar){ m_hi &lt;- est_upm %&gt;% split(.$est_dis) %&gt;% map(~sample(.$upm, size = first(.$n) - 1, replace = TRUE)) %&gt;% flatten_int() %&gt;% plyr::count() %&gt;% select(upm = x, m_h = freq) m_hi %&gt;% left_join(hogar, by = c(&quot;upm&quot;)) %&gt;% mutate(factor_b = factor * m_h * n / (n - 1)) } set.seed(1038984) boot_rep &lt;- rerun(500, svy_boot(est_upm, hogar)) # Aplicación a ingreso medio wtd_mean &lt;- function(w, x, na.rm = FALSE) { sum(w * x, na.rm = na.rm) / sum(w, na.rm = na.rm) } # La media es: hogar %&gt;% summarise(media = wtd_mean(factor, ing_cor)) #&gt; # A tibble: 1 x 1 #&gt; media #&gt; &lt;dbl&gt; #&gt; 1 49610. Y el error estándar: map_dbl(boot_rep, ~wtd_mean(w = .$factor_b, x = .$ing_cor)) %&gt;% sd() #&gt; [1] 441.0439 El método bootstrap está implementado en el paquete survey y más recientemente en srvyr que es una versión tidy que utiliza las funciones en survey. Podemos comparar nuestros resultados con la implementación en survey. # 1. Definimos el diseño de la encuesta library(survey) library(srvyr) enigh_design &lt;- hogar %&gt;% as_survey_design(ids = upm, weights = factor, strata = est_dis) # 2. Elegimos bootstrap como el método para el cálculo de errores estándar set.seed(7398731) enigh_boot &lt;- enigh_design %&gt;% as_survey_rep(type = &quot;subbootstrap&quot;, replicates = 500) # 3. Así calculamos la media enigh_boot %&gt;% srvyr::summarise(mean_ingcor = survey_mean(ing_cor)) #&gt; # A tibble: 1 x 2 #&gt; mean_ingcor mean_ingcor_se #&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 49610. 459. enigh_boot %&gt;% group_by(edo) %&gt;% srvyr::summarise(mean_ingcor = survey_mean(ing_cor)) #&gt; # A tibble: 30 x 3 #&gt; edo mean_ingcor mean_ingcor_se #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 10 50161. 942. #&gt; 2 11 46142. 1252. #&gt; 3 12 29334. 1067. #&gt; 4 13 38783. 933. #&gt; 5 14 60541. 1873. #&gt; 6 15 48013. 1245. #&gt; 7 16 42653. 1239. #&gt; 8 17 42973. 1675. #&gt; 9 18 48148. 1822. #&gt; 10 19 68959. 3625. #&gt; # … with 20 more rows # cuantiles svyquantile(~ing_cor, enigh_boot, quantiles = seq(0.1, 1, 0.1), interval.type = &quot;quantile&quot;) #&gt; Statistic: #&gt; ing_cor #&gt; q0.1 13155.75 #&gt; q0.2 18895.37 #&gt; q0.3 24041.89 #&gt; q0.4 29358.29 #&gt; q0.5 35505.47 #&gt; q0.6 42695.44 #&gt; q0.7 52426.32 #&gt; q0.8 66594.08 #&gt; q0.9 94613.04 #&gt; q1 4501830.28 #&gt; SE: #&gt; ing_cor #&gt; q0.1 114.2707 #&gt; q0.2 110.1885 #&gt; q0.3 130.8151 #&gt; q0.4 152.8712 #&gt; q0.5 199.3702 #&gt; q0.6 241.1244 #&gt; q0.7 339.4501 #&gt; q0.8 479.4980 #&gt; q0.9 908.6814 #&gt; q1 384477.9727 Supongamos que queremos calcular la media para los hogares con jefe de familia mujer mayor a 50 años. # Creamos datos con filter y repetimos lo de arriba hogar_mujer &lt;- filter(hogar, jefa_50) est_upm_mujer &lt;- hogar_mujer %&gt;% distinct(est_dis, upm, n) # bootstrap boot_rep_mujer &lt;- rerun(500, svy_boot(est_upm_mujer, hogar_mujer)) # media y error estándar hogar_mujer %&gt;% summarise(media = wtd_mean(factor, ing_cor)) #&gt; # A tibble: 1 x 1 #&gt; media #&gt; &lt;dbl&gt; #&gt; 1 44356. # usamos bootstrap para calcular los errores estándar map_dbl(boot_rep_mujer, ~wtd_mean(w = .$factor_b, x = .$ing_cor, na.rm = TRUE)) %&gt;% sd() #&gt; [1] 546.8034 Comparemos con los resultados de srvyr. ¿qué pasa? library(srvyr) enigh_boot %&gt;% srvyr::group_by(jefa_50) %&gt;% srvyr::summarise(mean_ingcor = survey_mean(ing_cor)) #&gt; # A tibble: 2 x 3 #&gt; jefa_50 mean_ingcor mean_ingcor_se #&gt; &lt;lgl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 FALSE 50574. 502. #&gt; 2 TRUE 44356. 726. Sub-poblaciones como “jefas de familia mayores a 50” se conocen como un dominio, esto es un subgrupo cuyo tamaño de muestra es aleatorio, este ejemplo nos recalca la importancia de considerar el proceso en que se generó la muestra para calcular los errores estándar bootstrap. map_dbl(boot_rep, function(x){hm &lt;- filter(x, jefa_50); wtd_mean(w = hm$factor_b, x = hm$ing_cor)}) %&gt;% sd() #&gt; [1] 715.9535 Resumiendo: El bootstrap de Rao y Wu genera un estimador consistente y aproximadamente insesgado de la varianza de estadísticos no lineales y para la varianza de un cuantil. Este método supone que la seleccion de UPMs es con reemplazo; hay variaciones del estimador bootstrap de Rao y Wu que extienden el método que acabamos de estudiar; sin embargo, es común ignorar este aspecto, por ejemplo Mach et al estudian las propiedades del estimador de varianza bootstrap de Rao y Wu cuando la muestra se seleccionó sin reemplazo. Referencias "],
["bootstrap-en-r.html", "6.5 Bootstrap en R", " 6.5 Bootstrap en R Es común crear nuestras porpias funciones cuando usamos bootstrap, sin embargo, en R también hay alternativas que pueden resultar convenientes, mencionamos 3: El paquete rsample (forma parte de la colección tidymodels) y tiene una función bootsrtraps() que regresa un arreglo cuadrangular (tibble, data.frame) que incluye una columna con las muestras bootstrap y un identificador del número y tipo de muestra. Veamos un ejemplo donde seleccionamos muestras del conjunto de datos muestra_computos que contiene 10,000 observaciones. library(rsample) library(estcomp) muestra_computos &lt;- sample_n(election_2012, 10000) muestra_computos #&gt; # A tibble: 10,000 x 23 #&gt; state_code state_name state_abbr district_loc_17 district_fed_17 #&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; #&gt; 1 27 Tabasco TAB 5 5 #&gt; 2 15 México MEX 32 24 #&gt; 3 09 Ciudad de… CDMX 20 17 #&gt; 4 21 Puebla PUE 16 12 #&gt; 5 12 Guerrero GRO 17 1 #&gt; 6 30 Veracruz VER 8 7 #&gt; 7 11 Guanajuato GTO 18 7 #&gt; 8 12 Guerrero GRO 4 4 #&gt; 9 30 Veracruz VER 25 19 #&gt; 10 15 México MEX 29 15 #&gt; # … with 9,990 more rows, and 18 more variables: polling_id &lt;int&gt;, #&gt; # section &lt;int&gt;, region &lt;chr&gt;, polling_type &lt;chr&gt;, section_type &lt;chr&gt;, #&gt; # pri_pvem &lt;int&gt;, pan &lt;int&gt;, panal &lt;int&gt;, prd_pt_mc &lt;int&gt;, otros &lt;int&gt;, #&gt; # total &lt;int&gt;, nominal_list &lt;int&gt;, pri_pvem_pct &lt;dbl&gt;, pan_pct &lt;dbl&gt;, #&gt; # panal_pct &lt;dbl&gt;, prd_pt_mc_pct &lt;dbl&gt;, otros_pct &lt;dbl&gt;, winner &lt;chr&gt; Generamos 100 muestras bootstrap, y la función nos regresa un arreglo con 100 renglones, cada uno corresponde a una muestra bootstrap. set.seed(839287482) computos_boot &lt;- bootstraps(muestra_computos, times = 100) computos_boot #&gt; # Bootstrap sampling #&gt; # A tibble: 100 x 2 #&gt; splits id #&gt; &lt;list&gt; &lt;chr&gt; #&gt; 1 &lt;split [10K/3.6K]&gt; Bootstrap001 #&gt; 2 &lt;split [10K/3.6K]&gt; Bootstrap002 #&gt; 3 &lt;split [10K/3.7K]&gt; Bootstrap003 #&gt; 4 &lt;split [10K/3.7K]&gt; Bootstrap004 #&gt; 5 &lt;split [10K/3.7K]&gt; Bootstrap005 #&gt; 6 &lt;split [10K/3.7K]&gt; Bootstrap006 #&gt; 7 &lt;split [10K/3.7K]&gt; Bootstrap007 #&gt; 8 &lt;split [10K/3.7K]&gt; Bootstrap008 #&gt; 9 &lt;split [10K/3.6K]&gt; Bootstrap009 #&gt; 10 &lt;split [10K/3.7K]&gt; Bootstrap010 #&gt; # … with 90 more rows La columna splits tiene información de las muestras seleccionadas, para la primera vemos que de 10,000 observaciones en la muestra original la primera muestra bootstrap contiene 10000-3647=6353. first_computos_boot &lt;- computos_boot$splits[[1]] first_computos_boot #&gt; &lt;10000/3647/10000&gt; Y podemos obtener los datos de la muestra bootstrap con la función as.data.frame() as.data.frame(first_computos_boot) #&gt; # A tibble: 10,000 x 23 #&gt; state_code state_name state_abbr district_loc_17 district_fed_17 #&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; #&gt; 1 01 Aguascali… AGS 18 3 #&gt; 2 15 México MEX 17 18 #&gt; 3 02 Baja Cali… BC 10 6 #&gt; 4 16 Michoacán MICH 8 2 #&gt; 5 09 Ciudad de… CDMX 7 9 #&gt; 6 05 Coahuila COAH 15 7 #&gt; 7 26 Sonora SON 20 7 #&gt; 8 09 Ciudad de… CDMX 4 2 #&gt; 9 30 Veracruz VER 14 12 #&gt; 10 30 Veracruz VER 24 19 #&gt; # … with 9,990 more rows, and 18 more variables: polling_id &lt;int&gt;, #&gt; # section &lt;int&gt;, region &lt;chr&gt;, polling_type &lt;chr&gt;, section_type &lt;chr&gt;, #&gt; # pri_pvem &lt;int&gt;, pan &lt;int&gt;, panal &lt;int&gt;, prd_pt_mc &lt;int&gt;, otros &lt;int&gt;, #&gt; # total &lt;int&gt;, nominal_list &lt;int&gt;, pri_pvem_pct &lt;dbl&gt;, pan_pct &lt;dbl&gt;, #&gt; # panal_pct &lt;dbl&gt;, prd_pt_mc_pct &lt;dbl&gt;, otros_pct &lt;dbl&gt;, winner &lt;chr&gt; Una de las principales ventajas de usar este paquete es que es eficiente en el uso de memoria. library(pryr) #&gt; Registered S3 method overwritten by &#39;pryr&#39;: #&gt; method from #&gt; print.bytes Rcpp #&gt; #&gt; Attaching package: &#39;pryr&#39; #&gt; The following objects are masked from &#39;package:purrr&#39;: #&gt; #&gt; compose, partial object_size(muestra_computos) #&gt; 1.41 MB object_size(computos_boot) #&gt; 5.49 MB # tamaño por muestra object_size(computos_boot)/nrow(computos_boot) #&gt; 54.9 kB # el incremento en tamaño es &lt;&lt; 100 as.numeric(object_size(computos_boot)/object_size(muestra_computos)) #&gt; [1] 3.894717 El paquete boot está asociado al libro Bootstrap Methods and Their Applications (Davison and Hinkley (1997)) y tiene, entre otras, funciones para calcular replicaciones bootstrap y para construir intervalos de confianza usando bootstrap: calculo de replicaciones bootstrap con la función boot(), intervalos normales, de percentiles y \\(BC_a\\) con la función boot.ci(), intevalos ABC con la función `abc.ci(). El paquete bootstrap contiene datos usados en Efron and Tibshirani (1993), y la implementación de funciones para calcular replicaciones y construir intervalos de confianza: calculo de replicaciones bootstrap con la función bootstrap(), intervalos \\(BC_a\\) con la función bcanon(), intevalos ABC con la función `abcnon(). Referencias "],
["conclusiones-y-observaciones.html", "6.6 Conclusiones y observaciones", " 6.6 Conclusiones y observaciones El principio fundamental del Bootstrap no paramétrico es que podemos estimar la distribución poblacional con la distribución empírica. Por tanto para hacer inferencia tomamos muestras con reemplazo de la distribución empírica y analizamos la variación de la estadística de interés a lo largo de las muestras. El bootstrap nos da la posibilidad de crear intervalos de confianza cuando no contamos con fórmulas para hacerlo de manera analítica y sin supuestos distribucionales de la población. Hay muchas opciones para construir intervalos bootstrap, los que tienen mejores propiedades son los intervalos \\(BC_a\\), sin embargo los más comunes son los intervalos normales con error estándar bootstrap y los intervalos de percentiles de la distribución bootstrap. Antes de hacer intervalos normales vale la pena graficar la distribución bootstrap y evaluar si el supuesto de normalidad es razonable. En cuanto al número de muestras bootstrap se recomienda al menos \\(1,000\\) al hacer pruebas, y \\(10,000\\) o \\(15,000\\) para los resultados finales, sobre todo cuando se hacen intervalos de confianza de percentiles. La función de distribución empírica es una mala estimación en las colas de las distribuciones, por lo que es difícil construir intervalos de confianza (usando bootstrap no paramétrico) para estadísticas que dependen mucho de las colas. "],
["tareas.html", "Tareas", " Tareas Las tareas se envían por correo a teresa.ortiz.mancera@gmail.com con título: EstComp-TareaXX (donde XX corresponde al número de tarea, 01..). Las tareas deben incluir código y resultados (si conocen Rmarkdown es muy conveniente para este propósito). "],
["instalacion-y-visualizacion.html", "1. Instalación y visualización", " 1. Instalación y visualización 1. Instala los siguientes paquetes (o colecciones): tidyverse de CRAN (install.packages(&quot;tidyverse&quot;)) devtools de CRAN (install.packages(&quot;devtools&quot;)) gapminder de CRAN (install.packages(&quot;gapminder&quot;)) estcomp de GitHUB (debes haber instalado devtools y correr devtools::install_github(&quot;tereom/estcomp&quot;)) mxmaps instalarlo es opcional de GitHub 2. Visualización Elige un base de datos, recuerda que en la ayuda puedes encontrar más información de las variables (?gapminder): gapminder (paquete gapminder en CRAN). election_2012 ó election_sub_2012 (paquete estcomp). df_edu (paquete estcomp). enlacep_2013 o un subconjuto de este (paquete estcomp). Escribe algunas preguntas que consideres interesantes de los datos. Realiza \\(3\\) gráficas buscando explorar las preguntas de arriba y explica las relaciones que encuentres. Debes usar lo que revisamos en estas notas y al menos una de las gráficas debe ser de paneles (usando facet_wrap() o facet_grid). 4. Prueba (en clase)! Ejercicios basados en ejercicios de Wickham and Grolemund (2017). Socrative: https://b.socrative.com/login/student/ Room: ESTCOMP library(tidyverse,warn.conflicts = FALSE, quietly = TRUE) library(gridExtra) # 1. one &lt;- ggplot(data = mpg) + geom_smooth(mapping = aes(x = displ, y = hwy)) # 2. two &lt;- ggplot(data = mpg) + geom_smooth(mapping = aes(x = displ, y = hwy), se = FALSE) # 3. three &lt;- ggplot(data = mpg) + geom_smooth(mapping = aes(x = displ, y = hwy, group = drv)) # 4. four &lt;- ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = &quot;blue&quot;), show.legend = FALSE) # 5. five &lt;- ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy), color = &quot;blue&quot;, show.legend = FALSE) # 6. six &lt;- ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy), color = &quot;class&quot;, show.legend = FALSE) # 7. seven &lt;- ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = &quot;class&quot;), show.legend = FALSE) eight &lt;- ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) + geom_point() + geom_smooth() nine &lt;- ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point(aes(color = drv)) + geom_smooth(data = select(mpg, displ, hwy), aes(x = displ, y = hwy)) ten &lt;- ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point(aes(color = drv)) + geom_smooth() eleven &lt;- ggplot(data = mpg) + geom_point(aes(x = displ, y = hwy, color = drv)) + geom_smooth(aes(x = displ, y = hwy, color = drv)) Referencias "],
["transformacion-de-datos-1.html", "2. Transformación de datos", " 2. Transformación de datos Vuelve a instalar el paquete estcomp para asegurar que tengas todos los datos y su documentación: devtools::install_github(&quot;tereom/estcomp&quot;) Usaremos los datos df_edu, ve la ayuda para entender sus variables: library(estcomp) ?df_edu ¿Cuál es el municipo con mayor escolaridad promedio (valor de schoolyrs)? Tip: usa filter para quedarte únicamente con sex correspondiente a Total. Crea una data.frame que contenga una línea por cada estado y por sexo, con la siguiente información: la escolaridad promedio por estado y sexo (ponderada por la población pop_15) la población de cada sexo (mayor a 15 años) Crea una variable que indique el porcentaje de la población que cursó al menos educación básica. Enuncia al menos una pregunta que se pueda responder transformando y graficando estos datos. Crea tu(s) gráfica(s). "],
["union-de-tablas-y-limpieza-de-datos.html", "3. Unión de tablas y limpieza de datos", " 3. Unión de tablas y limpieza de datos Pueden encontrar la versión de las notas de datos limpuis usando gather() y spread() [aquí](https://tereom.github.io/tutoriales/datos_limpios.html. Trabajaremos con los datos df_marital, ¿Están limpios los datos? en caso de que no ¿qué principio no cumplen? library(estcomp) df_marital #&gt; # A tibble: 29,484 x 14 #&gt; state_code municipio_code region state_name state_abbr municipio_name #&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; #&gt; 1 01 001 01001 Aguascali… AGS Aguascalientes #&gt; 2 01 001 01001 Aguascali… AGS Aguascalientes #&gt; 3 01 001 01001 Aguascali… AGS Aguascalientes #&gt; 4 01 001 01001 Aguascali… AGS Aguascalientes #&gt; 5 01 001 01001 Aguascali… AGS Aguascalientes #&gt; 6 01 001 01001 Aguascali… AGS Aguascalientes #&gt; 7 01 001 01001 Aguascali… AGS Aguascalientes #&gt; 8 01 001 01001 Aguascali… AGS Aguascalientes #&gt; 9 01 001 01001 Aguascali… AGS Aguascalientes #&gt; 10 01 001 01001 Aguascali… AGS Aguascalientes #&gt; # … with 29,474 more rows, and 8 more variables: sex &lt;chr&gt;, #&gt; # age_group &lt;chr&gt;, pop &lt;dbl&gt;, single &lt;dbl&gt;, married &lt;dbl&gt;, #&gt; # living_w_partner &lt;dbl&gt;, separated &lt;dbl&gt;, other &lt;dbl&gt; Limpia los datos y muestra las primeras y últimas líneas (usa head() y tail()). Filtra para eliminar los casos a total en las variables sexo y edad, calcula a nivel nacional cuál es la proporción en cada situación conyugal por grupo de edad y sexo. ¿Cómo puedes graficar o presentar los resultados? Regresando a los datos que obtuviste en 2, une la tabla de datos con df_edu, ¿qué variables se usarán para unir? "],
["programacion-funcional-y-distribucion-muestral.html", "4. Programación funcional y distribución muestral", " 4. Programación funcional y distribución muestral Descarga la carpeta specdata, ésta contiene 332 archivos csv que almacenan información de monitoreo de contaminación en 332 ubicaciones de EUA. Cada archivo contiene información de una unidad de monitoreo y el número de identificación del monitor es el nombre del archivo. En este ejercicio nos interesa unir todas las tablas en un solo data.frame que incluya el identificador de las estaciones. La siguiente instrucción descarga los datos si trabajas con proyectos de RStudio, también puedes descargar el zip manualmente. library(usethis) use_directory(&quot;data&quot;) use_zip(&quot;https://d396qusza40orc.cloudfront.net/rprog%2Fdata%2Fspecdata.zip&quot;, destdir = &quot;data&quot;) Crea un vector con las direcciones de los archivos. Lee uno de los archivos usando la función read_csv() del paquete readr. Tip: especifica el tipo de cada columna usando el parámetro col_types. Utiliza la función map_df() para iterar sobre el vector con las direcciones de los archivos csv y crea un data.frame con todos los datos, recuerda añadir una columna con el nombre del archivo para poder identificar la estación. Consideramos los datos de ENLACE edo. de México (enlace), y la columna de calificaciones de español 3o de primaria (esp_3). library(estcomp) enlace &lt;- enlacep_2013 %&gt;% janitor::clean_names() %&gt;% mutate(id = 1:n()) %&gt;% select(id, cve_ent, turno, tipo, esp_3 = punt_esp_3, esp_6 = punt_esp_6, n_eval_3 = alum_eval_3, n_eval_6 = alum_eval_6) %&gt;% na.omit() %&gt;% filter(esp_3 &gt; 0, esp_6 &gt; 0, n_eval_3 &gt; 0, n_eval_6 &gt; 0, cve_ent == &quot;15&quot;) Selecciona una muestra de tamaño \\(n = 10, 100, 1000\\). Para cada muestra calcula media y el error estándar de la media usando el principio del plug-in: \\(\\hat{\\mu}=\\bar{x}\\), y \\(\\hat{se}(\\bar{x})=\\hat{\\sigma}_{P_n}/\\sqrt{n}\\). Tip: Usa la función sample_n() del paquete deplyr para generar las muestras. Ahora aproximareos la distribución muestral, para cada tamaño de muestra \\(n\\): simula \\(10,000\\) muestras aleatorias, ii) calcula la media en cada muestra, Realiza un histograma de la distribución muestral de las medias (las medias del paso anterior) iv) aproxima el error estándar calculando la desviación estándar de las medias del paso ii. Tip: Escribe una función que dependa del tamaño de muestra y usa la función rerun() del paquete purrr para hacer las \\(10,000\\) simulaciones. simula_media &lt;- function(n) { } medias_10 &lt;- rerun(10000, simula_media(n = 10)) %&gt;% flatten_dbl() Calcula el error estándar de la media para cada tamaño de muestra usando la información poblacional (ésta no es una aproximación), usa la fórmula: \\(se_P(\\bar{x}) = \\sigma_P/ \\sqrt{n}\\). ¿Cómo se comparan los errores estándar correspondientes a los distintos tamaños de muestra? "],
["bootstrap.html", "5. Bootstrap", " 5. Bootstrap Conteo rápido En México, las elecciones tienen lugar un domingo, los resultados oficiales del proceso se presentan a la población una semana después. A fin de evitar proclamaciones de victoria injustificadas durante ese periodo el INE organiza un conteo rápido. El conteo rápido es un procedimiento para estimar, a partir de una muestra aleatoria de casillas, el porcentaje de votos a favor de los candidatos en la elección. En este ejercicio deberás crear intervalos de confianza para la proporción de votos que recibió cada candidato en las elecciones de 2006. La inferencia se hará a partir de una muestra de las casillas similar a la que se utilizó para el conteo rápido de 2006. El diseño utilizado es muestreo estratificado simple, lo que quiere decir que: se particionan las casillas de la pablación en estratos (cada casilla pertenece a exactamente un estrato), y dentro de cada estrato se usa muestreo aleatorio para seleccionar las casillas que estarán en la muestra. En este ejercicio (similar al conteo rápido de 2006): Se seleccionó una muestra de \\(7,200\\) casillas La muestra se repartió a lo largo de 300 estratos. La tabla strata_sample_2006 contiene en la columna \\(N\\) el número total de casillas en el estrato y en \\(n\\) el número de casillas que se seleccionaron en la muestra, para cada estrato: library(estcomp) strata_sample_2006 #&gt; # A tibble: 300 x 3 #&gt; stratum n N #&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; #&gt; 1 1 20 369 #&gt; 2 2 23 420 #&gt; 3 3 24 440 #&gt; 4 4 31 570 #&gt; 5 5 29 528 #&gt; 6 6 37 664 #&gt; 7 7 26 474 #&gt; 8 8 21 373 #&gt; 9 9 25 457 #&gt; 10 10 24 430 #&gt; # … with 290 more rows La tabla sample_2006 en el paquete estcomp (vuelve a instalar de ser necesario) contiene para cada casilla: el estrato al que pertenece: stratum el número de votos que recibió cada partido/coalición: pan, pri_pvem, panal, prd_pt_convergencia, psd y la columna otros indica el número de votos nulos o por candidatos no registrados. el total de votos registrado en la casilla: total. sample_2006 #&gt; # A tibble: 7,200 x 10 #&gt; polling_id stratum edo_id pri_pvem pan panal prd_pt_conv psd otros #&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; #&gt; 1 74593 106 16 47 40 0 40 0 9 #&gt; 2 109927 194 27 131 10 0 147 1 8 #&gt; 3 112039 199 28 51 74 2 57 2 2 #&gt; 4 86392 141 20 145 64 2 139 1 14 #&gt; 5 101306 176 24 51 160 0 64 14 1 #&gt; 6 86044 140 20 150 20 0 166 1 11 #&gt; 7 56057 57 15 117 119 2 82 0 24 #&gt; 8 84186 128 19 118 205 8 73 9 13 #&gt; 9 27778 283 9 26 65 5 249 7 2 #&gt; 10 29892 289 9 27 32 0 338 14 7 #&gt; # … with 7,190 more rows, and 1 more variable: total &lt;int&gt; Una de las metodolgías de estimación, que se usa en el conteo rápido, es estimador de razón y se contruyen intervalos de 95% de confianza usando el método normal con error estándar bootstrap. En este ejercicio debes construir intervalos usando este procedimiento. Para cada candidato: Calcula el estimador de razón combinado, para muestreo estratificado la fórmula es: \\[\\hat{p}=\\frac{\\sum_h \\frac{N_h}{n_h} \\sum_i Y_{hi}}{\\sum_h \\frac{N_h}{n_h} \\sum_i X_{hi}}\\] donde: \\(\\hat{p}\\) es la estimación de la proporción de votos que recibió el candidato en la elección. \\(Y_{hi}\\) es el número total de votos que recibió el candidato en la \\(i\\)-ésima casillas, que pertence al \\(h\\)-ésimo estrato. \\(X_{hi}\\) es el número total de votos en la \\(i\\)-ésima casilla, que pertence al \\(h\\)-ésimo estrato. \\(N_h\\) es el número total de casillas en el \\(h\\)-ésimo estrato. \\(n_h\\) es el número de casillas del \\(h\\)-ésimo estrato que se seleccionaron en la muestra. Utiliza bootstrap para calcular el error estándar, y reporta tu estimación del error. Genera 1000 muestras bootstrap. Recuerda que las muestras bootstrap tienen que tomar en cuenta la metodología que se utilizó en la selección de la muestra original, en este caso, lo que implica es que debes tomar una muestra aleatoria independient dentro de cada estrato. Construye un intervalo del 95% de confianza utilizando el método normal. Repite para todos los partidos (y la categoría otros). Reporta tus intervalos en una tabla. "],
["referencias.html", "Referencias", " Referencias "]
]
